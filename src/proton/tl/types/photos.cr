# Copyright 2020 - Chris Watson <cawatson1993@gmail.com>
#
# You should have received with this program a copy of the MIT license. This code is
# subject to the terms and conditions outlined in said license. For more information,
# please see https://en.wikipedia.org/wiki/MIT_License.
#
# This file was autogenerated. Please do not modify directory.
require "../../helpers"
require "../../tl_object"

module Proton
  module TL
    class Photos < TLObject
      getter constructor_id = 0x8dca6aa5_u32
      
      property photos : Array(Photo)
      property users : Array(User)
      
      def initialize(
        @photos : Array(Photo),
        @users : Array(User)
      )
      end
      
      def to_bytes
        buffer = IO::Memory.new
        buffer.write_bytes(self.constructor_id, IO::ByteFormat::LittleEndian)
        buffer.write_bytes(0x15c4b51c_u32, IO::ByteFormat::LittleEndian)
        buffer.write_bytes(@photos.size, IO::ByteFormat::LittleEndian)
        @photos.each do |val|
          builder.write(val.to_bytes)
        end
        buffer.write_bytes(0x15c4b51c_u32, IO::ByteFormat::LittleEndian)
        buffer.write_bytes(@users.size, IO::ByteFormat::LittleEndian)
        @users.each do |val|
          builder.write(val.to_bytes)
        end
        buffer
      end
      
      def self.from_bytes(bytes)
      end
    end
    
    class PhotosSlice < Photos
      getter constructor_id = 0x15051f54_u32
      
      property count : Int32
      property photos : Array(Photo)
      property users : Array(User)
      
      def initialize(
        @count : Int32,
        @photos : Array(Photo),
        @users : Array(User)
      )
      end
      
      def to_bytes
        buffer = IO::Memory.new
        buffer.write_bytes(self.constructor_id, IO::ByteFormat::LittleEndian)
        buffer.write_bytes(@count, IO::ByteFormat::LittleEndian)
        buffer.write_bytes(0x15c4b51c_u32, IO::ByteFormat::LittleEndian)
        buffer.write_bytes(@photos.size, IO::ByteFormat::LittleEndian)
        @photos.each do |val|
          builder.write(val.to_bytes)
        end
        buffer.write_bytes(0x15c4b51c_u32, IO::ByteFormat::LittleEndian)
        buffer.write_bytes(@users.size, IO::ByteFormat::LittleEndian)
        @users.each do |val|
          builder.write(val.to_bytes)
        end
        buffer
      end
      
      def self.from_bytes(bytes)
      end
    end
    
    class Photo < TLObject
      getter constructor_id = 0x20212ca8_u32
      
      property photo : Photo
      property users : Array(User)
      
      def initialize(
        @photo : Photo,
        @users : Array(User)
      )
      end
      
      def to_bytes
        buffer = IO::Memory.new
        buffer.write_bytes(self.constructor_id, IO::ByteFormat::LittleEndian)
        buffer.write(@photo.to_bytes)
        buffer.write_bytes(0x15c4b51c_u32, IO::ByteFormat::LittleEndian)
        buffer.write_bytes(@users.size, IO::ByteFormat::LittleEndian)
        @users.each do |val|
          builder.write(val.to_bytes)
        end
        buffer
      end
      
      def self.from_bytes(bytes)
      end
    end
  end
end
