# Copyright 2020 - Chris Watson <cawatson1993@gmail.com>
#
# You should have received with this program a copy of the MIT license. This code is
# subject to the terms and conditions outlined in said license. For more information,
# please see https://en.wikipedia.org/wiki/MIT_License.
#
# This file was autogenerated. Please do not modify directory.
require "../../helpers"
require "../../tl_object"

module Proton
  module TL
    abstract class CodeType < TLObject
    end
    
    abstract class SentCodeType < TLObject
    end
    
    class SentCode < TLObject
      getter constructor_id = 0x5e002502_u32
      
      property type : SentCodeType
      property phone_code_hash : String
      property next_type : CodeType?
      property timeout : Int32?
      
      def initialize(
        @type : SentCodeType,
        @phone_code_hash : String,
        @next_type : CodeType? = nil,
        @timeout : Int32? = nil
      )
      end
      
      def to_bytes
        buffer = IO::Memory.new
        buffer.write_bytes(self.constructor_id, IO::ByteFormat::LittleEndian)
        buffer.write_byte(@next_type ? 1 : 0)
        buffer.write_byte(@timeout ? 2 : 0)
        buffer.write(@type.to_bytes)
        buffer.write(TLObject.serialize_bytes(@phone_code_hash)
        buffer.write(@next_type.to_bytes)
        buffer.write_bytes(@timeout, IO::ByteFormat::LittleEndian)
        buffer
      end
      
      def self.from_bytes(bytes)
      end
    end
    
    class Authorization < TLObject
      getter constructor_id = 0xcd050916_u32
      
      property user : User
      property tmp_sessions : Int32?
      
      def initialize(
        @user : User,
        @tmp_sessions : Int32? = nil
      )
      end
      
      def to_bytes
        buffer = IO::Memory.new
        buffer.write_bytes(self.constructor_id, IO::ByteFormat::LittleEndian)
        buffer.write_byte(@tmp_sessions ? 0 : 0)
        buffer.write_bytes(@tmp_sessions, IO::ByteFormat::LittleEndian)
        buffer.write(@user.to_bytes)
        buffer
      end
      
      def self.from_bytes(bytes)
      end
    end
    
    class AuthorizationSignUpRequired < Authorization
      getter constructor_id = 0x44747e9a_u32
      
      property terms_of_service : TermsOfService?
      
      def initialize(
        @terms_of_service : TermsOfService? = nil
      )
      end
      
      def to_bytes
        buffer = IO::Memory.new
        buffer.write_bytes(self.constructor_id, IO::ByteFormat::LittleEndian)
        buffer.write_byte(@terms_of_service ? 0 : 0)
        buffer.write(@terms_of_service.to_bytes)
        buffer
      end
      
      def self.from_bytes(bytes)
      end
    end
    
    class ExportedAuthorization < TLObject
      getter constructor_id = 0xdf969c2d_u32
      
      property id : Int32
      property bytes : Bytes
      
      def initialize(
        @id : Int32,
        @bytes : Bytes
      )
      end
      
      def to_bytes
        buffer = IO::Memory.new
        buffer.write_bytes(self.constructor_id, IO::ByteFormat::LittleEndian)
        buffer.write_bytes(@id, IO::ByteFormat::LittleEndian)
        buffer.write(TLObject.serialize_bytes(@bytes)
        buffer
      end
      
      def self.from_bytes(bytes)
      end
    end
    
    class PasswordRecovery < TLObject
      getter constructor_id = 0x137948a5_u32
      
      property email_pattern : String
      
      def initialize(
        @email_pattern : String
      )
      end
      
      def to_bytes
        buffer = IO::Memory.new
        buffer.write_bytes(self.constructor_id, IO::ByteFormat::LittleEndian)
        buffer.write(TLObject.serialize_bytes(@email_pattern)
        buffer
      end
      
      def self.from_bytes(bytes)
      end
    end
    
    class CodeTypeSms < CodeType
      getter constructor_id = 0x72a3158c_u32
      
      def to_bytes
        buffer = IO::Memory.new
        buffer.write_bytes(self.constructor_id, IO::ByteFormat::LittleEndian)
        buffer
      end
      
      def self.from_bytes(bytes)
      end
    end
    
    class CodeTypeCall < CodeType
      getter constructor_id = 0x741cd3e3_u32
      
      def to_bytes
        buffer = IO::Memory.new
        buffer.write_bytes(self.constructor_id, IO::ByteFormat::LittleEndian)
        buffer
      end
      
      def self.from_bytes(bytes)
      end
    end
    
    class CodeTypeFlashCall < CodeType
      getter constructor_id = 0x226ccefb_u32
      
      def to_bytes
        buffer = IO::Memory.new
        buffer.write_bytes(self.constructor_id, IO::ByteFormat::LittleEndian)
        buffer
      end
      
      def self.from_bytes(bytes)
      end
    end
    
    class SentCodeTypeApp < SentCodeType
      getter constructor_id = 0x3dbb5986_u32
      
      property length : Int32
      
      def initialize(
        @length : Int32
      )
      end
      
      def to_bytes
        buffer = IO::Memory.new
        buffer.write_bytes(self.constructor_id, IO::ByteFormat::LittleEndian)
        buffer.write_bytes(@length, IO::ByteFormat::LittleEndian)
        buffer
      end
      
      def self.from_bytes(bytes)
      end
    end
    
    class SentCodeTypeSms < SentCodeType
      getter constructor_id = 0xc000bba2_u32
      
      property length : Int32
      
      def initialize(
        @length : Int32
      )
      end
      
      def to_bytes
        buffer = IO::Memory.new
        buffer.write_bytes(self.constructor_id, IO::ByteFormat::LittleEndian)
        buffer.write_bytes(@length, IO::ByteFormat::LittleEndian)
        buffer
      end
      
      def self.from_bytes(bytes)
      end
    end
    
    class SentCodeTypeCall < SentCodeType
      getter constructor_id = 0x5353e5a7_u32
      
      property length : Int32
      
      def initialize(
        @length : Int32
      )
      end
      
      def to_bytes
        buffer = IO::Memory.new
        buffer.write_bytes(self.constructor_id, IO::ByteFormat::LittleEndian)
        buffer.write_bytes(@length, IO::ByteFormat::LittleEndian)
        buffer
      end
      
      def self.from_bytes(bytes)
      end
    end
    
    class SentCodeTypeFlashCall < SentCodeType
      getter constructor_id = 0xab03c6d9_u32
      
      property pattern : String
      
      def initialize(
        @pattern : String
      )
      end
      
      def to_bytes
        buffer = IO::Memory.new
        buffer.write_bytes(self.constructor_id, IO::ByteFormat::LittleEndian)
        buffer.write(TLObject.serialize_bytes(@pattern)
        buffer
      end
      
      def self.from_bytes(bytes)
      end
    end
    
    class LoginToken < TLObject
      getter constructor_id = 0x629f1980_u32
      
      property expires : Int32
      property token : Bytes
      
      def initialize(
        @expires : Int32,
        @token : Bytes
      )
      end
      
      def to_bytes
        buffer = IO::Memory.new
        buffer.write_bytes(self.constructor_id, IO::ByteFormat::LittleEndian)
        buffer.write_bytes(@expires, IO::ByteFormat::LittleEndian)
        buffer.write(TLObject.serialize_bytes(@token)
        buffer
      end
      
      def self.from_bytes(bytes)
      end
    end
    
    class LoginTokenMigrateTo < LoginToken
      getter constructor_id = 0x068e9916_u32
      
      property dc_id : Int32
      property token : Bytes
      
      def initialize(
        @dc_id : Int32,
        @token : Bytes
      )
      end
      
      def to_bytes
        buffer = IO::Memory.new
        buffer.write_bytes(self.constructor_id, IO::ByteFormat::LittleEndian)
        buffer.write_bytes(@dc_id, IO::ByteFormat::LittleEndian)
        buffer.write(TLObject.serialize_bytes(@token)
        buffer
      end
      
      def self.from_bytes(bytes)
      end
    end
    
    class LoginTokenSuccess < LoginToken
      getter constructor_id = 0x390d5c5e_u32
      
      property authorization : Authorization
      
      def initialize(
        @authorization : Authorization
      )
      end
      
      def to_bytes
        buffer = IO::Memory.new
        buffer.write_bytes(self.constructor_id, IO::ByteFormat::LittleEndian)
        buffer.write(@authorization.to_bytes)
        buffer
      end
      
      def self.from_bytes(bytes)
      end
    end
  end
end
