# Copyright 2020 - Chris Watson <cawatson1993@gmail.com>
#
# You should have received with this program a copy of the MIT license. This code is
# subject to the terms and conditions outlined in said license. For more information,
# please see https://en.wikipedia.org/wiki/MIT_License.
#
# This file was autogenerated. Please do not modify directory.
require "../../helpers"
require "../../tl_object"

module Proton
  module TL
    class File < TLObject
      getter constructor_id = 0x096a18d5_u32
      
      property type : FileType
      property mtime : Int32
      property bytes : Bytes
      
      def initialize(
        @type : FileType,
        @mtime : Int32,
        @bytes : Bytes
      )
      end
      
      def to_bytes
        buffer = IO::Memory.new
        buffer.write_bytes(self.constructor_id, IO::ByteFormat::LittleEndian)
        buffer.write(@type.to_bytes)
        buffer.write_bytes(@mtime, IO::ByteFormat::LittleEndian)
        buffer.write(TLObject.serialize_bytes(@bytes)
        buffer
      end
      
      def self.from_bytes(bytes)
      end
    end
    
    class FileCdnRedirect < File
      getter constructor_id = 0xf18cda44_u32
      
      property dc_id : Int32
      property file_token : Bytes
      property encryption_key : Bytes
      property encryption_iv : Bytes
      property file_hashes : Array(FileHash)
      
      def initialize(
        @dc_id : Int32,
        @file_token : Bytes,
        @encryption_key : Bytes,
        @encryption_iv : Bytes,
        @file_hashes : Array(FileHash)
      )
      end
      
      def to_bytes
        buffer = IO::Memory.new
        buffer.write_bytes(self.constructor_id, IO::ByteFormat::LittleEndian)
        buffer.write_bytes(@dc_id, IO::ByteFormat::LittleEndian)
        buffer.write(TLObject.serialize_bytes(@file_token)
        buffer.write(TLObject.serialize_bytes(@encryption_key)
        buffer.write(TLObject.serialize_bytes(@encryption_iv)
        buffer.write_bytes(0x15c4b51c_u32, IO::ByteFormat::LittleEndian)
        buffer.write_bytes(@file_hashes.size, IO::ByteFormat::LittleEndian)
        @file_hashes.each do |val|
          builder.write(val.to_bytes)
        end
        buffer
      end
      
      def self.from_bytes(bytes)
      end
    end
    
    class WebFile < TLObject
      getter constructor_id = 0x21e753bc_u32
      
      property size : Int32
      property mime_type : String
      property file_type : FileType
      property mtime : Int32
      property bytes : Bytes
      
      def initialize(
        @size : Int32,
        @mime_type : String,
        @file_type : FileType,
        @mtime : Int32,
        @bytes : Bytes
      )
      end
      
      def to_bytes
        buffer = IO::Memory.new
        buffer.write_bytes(self.constructor_id, IO::ByteFormat::LittleEndian)
        buffer.write_bytes(@size, IO::ByteFormat::LittleEndian)
        buffer.write(TLObject.serialize_bytes(@mime_type)
        buffer.write(@file_type.to_bytes)
        buffer.write_bytes(@mtime, IO::ByteFormat::LittleEndian)
        buffer.write(TLObject.serialize_bytes(@bytes)
        buffer
      end
      
      def self.from_bytes(bytes)
      end
    end
    
    class CdnFileReuploadNeeded < CdnFile
      getter constructor_id = 0xeea8e46e_u32
      
      property request_token : Bytes
      
      def initialize(
        @request_token : Bytes
      )
      end
      
      def to_bytes
        buffer = IO::Memory.new
        buffer.write_bytes(self.constructor_id, IO::ByteFormat::LittleEndian)
        buffer.write(TLObject.serialize_bytes(@request_token)
        buffer
      end
      
      def self.from_bytes(bytes)
      end
    end
    
    class CdnFile < TLObject
      getter constructor_id = 0xa99fca4f_u32
      
      property bytes : Bytes
      
      def initialize(
        @bytes : Bytes
      )
      end
      
      def to_bytes
        buffer = IO::Memory.new
        buffer.write_bytes(self.constructor_id, IO::ByteFormat::LittleEndian)
        buffer.write(TLObject.serialize_bytes(@bytes)
        buffer
      end
      
      def self.from_bytes(bytes)
      end
    end
  end
end
