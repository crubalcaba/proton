# Copyright 2020 - Chris Watson <cawatson1993@gmail.com>
#
# You should have received with this program a copy of the MIT license. This code is
# subject to the terms and conditions outlined in said license. For more information,
# please see https://en.wikipedia.org/wiki/MIT_License.
#
# This file was autogenerated. Please do not modify directory.
require "../../helpers"
require "../../tl_object"

module Proton
  module TL
    class PrivacyRules < TLObject
      getter constructor_id = 0x50a04e45_u32
      
      property rules : Array(PrivacyRule)
      property chats : Array(Chat)
      property users : Array(User)
      
      def initialize(
        @rules : Array(PrivacyRule),
        @chats : Array(Chat),
        @users : Array(User)
      )
      end
      
      def to_bytes
        buffer = IO::Memory.new
        buffer.write_bytes(self.constructor_id, IO::ByteFormat::LittleEndian)
        buffer.write_bytes(0x15c4b51c_u32, IO::ByteFormat::LittleEndian)
        buffer.write_bytes(@rules.size, IO::ByteFormat::LittleEndian)
        @rules.each do |val|
          builder.write(val.to_bytes)
        end
        buffer.write_bytes(0x15c4b51c_u32, IO::ByteFormat::LittleEndian)
        buffer.write_bytes(@chats.size, IO::ByteFormat::LittleEndian)
        @chats.each do |val|
          builder.write(val.to_bytes)
        end
        buffer.write_bytes(0x15c4b51c_u32, IO::ByteFormat::LittleEndian)
        buffer.write_bytes(@users.size, IO::ByteFormat::LittleEndian)
        @users.each do |val|
          builder.write(val.to_bytes)
        end
        buffer
      end
      
      def self.from_bytes(bytes)
      end
    end
    
    class Authorizations < TLObject
      getter constructor_id = 0x1250abde_u32
      
      property authorizations : Array(Authorization)
      
      def initialize(
        @authorizations : Array(Authorization)
      )
      end
      
      def to_bytes
        buffer = IO::Memory.new
        buffer.write_bytes(self.constructor_id, IO::ByteFormat::LittleEndian)
        buffer.write_bytes(0x15c4b51c_u32, IO::ByteFormat::LittleEndian)
        buffer.write_bytes(@authorizations.size, IO::ByteFormat::LittleEndian)
        @authorizations.each do |val|
          builder.write(val.to_bytes)
        end
        buffer
      end
      
      def self.from_bytes(bytes)
      end
    end
    
    class Password < TLObject
      getter constructor_id = 0xad2641f8_u32
      
      property new_algo : PasswordKdfAlgo
      property new_secure_algo : SecurePasswordKdfAlgo
      property secure_random : Bytes
      property has_recovery : Bool?
      property has_secure_values : Bool?
      property has_password : Bool?
      property current_algo : PasswordKdfAlgo?
      property srp_B : Bytes?
      property srp_id : Int64?
      property hint : String?
      property email_unconfirmed_pattern : String?
      
      def initialize(
        @new_algo : PasswordKdfAlgo,
        @new_secure_algo : SecurePasswordKdfAlgo,
        @secure_random : Bytes,
        @has_recovery : Bool = false,
        @has_secure_values : Bool = false,
        @has_password : Bool = false,
        @current_algo : PasswordKdfAlgo? = nil,
        @srp_B : Bytes? = nil,
        @srp_id : Int64? = nil,
        @hint : String? = nil,
        @email_unconfirmed_pattern : String? = nil
      )
      end
      
      def to_bytes
        buffer = IO::Memory.new
        buffer.write_bytes(self.constructor_id, IO::ByteFormat::LittleEndian)
        buffer.write_byte(@has_recovery ? 0 : 0)
        buffer.write_byte(@has_secure_values ? 1 : 0)
        buffer.write_byte(@has_password ? 2 : 0)
        buffer.write_byte(@current_algo ? 2 : 0)
        buffer.write_byte(@srp_B ? 2 : 0)
        buffer.write_byte(@srp_id ? 2 : 0)
        buffer.write_byte(@hint ? 3 : 0)
        buffer.write_byte(@email_unconfirmed_pattern ? 4 : 0)
        buffer.write(@current_algo.to_bytes)
        buffer.write(TLObject.serialize_bytes(@srp_B)
        buffer.write_bytes(@srp_id, IO::ByteFormat::LittleEndian)
        buffer.write(TLObject.serialize_bytes(@hint)
        buffer.write(TLObject.serialize_bytes(@email_unconfirmed_pattern)
        buffer.write(@new_algo.to_bytes)
        buffer.write(@new_secure_algo.to_bytes)
        buffer.write(TLObject.serialize_bytes(@secure_random)
        buffer
      end
      
      def self.from_bytes(bytes)
      end
    end
    
    class PasswordSettings < TLObject
      getter constructor_id = 0x9a5c33e5_u32
      
      property email : String?
      property secure_settings : SecureSecretSettings?
      
      def initialize(
        @email : String? = nil,
        @secure_settings : SecureSecretSettings? = nil
      )
      end
      
      def to_bytes
        buffer = IO::Memory.new
        buffer.write_bytes(self.constructor_id, IO::ByteFormat::LittleEndian)
        buffer.write_byte(@email ? 0 : 0)
        buffer.write_byte(@secure_settings ? 1 : 0)
        buffer.write(TLObject.serialize_bytes(@email)
        buffer.write(@secure_settings.to_bytes)
        buffer
      end
      
      def self.from_bytes(bytes)
      end
    end
    
    class PasswordInputSettings < TLObject
      getter constructor_id = 0xc23727c9_u32
      
      property new_algo : PasswordKdfAlgo?
      property new_password_hash : Bytes?
      property hint : String?
      property email : String?
      property new_secure_settings : SecureSecretSettings?
      
      def initialize(
        @new_algo : PasswordKdfAlgo? = nil,
        @new_password_hash : Bytes? = nil,
        @hint : String? = nil,
        @email : String? = nil,
        @new_secure_settings : SecureSecretSettings? = nil
      )
      end
      
      def to_bytes
        buffer = IO::Memory.new
        buffer.write_bytes(self.constructor_id, IO::ByteFormat::LittleEndian)
        buffer.write_byte(@new_algo ? 0 : 0)
        buffer.write_byte(@new_password_hash ? 0 : 0)
        buffer.write_byte(@hint ? 0 : 0)
        buffer.write_byte(@email ? 1 : 0)
        buffer.write_byte(@new_secure_settings ? 2 : 0)
        buffer.write(@new_algo.to_bytes)
        buffer.write(TLObject.serialize_bytes(@new_password_hash)
        buffer.write(TLObject.serialize_bytes(@hint)
        buffer.write(TLObject.serialize_bytes(@email)
        buffer.write(@new_secure_settings.to_bytes)
        buffer
      end
      
      def self.from_bytes(bytes)
      end
    end
    
    class TmpPassword < TLObject
      getter constructor_id = 0xdb64fd34_u32
      
      property tmp_password : Bytes
      property valid_until : Int32
      
      def initialize(
        @tmp_password : Bytes,
        @valid_until : Int32
      )
      end
      
      def to_bytes
        buffer = IO::Memory.new
        buffer.write_bytes(self.constructor_id, IO::ByteFormat::LittleEndian)
        buffer.write(TLObject.serialize_bytes(@tmp_password)
        buffer.write_bytes(@valid_until, IO::ByteFormat::LittleEndian)
        buffer
      end
      
      def self.from_bytes(bytes)
      end
    end
    
    class WebAuthorizations < TLObject
      getter constructor_id = 0xed56c9fc_u32
      
      property authorizations : Array(WebAuthorization)
      property users : Array(User)
      
      def initialize(
        @authorizations : Array(WebAuthorization),
        @users : Array(User)
      )
      end
      
      def to_bytes
        buffer = IO::Memory.new
        buffer.write_bytes(self.constructor_id, IO::ByteFormat::LittleEndian)
        buffer.write_bytes(0x15c4b51c_u32, IO::ByteFormat::LittleEndian)
        buffer.write_bytes(@authorizations.size, IO::ByteFormat::LittleEndian)
        @authorizations.each do |val|
          builder.write(val.to_bytes)
        end
        buffer.write_bytes(0x15c4b51c_u32, IO::ByteFormat::LittleEndian)
        buffer.write_bytes(@users.size, IO::ByteFormat::LittleEndian)
        @users.each do |val|
          builder.write(val.to_bytes)
        end
        buffer
      end
      
      def self.from_bytes(bytes)
      end
    end
    
    class AuthorizationForm < TLObject
      getter constructor_id = 0xad2e1cd8_u32
      
      property required_types : Array(SecureRequiredType)
      property values : Array(SecureValue)
      property errors : Array(SecureValueError)
      property users : Array(User)
      property privacy_policy_url : String?
      
      def initialize(
        @required_types : Array(SecureRequiredType),
        @values : Array(SecureValue),
        @errors : Array(SecureValueError),
        @users : Array(User),
        @privacy_policy_url : String? = nil
      )
      end
      
      def to_bytes
        buffer = IO::Memory.new
        buffer.write_bytes(self.constructor_id, IO::ByteFormat::LittleEndian)
        buffer.write_byte(@privacy_policy_url ? 0 : 0)
        buffer.write_bytes(0x15c4b51c_u32, IO::ByteFormat::LittleEndian)
        buffer.write_bytes(@required_types.size, IO::ByteFormat::LittleEndian)
        @required_types.each do |val|
          builder.write(val.to_bytes)
        end
        buffer.write_bytes(0x15c4b51c_u32, IO::ByteFormat::LittleEndian)
        buffer.write_bytes(@values.size, IO::ByteFormat::LittleEndian)
        @values.each do |val|
          builder.write(val.to_bytes)
        end
        buffer.write_bytes(0x15c4b51c_u32, IO::ByteFormat::LittleEndian)
        buffer.write_bytes(@errors.size, IO::ByteFormat::LittleEndian)
        @errors.each do |val|
          builder.write(val.to_bytes)
        end
        buffer.write_bytes(0x15c4b51c_u32, IO::ByteFormat::LittleEndian)
        buffer.write_bytes(@users.size, IO::ByteFormat::LittleEndian)
        @users.each do |val|
          builder.write(val.to_bytes)
        end
        buffer.write(TLObject.serialize_bytes(@privacy_policy_url)
        buffer
      end
      
      def self.from_bytes(bytes)
      end
    end
    
    class SentEmailCode < TLObject
      getter constructor_id = 0x811f854f_u32
      
      property email_pattern : String
      property length : Int32
      
      def initialize(
        @email_pattern : String,
        @length : Int32
      )
      end
      
      def to_bytes
        buffer = IO::Memory.new
        buffer.write_bytes(self.constructor_id, IO::ByteFormat::LittleEndian)
        buffer.write(TLObject.serialize_bytes(@email_pattern)
        buffer.write_bytes(@length, IO::ByteFormat::LittleEndian)
        buffer
      end
      
      def self.from_bytes(bytes)
      end
    end
    
    class Takeout < TLObject
      getter constructor_id = 0x4dba4501_u32
      
      property id : Int64
      
      def initialize(
        @id : Int64
      )
      end
      
      def to_bytes
        buffer = IO::Memory.new
        buffer.write_bytes(self.constructor_id, IO::ByteFormat::LittleEndian)
        buffer.write_bytes(@id, IO::ByteFormat::LittleEndian)
        buffer
      end
      
      def self.from_bytes(bytes)
      end
    end
    
    class WallPapersNotModified < WallPapers
      getter constructor_id = 0x1c199183_u32
      
      def to_bytes
        buffer = IO::Memory.new
        buffer.write_bytes(self.constructor_id, IO::ByteFormat::LittleEndian)
        buffer
      end
      
      def self.from_bytes(bytes)
      end
    end
    
    class WallPapers < TLObject
      getter constructor_id = 0x702b65a9_u32
      
      property hash : Int32
      property wallpapers : Array(WallPaper)
      
      def initialize(
        @hash : Int32,
        @wallpapers : Array(WallPaper)
      )
      end
      
      def to_bytes
        buffer = IO::Memory.new
        buffer.write_bytes(self.constructor_id, IO::ByteFormat::LittleEndian)
        buffer.write_bytes(@hash, IO::ByteFormat::LittleEndian)
        buffer.write_bytes(0x15c4b51c_u32, IO::ByteFormat::LittleEndian)
        buffer.write_bytes(@wallpapers.size, IO::ByteFormat::LittleEndian)
        @wallpapers.each do |val|
          builder.write(val.to_bytes)
        end
        buffer
      end
      
      def self.from_bytes(bytes)
      end
    end
    
    class AutoDownloadSettings < TLObject
      getter constructor_id = 0x63cacf26_u32
      
      property low : AutoDownloadSettings
      property medium : AutoDownloadSettings
      property high : AutoDownloadSettings
      
      def initialize(
        @low : AutoDownloadSettings,
        @medium : AutoDownloadSettings,
        @high : AutoDownloadSettings
      )
      end
      
      def to_bytes
        buffer = IO::Memory.new
        buffer.write_bytes(self.constructor_id, IO::ByteFormat::LittleEndian)
        buffer.write(@low.to_bytes)
        buffer.write(@medium.to_bytes)
        buffer.write(@high.to_bytes)
        buffer
      end
      
      def self.from_bytes(bytes)
      end
    end
    
    class ThemesNotModified < Themes
      getter constructor_id = 0xf41eb622_u32
      
      def to_bytes
        buffer = IO::Memory.new
        buffer.write_bytes(self.constructor_id, IO::ByteFormat::LittleEndian)
        buffer
      end
      
      def self.from_bytes(bytes)
      end
    end
    
    class Themes < TLObject
      getter constructor_id = 0x7f676421_u32
      
      property hash : Int32
      property themes : Array(Theme)
      
      def initialize(
        @hash : Int32,
        @themes : Array(Theme)
      )
      end
      
      def to_bytes
        buffer = IO::Memory.new
        buffer.write_bytes(self.constructor_id, IO::ByteFormat::LittleEndian)
        buffer.write_bytes(@hash, IO::ByteFormat::LittleEndian)
        buffer.write_bytes(0x15c4b51c_u32, IO::ByteFormat::LittleEndian)
        buffer.write_bytes(@themes.size, IO::ByteFormat::LittleEndian)
        @themes.each do |val|
          builder.write(val.to_bytes)
        end
        buffer
      end
      
      def self.from_bytes(bytes)
      end
    end
    
    class ContentSettings < TLObject
      getter constructor_id = 0x57e28221_u32
      
      property sensitive_enabled : Bool?
      property sensitive_can_change : Bool?
      
      def initialize(
        @sensitive_enabled : Bool = false,
        @sensitive_can_change : Bool = false
      )
      end
      
      def to_bytes
        buffer = IO::Memory.new
        buffer.write_bytes(self.constructor_id, IO::ByteFormat::LittleEndian)
        buffer.write_byte(@sensitive_enabled ? 0 : 0)
        buffer.write_byte(@sensitive_can_change ? 1 : 0)
        buffer
      end
      
      def self.from_bytes(bytes)
      end
    end
  end
end
