{
  "classes": [
    {
      "function": false,
      "is_abstract": true,
      "name": "Base",
      "properties": [],
      "type": "",
      "description": "Base type object from which all other types inherit.",
      "children": [
        {
          "function": false,
          "is_abstract": false,
          "name": "error",
          "properties": [
            {
              "name": "code",
              "type": "int32",
              "description": "Error code; subject to future changes. If the error code is 406, the error message must not be processed in any way and must not be displayed to the user",
              "nilable": false
            },
            {
              "name": "message",
              "type": "string",
              "description": "Error message; subject to future changes",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "An object of this type can be returned on every function call, in case of an error",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "ok",
          "properties": [],
          "type": "Base",
          "description": "An object of this type is returned on a successful function call for certain functions",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "tdlibParameters",
          "properties": [
            {
              "name": "use_test_dc",
              "type": "Bool",
              "description": "If set to true, the Telegram test environment will be used instead of the production environment",
              "nilable": false
            },
            {
              "name": "database_directory",
              "type": "string",
              "description": "The path to the directory for the persistent database; if empty, the current working directory will be used",
              "nilable": true
            },
            {
              "name": "files_directory",
              "type": "string",
              "description": "The path to the directory for storing files; if empty, database_directory will be used",
              "nilable": true
            },
            {
              "name": "use_file_database",
              "type": "Bool",
              "description": "If set to true, information about downloaded and uploaded files will be saved between application restarts",
              "nilable": false
            },
            {
              "name": "use_chat_info_database",
              "type": "Bool",
              "description": "If set to true, the library will maintain a cache of users, basic groups, supergroups, channels and secret chats. Implies use_file_database",
              "nilable": false
            },
            {
              "name": "use_message_database",
              "type": "Bool",
              "description": "If set to true, the library will maintain a cache of chats and messages. Implies use_chat_info_database",
              "nilable": false
            },
            {
              "name": "use_secret_chats",
              "type": "Bool",
              "description": "If set to true, support for secret chats will be enabled",
              "nilable": false
            },
            {
              "name": "api_id",
              "type": "int32",
              "description": "Application identifier for Telegram API access, which can be obtained at https://my.telegram.org",
              "nilable": false
            },
            {
              "name": "api_hash",
              "type": "string",
              "description": "Application identifier hash for Telegram API access, which can be obtained at https://my.telegram.org",
              "nilable": false
            },
            {
              "name": "system_language_code",
              "type": "string",
              "description": "IETF language tag of the user's operating system language; must be non-empty",
              "nilable": false
            },
            {
              "name": "device_model",
              "type": "string",
              "description": "Model of the device the application is being run on; must be non-empty",
              "nilable": false
            },
            {
              "name": "system_version",
              "type": "string",
              "description": "Version of the operating system the application is being run on; must be non-empty",
              "nilable": false
            },
            {
              "name": "application_version",
              "type": "string",
              "description": "Application version; must be non-empty",
              "nilable": false
            },
            {
              "name": "enable_storage_optimizer",
              "type": "Bool",
              "description": "If set to true, old files will automatically be deleted",
              "nilable": false
            },
            {
              "name": "ignore_file_names",
              "type": "Bool",
              "description": "If set to true, original file names will be ignored. Otherwise, downloaded files will be saved under names as close as possible to the original name",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Contains parameters for TDLib initialization",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "authenticationCodeInfo",
          "properties": [
            {
              "name": "phone_number",
              "type": "string",
              "nilable": false
            },
            {
              "name": "type",
              "type": "AuthenticationCodeType",
              "nilable": false
            },
            {
              "name": "next_type",
              "type": "AuthenticationCodeType",
              "nilable": false
            },
            {
              "name": "timeout",
              "type": "int32",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Information about the authentication code that was sent @phone_number A phone number that is being authenticated @type Describes the way the code was sent to the user @next_type Describes the way the next code will be sent to the user; may be null @timeout Timeout before the code should be re-sent, in seconds",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "emailAddressAuthenticationCodeInfo",
          "properties": [
            {
              "name": "email_address_pattern",
              "type": "string",
              "nilable": false
            },
            {
              "name": "length",
              "type": "int32",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Information about the email address authentication code that was sent @email_address_pattern Pattern of the email address to which an authentication code was sent @length Length of the code; 0 if unknown",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "textEntity",
          "properties": [
            {
              "name": "offset",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "length",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "type",
              "type": "TextEntityType",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Represents a part of the text that needs to be formatted in some unusual way @offset Offset of the entity in UTF-16 code points @length Length of the entity, in UTF-16 code points @type Type of the entity",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "textEntities",
          "properties": [
            {
              "name": "entities",
              "type": "vector<textEntity>",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Contains a list of text entities @entities List of text entities",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "formattedText",
          "properties": [
            {
              "name": "text",
              "type": "string",
              "nilable": false
            },
            {
              "name": "entities",
              "type": "vector<textEntity>",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "A text with some entities @text The text @entities Entities contained in the text",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "termsOfService",
          "properties": [
            {
              "name": "text",
              "type": "formattedText",
              "nilable": false
            },
            {
              "name": "min_user_age",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "show_popup",
              "type": "Bool",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Contains Telegram terms of service @text Text of the terms of service @min_user_age Minimum age of a user to be able to accept the terms; 0 if any @show_popup True, if a blocking popup with terms of service must be shown to the user",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "passwordState",
          "properties": [
            {
              "name": "has_password",
              "type": "Bool",
              "nilable": false
            },
            {
              "name": "password_hint",
              "type": "string",
              "nilable": false
            },
            {
              "name": "has_recovery_email_address",
              "type": "Bool",
              "description": "True, if a recovery email is set @has_passport_data True, if some Telegram Passport elements were saved",
              "nilable": false
            },
            {
              "name": "has_passport_data",
              "type": "Bool",
              "nilable": false
            },
            {
              "name": "recovery_email_address_code_info",
              "type": "emailAddressAuthenticationCodeInfo",
              "description": "Information about the recovery email address to which the confirmation email was sent; may be null",
              "nilable": true
            }
          ],
          "type": "Base",
          "description": "Represents the current state of 2-step verification @has_password True, if a 2-step verification password is set @password_hint Hint for the password; may be empty",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "recoveryEmailAddress",
          "properties": [
            {
              "name": "recovery_email_address",
              "type": "string",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Contains information about the current recovery email address @recovery_email_address Recovery email address",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "temporaryPasswordState",
          "properties": [
            {
              "name": "has_password",
              "type": "Bool",
              "nilable": false
            },
            {
              "name": "valid_for",
              "type": "int32",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Returns information about the availability of a temporary password, which can be used for payments @has_password True, if a temporary password is available @valid_for Time left before the temporary password expires, in seconds",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "localFile",
          "properties": [
            {
              "name": "path",
              "type": "string",
              "description": "Local path to the locally available file part; may be empty",
              "nilable": true
            },
            {
              "name": "can_be_downloaded",
              "type": "Bool",
              "description": "True, if it is possible to try to download or generate the file",
              "nilable": false
            },
            {
              "name": "can_be_deleted",
              "type": "Bool",
              "description": "True, if the file can be deleted",
              "nilable": false
            },
            {
              "name": "is_downloading_active",
              "type": "Bool",
              "description": "True, if the file is currently being downloaded (or a local copy is being generated by some other means)",
              "nilable": false
            },
            {
              "name": "is_downloading_completed",
              "type": "Bool",
              "description": "True, if the local copy is fully available",
              "nilable": false
            },
            {
              "name": "download_offset",
              "type": "int32",
              "description": "Download will be started from this offset. downloaded_prefix_size is calculated from this offset",
              "nilable": false
            },
            {
              "name": "downloaded_prefix_size",
              "type": "int32",
              "description": "If is_downloading_completed is false, then only some prefix of the file starting from download_offset is ready to be read. downloaded_prefix_size is the size of that prefix",
              "nilable": false
            },
            {
              "name": "downloaded_size",
              "type": "int32",
              "description": "Total downloaded file bytes. Should be used only for calculating download progress. The actual file size may be bigger, and some parts of it may contain garbage",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Represents a local file",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "remoteFile",
          "properties": [
            {
              "name": "id",
              "type": "string",
              "description": "Remote file identifier; may be empty. Can be used across application restarts or even from other devices for the current user. If the ID starts with \"http://\" or \"https://\", it represents the HTTP URL of the file. TDLib is currently unable to download files if only their URL is known. //-If downloadFile is called on such a file or if it is sent to a secret chat, TDLib starts a file generation process by sending updateFileGenerationStart to the client with the HTTP URL in the original_path and \"#url#\" as the conversion string. Clients should generate the file by downloading it to the specified location",
              "nilable": true
            },
            {
              "name": "is_uploading_active",
              "type": "Bool",
              "description": "True, if the file is currently being uploaded (or a remote copy is being generated by some other means)",
              "nilable": false
            },
            {
              "name": "is_uploading_completed",
              "type": "Bool",
              "description": "True, if a remote copy is fully available",
              "nilable": false
            },
            {
              "name": "uploaded_size",
              "type": "int32",
              "description": "Size of the remote available part of the file; 0 if unknown",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Represents a remote file",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "file",
          "properties": [
            {
              "name": "id",
              "type": "int32",
              "description": "Unique file identifier",
              "nilable": false
            },
            {
              "name": "size",
              "type": "int32",
              "description": "File size; 0 if unknown",
              "nilable": false
            },
            {
              "name": "expected_size",
              "type": "int32",
              "description": "Expected file size in case the exact file size is unknown, but an approximate size is known. Can be used to show download/upload progress",
              "nilable": false
            },
            {
              "name": "local",
              "type": "localFile",
              "description": "Information about the local copy of the file",
              "nilable": false
            },
            {
              "name": "remote",
              "type": "remoteFile",
              "description": "Information about the remote copy of the file",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Represents a file",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "photoSize",
          "properties": [
            {
              "name": "type",
              "type": "string",
              "nilable": false
            },
            {
              "name": "photo",
              "type": "file",
              "nilable": false
            },
            {
              "name": "width",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "height",
              "type": "int32",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Photo description @type Thumbnail type (see https://core.telegram.org/constructor/photoSize) @photo Information about the photo file @width Photo width @height Photo height",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "minithumbnail",
          "properties": [
            {
              "name": "width",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "height",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "data",
              "type": "bytes",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Thumbnail image of a very poor quality and low resolution @width Thumbnail width, usually doesn't exceed 40 @height Thumbnail height, usually doesn't exceed 40 @data The thumbnail in JPEG format",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "maskPosition",
          "properties": [
            {
              "name": "point",
              "type": "MaskPoint",
              "nilable": false
            },
            {
              "name": "x_shift",
              "type": "double",
              "description": "Shift by X-axis measured in widths of the mask scaled to the face size, from left to right. (For example, -1.0 will place the mask just to the left of the default mask position)",
              "nilable": false
            },
            {
              "name": "y_shift",
              "type": "double",
              "description": "Shift by Y-axis measured in heights of the mask scaled to the face size, from top to bottom. (For example, 1.0 will place the mask just below the default mask position)",
              "nilable": false
            },
            {
              "name": "scale",
              "type": "double",
              "description": "Mask scaling coefficient. (For example, 2.0 means a doubled size)",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Position on a photo where a mask should be placed @point Part of the face, relative to which the mask should be placed",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "pollOption",
          "properties": [
            {
              "name": "text",
              "type": "string",
              "nilable": false
            },
            {
              "name": "voter_count",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "vote_percentage",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "is_chosen",
              "type": "Bool",
              "description": "True, if the option was chosen by the user @is_being_chosen True, if the option is being chosen by a pending setPollAnswer request",
              "nilable": false
            },
            {
              "name": "is_being_chosen",
              "type": "Bool",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Describes one answer option of a poll @text Option text, 1-100 characters @voter_count Number of voters for this option, available only for closed or voted polls @vote_percentage The percentage of votes for this option, 0-100",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "animation",
          "properties": [
            {
              "name": "duration",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "width",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "height",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "file_name",
              "type": "string",
              "description": "Original name of the file; as defined by the sender @mime_type MIME type of the file, usually \"image/gif\" or \"video/mp4\"",
              "nilable": false
            },
            {
              "name": "mime_type",
              "type": "string",
              "nilable": false
            },
            {
              "name": "minithumbnail",
              "type": "minithumbnail",
              "description": "Animation minithumbnail; may be null @thumbnail Animation thumbnail; may be null @animation File containing the animation",
              "nilable": true
            },
            {
              "name": "thumbnail",
              "type": "photoSize",
              "nilable": false
            },
            {
              "name": "animation",
              "type": "file",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Describes an animation file. The animation must be encoded in GIF or MPEG4 format @duration Duration of the animation, in seconds; as defined by the sender @width Width of the animation @height Height of the animation",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "audio",
          "properties": [
            {
              "name": "duration",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "title",
              "type": "string",
              "nilable": false
            },
            {
              "name": "performer",
              "type": "string",
              "nilable": false
            },
            {
              "name": "file_name",
              "type": "string",
              "description": "Original name of the file; as defined by the sender @mime_type The MIME type of the file; as defined by the sender @album_cover_minithumbnail The minithumbnail of the album cover; may be null @album_cover_thumbnail The thumbnail of the album cover; as defined by the sender. The full size thumbnail should be extracted from the downloaded file; may be null @audio File containing the audio",
              "nilable": true
            },
            {
              "name": "mime_type",
              "type": "string",
              "nilable": false
            },
            {
              "name": "album_cover_minithumbnail",
              "type": "minithumbnail",
              "nilable": false
            },
            {
              "name": "album_cover_thumbnail",
              "type": "photoSize",
              "nilable": false
            },
            {
              "name": "audio",
              "type": "file",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Describes an audio file. Audio is usually in MP3 or M4A format @duration Duration of the audio, in seconds; as defined by the sender @title Title of the audio; as defined by the sender @performer Performer of the audio; as defined by the sender",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "document",
          "properties": [
            {
              "name": "file_name",
              "type": "string",
              "nilable": false
            },
            {
              "name": "mime_type",
              "type": "string",
              "nilable": false
            },
            {
              "name": "minithumbnail",
              "type": "minithumbnail",
              "description": "Document minithumbnail; may be null @thumbnail Document thumbnail in JPEG or PNG format (PNG will be used only for background patterns); as defined by the sender; may be null @document File containing the document",
              "nilable": true
            },
            {
              "name": "thumbnail",
              "type": "photoSize",
              "nilable": false
            },
            {
              "name": "document",
              "type": "file",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Describes a document of any type @file_name Original name of the file; as defined by the sender @mime_type MIME type of the file; as defined by the sender",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "photo",
          "properties": [
            {
              "name": "has_stickers",
              "type": "Bool",
              "nilable": false
            },
            {
              "name": "minithumbnail",
              "type": "minithumbnail",
              "nilable": false
            },
            {
              "name": "sizes",
              "type": "vector<photoSize>",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Describes a photo @has_stickers True, if stickers were added to the photo @minithumbnail Photo minithumbnail; may be null @sizes Available variants of the photo, in different sizes",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "sticker",
          "properties": [
            {
              "name": "set_id",
              "type": "int64",
              "nilable": false
            },
            {
              "name": "width",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "height",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "emoji",
              "type": "string",
              "description": "Emoji corresponding to the sticker @is_animated True, if the sticker is an animated sticker in TGS format @is_mask True, if the sticker is a mask @mask_position Position where the mask should be placed; may be null @thumbnail Sticker thumbnail in WEBP or JPEG format; may be null @sticker File containing the sticker",
              "nilable": true
            },
            {
              "name": "is_animated",
              "type": "Bool",
              "nilable": false
            },
            {
              "name": "is_mask",
              "type": "Bool",
              "nilable": false
            },
            {
              "name": "mask_position",
              "type": "maskPosition",
              "nilable": false
            },
            {
              "name": "thumbnail",
              "type": "photoSize",
              "nilable": false
            },
            {
              "name": "sticker",
              "type": "file",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Describes a sticker @set_id The identifier of the sticker set to which the sticker belongs; 0 if none @width Sticker width; as defined by the sender @height Sticker height; as defined by the sender",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "video",
          "properties": [
            {
              "name": "duration",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "width",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "height",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "file_name",
              "type": "string",
              "description": "Original name of the file; as defined by the sender @mime_type MIME type of the file; as defined by the sender @has_stickers True, if stickers were added to the video",
              "nilable": false
            },
            {
              "name": "mime_type",
              "type": "string",
              "nilable": false
            },
            {
              "name": "has_stickers",
              "type": "Bool",
              "nilable": false
            },
            {
              "name": "supports_streaming",
              "type": "Bool",
              "description": "True, if the video should be tried to be streamed @minithumbnail Video minithumbnail; may be null @thumbnail Video thumbnail; as defined by the sender; may be null @video File containing the video",
              "nilable": true
            },
            {
              "name": "minithumbnail",
              "type": "minithumbnail",
              "nilable": false
            },
            {
              "name": "thumbnail",
              "type": "photoSize",
              "nilable": false
            },
            {
              "name": "video",
              "type": "file",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Describes a video file @duration Duration of the video, in seconds; as defined by the sender @width Video width; as defined by the sender @height Video height; as defined by the sender",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "videoNote",
          "properties": [
            {
              "name": "duration",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "length",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "minithumbnail",
              "type": "minithumbnail",
              "nilable": false
            },
            {
              "name": "thumbnail",
              "type": "photoSize",
              "nilable": false
            },
            {
              "name": "video",
              "type": "file",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Describes a video note. The video must be equal in width and height, cropped to a circle, and stored in MPEG4 format @duration Duration of the video, in seconds; as defined by the sender @length Video width and height; as defined by the sender @minithumbnail Video minithumbnail; may be null @thumbnail Video thumbnail; as defined by the sender; may be null @video File containing the video",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "voiceNote",
          "properties": [
            {
              "name": "duration",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "waveform",
              "type": "bytes",
              "description": "A waveform representation of the voice note in 5-bit format @mime_type MIME type of the file; as defined by the sender @voice File containing the voice note",
              "nilable": false
            },
            {
              "name": "mime_type",
              "type": "string",
              "nilable": false
            },
            {
              "name": "voice",
              "type": "file",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Describes a voice note. The voice note must be encoded with the Opus codec, and stored inside an OGG container. Voice notes can have only a single audio channel @duration Duration of the voice note, in seconds; as defined by the sender",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "contact",
          "properties": [
            {
              "name": "phone_number",
              "type": "string",
              "nilable": false
            },
            {
              "name": "first_name",
              "type": "string",
              "nilable": false
            },
            {
              "name": "last_name",
              "type": "string",
              "nilable": false
            },
            {
              "name": "vcard",
              "type": "string",
              "nilable": false
            },
            {
              "name": "user_id",
              "type": "int32",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Describes a user contact @phone_number Phone number of the user @first_name First name of the user; 1-255 characters in length @last_name Last name of the user @vcard Additional data about the user in a form of vCard; 0-2048 bytes in length @user_id Identifier of the user, if known; otherwise 0",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "location",
          "properties": [
            {
              "name": "latitude",
              "type": "double",
              "nilable": false
            },
            {
              "name": "longitude",
              "type": "double",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Describes a location on planet Earth @latitude Latitude of the location in degrees; as defined by the sender @longitude Longitude of the location, in degrees; as defined by the sender",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "venue",
          "properties": [
            {
              "name": "location",
              "type": "location",
              "nilable": false
            },
            {
              "name": "title",
              "type": "string",
              "nilable": false
            },
            {
              "name": "address",
              "type": "string",
              "nilable": false
            },
            {
              "name": "provider",
              "type": "string",
              "nilable": false
            },
            {
              "name": "id",
              "type": "string",
              "description": "Identifier of the venue in the provider database; as defined by the sender @type Type of the venue in the provider database; as defined by the sender",
              "nilable": false
            },
            {
              "name": "type",
              "type": "string",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Describes a venue @location Venue location; as defined by the sender @title Venue name; as defined by the sender @address Venue address; as defined by the sender @provider Provider of the venue database; as defined by the sender. Currently only \"foursquare\" needs to be supported",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "game",
          "properties": [
            {
              "name": "id",
              "type": "int64",
              "nilable": false
            },
            {
              "name": "short_name",
              "type": "string",
              "nilable": false
            },
            {
              "name": "title",
              "type": "string",
              "nilable": false
            },
            {
              "name": "text",
              "type": "formattedText",
              "nilable": false
            },
            {
              "name": "description",
              "type": "string",
              "description": "Describes a game @id Game ID @short_name Game short name. To share a game use the URL https://t.me/{bot_username}?game={game_short_name} @title Game title @text Game text, usually containing scoreboards for a game",
              "nilable": false
            },
            {
              "name": "photo",
              "type": "photo",
              "nilable": false
            },
            {
              "name": "animation",
              "type": "animation",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Describes a game @id Game ID @short_name Game short name. To share a game use the URL https://t.me/{bot_username}?game={game_short_name} @title Game title @text Game text, usually containing scoreboards for a game",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "poll",
          "properties": [
            {
              "name": "id",
              "type": "int64",
              "nilable": false
            },
            {
              "name": "question",
              "type": "string",
              "nilable": false
            },
            {
              "name": "options",
              "type": "vector<pollOption>",
              "nilable": false
            },
            {
              "name": "total_voter_count",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "is_closed",
              "type": "Bool",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Describes a poll @id Unique poll identifier @question Poll question, 1-255 characters @options List of poll answer options @total_voter_count Total number of voters, participating in the poll @is_closed True, if the poll is closed",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "profilePhoto",
          "properties": [
            {
              "name": "id",
              "type": "int64",
              "nilable": false
            },
            {
              "name": "small",
              "type": "file",
              "description": "A small (160x160) user profile photo. The file can be downloaded only before the photo is changed @big A big (640x640) user profile photo. The file can be downloaded only before the photo is changed",
              "nilable": false
            },
            {
              "name": "big",
              "type": "file",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Describes a user profile photo @id Photo identifier; 0 for an empty photo. Can be used to find a photo in a list of userProfilePhotos",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "chatPhoto",
          "properties": [
            {
              "name": "small",
              "type": "file",
              "nilable": false
            },
            {
              "name": "big",
              "type": "file",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Describes the photo of a chat @small A small (160x160) chat photo. The file can be downloaded only before the photo is changed @big A big (640x640) chat photo. The file can be downloaded only before the photo is changed",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "botCommand",
          "properties": [
            {
              "name": "command",
              "type": "string",
              "nilable": false
            },
            {
              "name": "description",
              "type": "string",
              "description": "Represents commands supported by a bot @command Text of the bot command @param_description Description of the bot command",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Represents commands supported by a bot @command Text of the bot command @param_description Description of the bot command",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "botInfo",
          "properties": [
            {
              "name": "description",
              "type": "string",
              "description": "Provides information about a bot and its supported commands @param_description Long description shown on the user info page @commands A list of commands supported by the bot",
              "nilable": false
            },
            {
              "name": "commands",
              "type": "vector<botCommand>",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Provides information about a bot and its supported commands @param_description Long description shown on the user info page @commands A list of commands supported by the bot",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "user",
          "properties": [
            {
              "name": "id",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "first_name",
              "type": "string",
              "nilable": false
            },
            {
              "name": "last_name",
              "type": "string",
              "nilable": false
            },
            {
              "name": "username",
              "type": "string",
              "nilable": false
            },
            {
              "name": "phone_number",
              "type": "string",
              "description": "Phone number of the user @status Current online status of the user @profile_photo Profile photo of the user; may be null //-{type} contains the type of the restriction and at least one of the suffixes \"-all\", \"-ios\", \"-android\", or \"-wp\", which describe the platforms on which access should be restricted. (For example, \"terms-ios-android\". {description} contains a human-readable description of the restriction, which can be shown to the user)",
              "nilable": true
            },
            {
              "name": "status",
              "type": "UserStatus",
              "nilable": false
            },
            {
              "name": "profile_photo",
              "type": "profilePhoto",
              "nilable": false
            },
            {
              "name": "outgoing_link",
              "type": "LinkState",
              "description": "Relationship from the current user to the other user @incoming_link Relationship from the other user to the current user //-{type} contains the type of the restriction and at least one of the suffixes \"-all\", \"-ios\", \"-android\", or \"-wp\", which describe the platforms on which access should be restricted. (For example, \"terms-ios-android\". {description} contains a human-readable description of the restriction, which can be shown to the user)",
              "nilable": false
            },
            {
              "name": "incoming_link",
              "type": "LinkState",
              "nilable": false
            },
            {
              "name": "is_verified",
              "type": "Bool",
              "description": "True, if the user is verified @is_support True, if the user is Telegram support account //-{type} contains the type of the restriction and at least one of the suffixes \"-all\", \"-ios\", \"-android\", or \"-wp\", which describe the platforms on which access should be restricted. (For example, \"terms-ios-android\". {description} contains a human-readable description of the restriction, which can be shown to the user)",
              "nilable": false
            },
            {
              "name": "is_support",
              "type": "Bool",
              "nilable": false
            },
            {
              "name": "restriction_reason",
              "type": "string",
              "description": "If non-empty, it contains the reason why access to this user must be restricted. The format of the string is \"{type}: {description}\". //-{type} contains the type of the restriction and at least one of the suffixes \"-all\", \"-ios\", \"-android\", or \"-wp\", which describe the platforms on which access should be restricted. (For example, \"terms-ios-android\". {description} contains a human-readable description of the restriction, which can be shown to the user)",
              "nilable": false
            },
            {
              "name": "is_scam",
              "type": "Bool",
              "description": "True, if many users reported this user as a scam",
              "nilable": false
            },
            {
              "name": "have_access",
              "type": "Bool",
              "description": "If false, the user is inaccessible, and the only information known about the user is inside this class. It can't be passed to any method except GetUser @type Type of the user @language_code IETF language tag of the user's language; only available to bots",
              "nilable": false
            },
            {
              "name": "type",
              "type": "UserType",
              "nilable": false
            },
            {
              "name": "language_code",
              "type": "string",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Represents a user @id User identifier @first_name First name of the user @last_name Last name of the user @username Username of the user",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "userFullInfo",
          "properties": [
            {
              "name": "is_blocked",
              "type": "Bool",
              "nilable": false
            },
            {
              "name": "can_be_called",
              "type": "Bool",
              "nilable": false
            },
            {
              "name": "has_private_calls",
              "type": "Bool",
              "nilable": false
            },
            {
              "name": "bio",
              "type": "string",
              "description": "A short user bio @share_text For bots, the text that is included with the link when users share the bot @group_in_common_count Number of group chats where both the other user and the current user are a member; 0 for the current user @bot_info If the user is a bot, information about the bot; may be null",
              "nilable": true
            },
            {
              "name": "share_text",
              "type": "string",
              "nilable": false
            },
            {
              "name": "group_in_common_count",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "bot_info",
              "type": "botInfo",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Contains full information about a user (except the full list of profile photos) @is_blocked True, if the user is blacklisted by the current user @can_be_called True, if the user can be called @has_private_calls True, if the user can't be called due to their privacy settings",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "userProfilePhoto",
          "properties": [
            {
              "name": "id",
              "type": "int64",
              "nilable": false
            },
            {
              "name": "added_date",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "sizes",
              "type": "vector<photoSize>",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Contains full information about a user profile photo @id Unique user profile photo identifier @added_date Point in time (Unix timestamp) when the photo has been added @sizes Available variants of the user photo, in different sizes",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "userProfilePhotos",
          "properties": [
            {
              "name": "total_count",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "photos",
              "type": "vector<userProfilePhoto>",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Contains part of the list of user photos @total_count Total number of user profile photos @photos A list of photos",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "users",
          "properties": [
            {
              "name": "total_count",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "user_ids",
              "type": "vector<int32>",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Represents a list of users @total_count Approximate total count of users found @user_ids A list of user identifiers",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "chatPermissions",
          "properties": [
            {
              "name": "can_send_messages",
              "type": "Bool",
              "description": "True, if the user can send text messages, contacts, locations, and venues",
              "nilable": false
            },
            {
              "name": "can_send_media_messages",
              "type": "Bool",
              "description": "True, if the user can send audio files, documents, photos, videos, video notes, and voice notes. Implies can_send_messages permissions",
              "nilable": false
            },
            {
              "name": "can_send_polls",
              "type": "Bool",
              "description": "True, if the user can send polls. Implies can_send_messages permissions",
              "nilable": false
            },
            {
              "name": "can_send_other_messages",
              "type": "Bool",
              "description": "True, if the user can send animations, games, and stickers and use inline bots. Implies can_send_messages permissions",
              "nilable": false
            },
            {
              "name": "can_add_web_page_previews",
              "type": "Bool",
              "description": "True, if the user may add a web page preview to their messages. Implies can_send_messages permissions",
              "nilable": false
            },
            {
              "name": "can_change_info",
              "type": "Bool",
              "description": "True, if the user can change the chat title, photo, and other settings",
              "nilable": false
            },
            {
              "name": "can_invite_users",
              "type": "Bool",
              "description": "True, if the user can invite new users to the chat",
              "nilable": false
            },
            {
              "name": "can_pin_messages",
              "type": "Bool",
              "description": "True, if the user can pin messages",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Describes actions that a user is allowed to take in a chat",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "chatMember",
          "properties": [
            {
              "name": "user_id",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "inviter_user_id",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "joined_chat_date",
              "type": "int32",
              "description": "Point in time (Unix timestamp) when the user joined a chat @status Status of the member in the chat @bot_info If the user is a bot, information about the bot; may be null. Can be null even for a bot if the bot is not a chat member",
              "nilable": true
            },
            {
              "name": "status",
              "type": "ChatMemberStatus",
              "nilable": false
            },
            {
              "name": "bot_info",
              "type": "botInfo",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "A user with information about joining/leaving a chat @user_id User identifier of the chat member @inviter_user_id Identifier of a user that invited/promoted/banned this member in the chat; 0 if unknown",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "chatMembers",
          "properties": [
            {
              "name": "total_count",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "members",
              "type": "vector<chatMember>",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Contains a list of chat members @total_count Approximate total count of chat members found @members A list of chat members",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "basicGroup",
          "properties": [
            {
              "name": "id",
              "type": "int32",
              "description": "Group identifier",
              "nilable": false
            },
            {
              "name": "member_count",
              "type": "int32",
              "description": "Number of members in the group",
              "nilable": false
            },
            {
              "name": "status",
              "type": "ChatMemberStatus",
              "description": "Status of the current user in the group",
              "nilable": false
            },
            {
              "name": "is_active",
              "type": "Bool",
              "description": "True, if the group is active",
              "nilable": false
            },
            {
              "name": "upgraded_to_supergroup_id",
              "type": "int32",
              "description": "Identifier of the supergroup to which this group was upgraded; 0 if none",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Represents a basic group of 0-200 users (must be upgraded to a supergroup to accommodate more than 200 users)",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "basicGroupFullInfo",
          "properties": [
            {
              "name": "description",
              "type": "string",
              "description": "Contains full information about a basic group @param_description Group description @creator_user_id User identifier of the creator of the group; 0 if unknown @members Group members @invite_link Invite link for this group; available only for the group creator and only after it has been generated at least once",
              "nilable": false
            },
            {
              "name": "creator_user_id",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "members",
              "type": "vector<chatMember>",
              "nilable": false
            },
            {
              "name": "invite_link",
              "type": "string",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Contains full information about a basic group @param_description Group description @creator_user_id User identifier of the creator of the group; 0 if unknown @members Group members @invite_link Invite link for this group; available only for the group creator and only after it has been generated at least once",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "supergroup",
          "properties": [
            {
              "name": "id",
              "type": "int32",
              "description": "Supergroup or channel identifier //-{type} Contains the type of the restriction and at least one of the suffixes \"-all\", \"-ios\", \"-android\", or \"-wp\", which describe the platforms on which access should be restricted. (For example, \"terms-ios-android\". {description} contains a human-readable description of the restriction, which can be shown to the user)",
              "nilable": false
            },
            {
              "name": "username",
              "type": "string",
              "description": "Username of the supergroup or channel; empty for private supergroups or channels //-{type} Contains the type of the restriction and at least one of the suffixes \"-all\", \"-ios\", \"-android\", or \"-wp\", which describe the platforms on which access should be restricted. (For example, \"terms-ios-android\". {description} contains a human-readable description of the restriction, which can be shown to the user)",
              "nilable": true
            },
            {
              "name": "date",
              "type": "int32",
              "description": "Point in time (Unix timestamp) when the current user joined, or the point in time when the supergroup or channel was created, in case the user is not a member //-{type} Contains the type of the restriction and at least one of the suffixes \"-all\", \"-ios\", \"-android\", or \"-wp\", which describe the platforms on which access should be restricted. (For example, \"terms-ios-android\". {description} contains a human-readable description of the restriction, which can be shown to the user)",
              "nilable": false
            },
            {
              "name": "status",
              "type": "ChatMemberStatus",
              "description": "Status of the current user in the supergroup or channel //-{type} Contains the type of the restriction and at least one of the suffixes \"-all\", \"-ios\", \"-android\", or \"-wp\", which describe the platforms on which access should be restricted. (For example, \"terms-ios-android\". {description} contains a human-readable description of the restriction, which can be shown to the user)",
              "nilable": false
            },
            {
              "name": "member_count",
              "type": "int32",
              "description": "Member count; 0 if unknown. Currently it is guaranteed to be known only if the supergroup or channel was found through SearchPublicChats //-{type} Contains the type of the restriction and at least one of the suffixes \"-all\", \"-ios\", \"-android\", or \"-wp\", which describe the platforms on which access should be restricted. (For example, \"terms-ios-android\". {description} contains a human-readable description of the restriction, which can be shown to the user)",
              "nilable": false
            },
            {
              "name": "sign_messages",
              "type": "Bool",
              "description": "True, if messages sent to the channel should contain information about the sender. This field is only applicable to channels //-{type} Contains the type of the restriction and at least one of the suffixes \"-all\", \"-ios\", \"-android\", or \"-wp\", which describe the platforms on which access should be restricted. (For example, \"terms-ios-android\". {description} contains a human-readable description of the restriction, which can be shown to the user)",
              "nilable": false
            },
            {
              "name": "is_channel",
              "type": "Bool",
              "description": "True, if the supergroup is a channel //-{type} Contains the type of the restriction and at least one of the suffixes \"-all\", \"-ios\", \"-android\", or \"-wp\", which describe the platforms on which access should be restricted. (For example, \"terms-ios-android\". {description} contains a human-readable description of the restriction, which can be shown to the user)",
              "nilable": false
            },
            {
              "name": "is_verified",
              "type": "Bool",
              "description": "True, if the supergroup or channel is verified //-{type} Contains the type of the restriction and at least one of the suffixes \"-all\", \"-ios\", \"-android\", or \"-wp\", which describe the platforms on which access should be restricted. (For example, \"terms-ios-android\". {description} contains a human-readable description of the restriction, which can be shown to the user)",
              "nilable": false
            },
            {
              "name": "restriction_reason",
              "type": "string",
              "description": "If non-empty, contains the reason why access to this supergroup or channel must be restricted. Format of the string is \"{type}: {description}\". //-{type} Contains the type of the restriction and at least one of the suffixes \"-all\", \"-ios\", \"-android\", or \"-wp\", which describe the platforms on which access should be restricted. (For example, \"terms-ios-android\". {description} contains a human-readable description of the restriction, which can be shown to the user)",
              "nilable": false
            },
            {
              "name": "is_scam",
              "type": "Bool",
              "description": "True, if many users reported this supergroup as a scam",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Represents a supergroup or channel with zero or more members (subscribers in the case of channels). From the point of view of the system, a channel is a special kind of a supergroup: only administrators can post and see the list of members, and posts from all administrators use the name and photo of the channel instead of individual names and profile photos. Unlike supergroups, channels can have an unlimited number of subscribers",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "supergroupFullInfo",
          "properties": [
            {
              "name": "description",
              "type": "string",
              "description": "Contains full information about a supergroup or channel",
              "nilable": false
            },
            {
              "name": "member_count",
              "type": "int32",
              "description": "Number of members in the supergroup or channel; 0 if unknown",
              "nilable": false
            },
            {
              "name": "administrator_count",
              "type": "int32",
              "description": "Number of privileged users in the supergroup or channel; 0 if unknown",
              "nilable": false
            },
            {
              "name": "restricted_count",
              "type": "int32",
              "description": "Number of restricted users in the supergroup; 0 if unknown",
              "nilable": false
            },
            {
              "name": "banned_count",
              "type": "int32",
              "description": "Number of users banned from chat; 0 if unknown",
              "nilable": false
            },
            {
              "name": "can_get_members",
              "type": "Bool",
              "description": "True, if members of the chat can be retrieved",
              "nilable": false
            },
            {
              "name": "can_set_username",
              "type": "Bool",
              "description": "True, if the chat can be made public",
              "nilable": false
            },
            {
              "name": "can_set_sticker_set",
              "type": "Bool",
              "description": "True, if the supergroup sticker set can be changed",
              "nilable": false
            },
            {
              "name": "can_view_statistics",
              "type": "Bool",
              "description": "True, if the channel statistics is available through getChatStatisticsUrl",
              "nilable": false
            },
            {
              "name": "is_all_history_available",
              "type": "Bool",
              "description": "True, if new chat members will have access to old messages. In public supergroups and both public and private channels, old messages are always available, so this option affects only private supergroups. The value of this field is only available for chat administrators",
              "nilable": false
            },
            {
              "name": "sticker_set_id",
              "type": "int64",
              "description": "Identifier of the supergroup sticker set; 0 if none",
              "nilable": false
            },
            {
              "name": "invite_link",
              "type": "string",
              "description": "Invite link for this chat",
              "nilable": false
            },
            {
              "name": "upgraded_from_basic_group_id",
              "type": "int32",
              "description": "Identifier of the basic group from which supergroup was upgraded; 0 if none",
              "nilable": false
            },
            {
              "name": "upgraded_from_max_message_id",
              "type": "int53",
              "description": "Identifier of the last message in the basic group from which supergroup was upgraded; 0 if none",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Contains full information about a supergroup or channel",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "secretChat",
          "properties": [
            {
              "name": "id",
              "type": "int32",
              "description": "Secret chat identifier //-Alternatively, the first 32 bytes of the hash can be converted to the hexadecimal format and printed as 32 2-digit hex numbers",
              "nilable": false
            },
            {
              "name": "user_id",
              "type": "int32",
              "description": "Identifier of the chat partner //-Alternatively, the first 32 bytes of the hash can be converted to the hexadecimal format and printed as 32 2-digit hex numbers",
              "nilable": false
            },
            {
              "name": "state",
              "type": "SecretChatState",
              "description": "State of the secret chat //-Alternatively, the first 32 bytes of the hash can be converted to the hexadecimal format and printed as 32 2-digit hex numbers",
              "nilable": false
            },
            {
              "name": "is_outbound",
              "type": "Bool",
              "description": "True, if the chat was created by the current user; otherwise false //-Alternatively, the first 32 bytes of the hash can be converted to the hexadecimal format and printed as 32 2-digit hex numbers",
              "nilable": false
            },
            {
              "name": "ttl",
              "type": "int32",
              "description": "Current message Time To Live setting (self-destruct timer) for the chat, in seconds //-Alternatively, the first 32 bytes of the hash can be converted to the hexadecimal format and printed as 32 2-digit hex numbers",
              "nilable": false
            },
            {
              "name": "key_hash",
              "type": "bytes",
              "description": "Hash of the currently used key for comparison with the hash of the chat partner's key. This is a string of 36 bytes, which must be used to make a 12x12 square image with a color depth of 4. The first 16 bytes should be used to make a central 8x8 square, while the remaining 20 bytes should be used to construct a 2-pixel-wide border around that square. //-Alternatively, the first 32 bytes of the hash can be converted to the hexadecimal format and printed as 32 2-digit hex numbers",
              "nilable": false
            },
            {
              "name": "layer",
              "type": "int32",
              "description": "Secret chat layer; determines features supported by the other client. Video notes are supported if the layer >= 66",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Represents a secret chat",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "messageForwardInfo",
          "properties": [
            {
              "name": "origin",
              "type": "MessageForwardOrigin",
              "description": "Origin of a forwarded message",
              "nilable": false
            },
            {
              "name": "date",
              "type": "int32",
              "description": "Point in time (Unix timestamp) when the message was originally sent",
              "nilable": false
            },
            {
              "name": "from_chat_id",
              "type": "int53",
              "description": "For messages forwarded to the chat with the current user (saved messages) or to the channel discussion supergroup, the identifier of the chat from which the message was forwarded last time; 0 if unknown",
              "nilable": false
            },
            {
              "name": "from_message_id",
              "type": "int53",
              "description": "For messages forwarded to the chat with the current user (saved messages) or to the channel discussion supergroup, the identifier of the original message from which the new message was forwarded last time; 0 if unknown",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Contains information about a forwarded message",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "message",
          "properties": [
            {
              "name": "id",
              "type": "int53",
              "description": "Message identifier, unique for the chat to which the message belongs",
              "nilable": false
            },
            {
              "name": "sender_user_id",
              "type": "int32",
              "description": "Identifier of the user who sent the message; 0 if unknown. Currently, it is unknown for channel posts and for channel posts automatically forwarded to discussion group",
              "nilable": false
            },
            {
              "name": "chat_id",
              "type": "int53",
              "description": "Chat identifier",
              "nilable": false
            },
            {
              "name": "sending_state",
              "type": "MessageSendingState",
              "description": "Information about the sending state of the message; may be null",
              "nilable": true
            },
            {
              "name": "is_outgoing",
              "type": "Bool",
              "description": "True, if the message is outgoing",
              "nilable": false
            },
            {
              "name": "can_be_edited",
              "type": "Bool",
              "description": "True, if the message can be edited. For live location and poll messages this fields shows, whether editMessageLiveLocation or stopPoll can be used with this message by the client",
              "nilable": false
            },
            {
              "name": "can_be_forwarded",
              "type": "Bool",
              "description": "True, if the message can be forwarded",
              "nilable": false
            },
            {
              "name": "can_be_deleted_only_for_self",
              "type": "Bool",
              "description": "True, if the message can be deleted only for the current user while other users will continue to see it",
              "nilable": false
            },
            {
              "name": "can_be_deleted_for_all_users",
              "type": "Bool",
              "description": "True, if the message can be deleted for all users",
              "nilable": false
            },
            {
              "name": "is_channel_post",
              "type": "Bool",
              "description": "True, if the message is a channel post. All messages to channels are channel posts, all other messages are not channel posts",
              "nilable": false
            },
            {
              "name": "contains_unread_mention",
              "type": "Bool",
              "description": "True, if the message contains an unread mention for the current user",
              "nilable": false
            },
            {
              "name": "date",
              "type": "int32",
              "description": "Point in time (Unix timestamp) when the message was sent",
              "nilable": false
            },
            {
              "name": "edit_date",
              "type": "int32",
              "description": "Point in time (Unix timestamp) when the message was last edited",
              "nilable": false
            },
            {
              "name": "forward_info",
              "type": "messageForwardInfo",
              "description": "Information about the initial message sender; may be null",
              "nilable": true
            },
            {
              "name": "reply_to_message_id",
              "type": "int53",
              "description": "If non-zero, the identifier of the message this message is replying to; can be the identifier of a deleted message",
              "nilable": false
            },
            {
              "name": "ttl",
              "type": "int32",
              "description": "For self-destructing messages, the message's TTL (Time To Live), in seconds; 0 if none. TDLib will send updateDeleteMessages or updateMessageContent once the TTL expires",
              "nilable": false
            },
            {
              "name": "ttl_expires_in",
              "type": "double",
              "description": "Time left before the message expires, in seconds",
              "nilable": false
            },
            {
              "name": "via_bot_user_id",
              "type": "int32",
              "description": "If non-zero, the user identifier of the bot through which this message was sent",
              "nilable": false
            },
            {
              "name": "author_signature",
              "type": "string",
              "description": "For channel posts, optional author signature",
              "nilable": true
            },
            {
              "name": "views",
              "type": "int32",
              "description": "Number of times this message was viewed",
              "nilable": false
            },
            {
              "name": "media_album_id",
              "type": "int64",
              "description": "Unique identifier of an album this message belongs to. Only photos and videos can be grouped together in albums",
              "nilable": false
            },
            {
              "name": "content",
              "type": "MessageContent",
              "description": "Content of the message",
              "nilable": false
            },
            {
              "name": "reply_markup",
              "type": "ReplyMarkup",
              "description": "Reply markup for the message; may be null",
              "nilable": true
            }
          ],
          "type": "Base",
          "description": "Describes a message",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "messages",
          "properties": [
            {
              "name": "total_count",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "messages",
              "type": "vector<message>",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Contains a list of messages @total_count Approximate total count of messages found @messages List of messages; messages may be null",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "foundMessages",
          "properties": [
            {
              "name": "messages",
              "type": "vector<message>",
              "nilable": false
            },
            {
              "name": "next_from_search_id",
              "type": "int64",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Contains a list of messages found by a search @messages List of messages @next_from_search_id Value to pass as from_search_id to get more results",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "chatNotificationSettings",
          "properties": [
            {
              "name": "use_default_mute_for",
              "type": "Bool",
              "description": "If true, mute_for is ignored and the value for the relevant type of chat is used instead @mute_for Time left before notifications will be unmuted, in seconds",
              "nilable": false
            },
            {
              "name": "mute_for",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "use_default_sound",
              "type": "Bool",
              "description": "If true, sound is ignored and the value for the relevant type of chat is used instead @sound The name of an audio file to be used for notification sounds; only applies to iOS applications",
              "nilable": false
            },
            {
              "name": "sound",
              "type": "string",
              "nilable": false
            },
            {
              "name": "use_default_show_preview",
              "type": "Bool",
              "description": "If true, show_preview is ignored and the value for the relevant type of chat is used instead @show_preview True, if message content should be displayed in notifications",
              "nilable": false
            },
            {
              "name": "show_preview",
              "type": "Bool",
              "nilable": false
            },
            {
              "name": "use_default_disable_pinned_message_notifications",
              "type": "Bool",
              "description": "If true, disable_pinned_message_notifications is ignored and the value for the relevant type of chat is used instead @disable_pinned_message_notifications If true, notifications for incoming pinned messages will be created as for an ordinary unread message",
              "nilable": false
            },
            {
              "name": "disable_pinned_message_notifications",
              "type": "Bool",
              "nilable": false
            },
            {
              "name": "use_default_disable_mention_notifications",
              "type": "Bool",
              "description": "If true, disable_mention_notifications is ignored and the value for the relevant type of chat is used instead @disable_mention_notifications If true, notifications for messages with mentions will be created as for an ordinary unread message",
              "nilable": false
            },
            {
              "name": "disable_mention_notifications",
              "type": "Bool",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Contains information about notification settings for a chat",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "scopeNotificationSettings",
          "properties": [
            {
              "name": "mute_for",
              "type": "int32",
              "description": "Time left before notifications will be unmuted, in seconds",
              "nilable": false
            },
            {
              "name": "sound",
              "type": "string",
              "description": "The name of an audio file to be used for notification sounds; only applies to iOS applications",
              "nilable": false
            },
            {
              "name": "show_preview",
              "type": "Bool",
              "description": "True, if message content should be displayed in notifications",
              "nilable": false
            },
            {
              "name": "disable_pinned_message_notifications",
              "type": "Bool",
              "description": "True, if notifications for incoming pinned messages will be created as for an ordinary unread message",
              "nilable": false
            },
            {
              "name": "disable_mention_notifications",
              "type": "Bool",
              "description": "True, if notifications for messages with mentions will be created as for an ordinary unread message",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Contains information about notification settings for several chats",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "draftMessage",
          "properties": [
            {
              "name": "reply_to_message_id",
              "type": "int53",
              "nilable": false
            },
            {
              "name": "input_message_text",
              "type": "InputMessageContent",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Contains information about a message draft @reply_to_message_id Identifier of the message to reply to; 0 if none @input_message_text Content of the message draft; this should always be of type inputMessageText",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "chat",
          "properties": [
            {
              "name": "id",
              "type": "int53",
              "description": "Chat unique identifier",
              "nilable": false
            },
            {
              "name": "type",
              "type": "ChatType",
              "description": "Type of the chat",
              "nilable": false
            },
            {
              "name": "title",
              "type": "string",
              "description": "Chat title",
              "nilable": false
            },
            {
              "name": "photo",
              "type": "chatPhoto",
              "description": "Chat photo; may be null",
              "nilable": true
            },
            {
              "name": "permissions",
              "type": "chatPermissions",
              "description": "Actions that non-administrator chat members are allowed to take in the chat",
              "nilable": false
            },
            {
              "name": "last_message",
              "type": "message",
              "description": "Last message in the chat; may be null",
              "nilable": true
            },
            {
              "name": "order",
              "type": "int64",
              "description": "Descending parameter by which chats are sorted in the main chat list. If the order number of two chats is the same, they must be sorted in descending order by ID. If 0, the position of the chat in the list is undetermined",
              "nilable": false
            },
            {
              "name": "is_pinned",
              "type": "Bool",
              "description": "True, if the chat is pinned",
              "nilable": false
            },
            {
              "name": "is_marked_as_unread",
              "type": "Bool",
              "description": "True, if the chat is marked as unread",
              "nilable": false
            },
            {
              "name": "is_sponsored",
              "type": "Bool",
              "description": "True, if the chat is sponsored by the user's MTProxy server",
              "nilable": false
            },
            {
              "name": "can_be_deleted_only_for_self",
              "type": "Bool",
              "description": "True, if the chat messages can be deleted only for the current user while other users will continue to see the messages",
              "nilable": false
            },
            {
              "name": "can_be_deleted_for_all_users",
              "type": "Bool",
              "description": "True, if the chat messages can be deleted for all users",
              "nilable": false
            },
            {
              "name": "can_be_reported",
              "type": "Bool",
              "description": "True, if the chat can be reported to Telegram moderators through reportChat",
              "nilable": false
            },
            {
              "name": "default_disable_notification",
              "type": "Bool",
              "description": "Default value of the disable_notification parameter, used when a message is sent to the chat",
              "nilable": false
            },
            {
              "name": "unread_count",
              "type": "int32",
              "description": "Number of unread messages in the chat",
              "nilable": false
            },
            {
              "name": "last_read_inbox_message_id",
              "type": "int53",
              "description": "Identifier of the last read incoming message",
              "nilable": false
            },
            {
              "name": "last_read_outbox_message_id",
              "type": "int53",
              "description": "Identifier of the last read outgoing message",
              "nilable": false
            },
            {
              "name": "unread_mention_count",
              "type": "int32",
              "description": "Number of unread messages with a mention/reply in the chat",
              "nilable": false
            },
            {
              "name": "notification_settings",
              "type": "chatNotificationSettings",
              "description": "Notification settings for this chat",
              "nilable": false
            },
            {
              "name": "pinned_message_id",
              "type": "int53",
              "description": "Identifier of the pinned message in the chat; 0 if none",
              "nilable": false
            },
            {
              "name": "reply_markup_message_id",
              "type": "int53",
              "description": "Identifier of the message from which reply markup needs to be used; 0 if there is no default custom reply markup in the chat",
              "nilable": false
            },
            {
              "name": "draft_message",
              "type": "draftMessage",
              "description": "A draft of a message in the chat; may be null",
              "nilable": true
            },
            {
              "name": "client_data",
              "type": "string",
              "description": "Contains client-specific data associated with the chat. (For example, the chat position or local chat notification settings can be stored here.) Persistent if a message database is used",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "A chat. (Can be a private chat, basic group, supergroup, or secret chat)",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "chats",
          "properties": [
            {
              "name": "chat_ids",
              "type": "vector<int53>",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Represents a list of chats @chat_ids List of chat identifiers",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "chatInviteLink",
          "properties": [
            {
              "name": "invite_link",
              "type": "string",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Contains a chat invite link @invite_link Chat invite link",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "chatInviteLinkInfo",
          "properties": [
            {
              "name": "chat_id",
              "type": "int53",
              "description": "Chat identifier of the invite link; 0 if the user is not a member of this chat",
              "nilable": false
            },
            {
              "name": "type",
              "type": "ChatType",
              "description": "Contains information about the type of the chat",
              "nilable": false
            },
            {
              "name": "title",
              "type": "string",
              "description": "Title of the chat",
              "nilable": false
            },
            {
              "name": "photo",
              "type": "chatPhoto",
              "description": "Chat photo; may be null",
              "nilable": true
            },
            {
              "name": "member_count",
              "type": "int32",
              "description": "Number of members",
              "nilable": false
            },
            {
              "name": "member_user_ids",
              "type": "vector<int32>",
              "description": "User identifiers of some chat members that may be known to the current user",
              "nilable": false
            },
            {
              "name": "is_public",
              "type": "Bool",
              "description": "True, if the chat is a public supergroup or a channel with a username",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Contains information about a chat invite link",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "keyboardButton",
          "properties": [
            {
              "name": "text",
              "type": "string",
              "nilable": false
            },
            {
              "name": "type",
              "type": "KeyboardButtonType",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Represents a single button in a bot keyboard @text Text of the button @type Type of the button",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "inlineKeyboardButton",
          "properties": [
            {
              "name": "text",
              "type": "string",
              "nilable": false
            },
            {
              "name": "type",
              "type": "InlineKeyboardButtonType",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Represents a single button in an inline keyboard @text Text of the button @type Type of the button",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "pageBlockCaption",
          "properties": [
            {
              "name": "text",
              "type": "RichText",
              "nilable": false
            },
            {
              "name": "credit",
              "type": "RichText",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Contains a caption of an instant view web page block, consisting of a text and a trailing credit @text Content of the caption @credit Block credit (like HTML tag <cite>)",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "pageBlockListItem",
          "properties": [
            {
              "name": "label",
              "type": "string",
              "nilable": false
            },
            {
              "name": "page_blocks",
              "type": "vector<PageBlock>",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Describes an item of a list page block @label Item label @page_blocks Item blocks",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "pageBlockTableCell",
          "properties": [
            {
              "name": "text",
              "type": "RichText",
              "nilable": false
            },
            {
              "name": "is_header",
              "type": "Bool",
              "nilable": false
            },
            {
              "name": "colspan",
              "type": "int32",
              "description": "The number of columns the cell should span @rowspan The number of rows the cell should span",
              "nilable": false
            },
            {
              "name": "rowspan",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "align",
              "type": "PageBlockHorizontalAlignment",
              "description": "Horizontal cell content alignment @valign Vertical cell content alignment",
              "nilable": false
            },
            {
              "name": "valign",
              "type": "PageBlockVerticalAlignment",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Represents a cell of a table @text Cell text; may be null. If the text is null, then the cell should be invisible @is_header True, if it is a header cell",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "pageBlockRelatedArticle",
          "properties": [
            {
              "name": "url",
              "type": "string",
              "nilable": false
            },
            {
              "name": "title",
              "type": "string",
              "nilable": false
            },
            {
              "name": "description",
              "type": "string",
              "description": "Contains information about a related article @url Related article URL @title Article title; may be empty @param_description Article description; may be empty",
              "nilable": true
            },
            {
              "name": "photo",
              "type": "photo",
              "description": "Article photo; may be null @author Article author; may be empty @publish_date Point in time (Unix timestamp) when the article was published; 0 if unknown",
              "nilable": true
            },
            {
              "name": "author",
              "type": "string",
              "nilable": false
            },
            {
              "name": "publish_date",
              "type": "int32",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Contains information about a related article @url Related article URL @title Article title; may be empty @param_description Article description; may be empty",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "webPageInstantView",
          "properties": [
            {
              "name": "page_blocks",
              "type": "vector<PageBlock>",
              "nilable": false
            },
            {
              "name": "version",
              "type": "int32",
              "description": "Version of the instant view, currently can be 1 or 2",
              "nilable": false
            },
            {
              "name": "url",
              "type": "string",
              "description": "Instant view URL; may be different from WebPage.url and must be used for the correct anchors handling",
              "nilable": false
            },
            {
              "name": "is_rtl",
              "type": "Bool",
              "description": "True, if the instant view must be shown from right to left",
              "nilable": false
            },
            {
              "name": "is_full",
              "type": "Bool",
              "description": "True, if the instant view contains the full page. A network request might be needed to get the full web page instant view",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Describes an instant view page for a web page @page_blocks Content of the web page",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "webPage",
          "properties": [
            {
              "name": "url",
              "type": "string",
              "nilable": false
            },
            {
              "name": "display_url",
              "type": "string",
              "nilable": false
            },
            {
              "name": "type",
              "type": "string",
              "description": "Type of the web page. Can be: article, photo, audio, video, document, profile, app, or something else",
              "nilable": false
            },
            {
              "name": "site_name",
              "type": "string",
              "description": "Short name of the site (e.g., Google Docs, App Store) @title Title of the content @param_description Description of the content",
              "nilable": false
            },
            {
              "name": "title",
              "type": "string",
              "nilable": false
            },
            {
              "name": "description",
              "type": "string",
              "description": "Describes a web page preview @url Original URL of the link @display_url URL to display",
              "nilable": false
            },
            {
              "name": "photo",
              "type": "photo",
              "description": "Image representing the content; may be null",
              "nilable": true
            },
            {
              "name": "embed_url",
              "type": "string",
              "description": "URL to show in the embedded preview",
              "nilable": false
            },
            {
              "name": "embed_type",
              "type": "string",
              "description": "MIME type of the embedded preview, (e.g., text/html or video/mp4)",
              "nilable": false
            },
            {
              "name": "embed_width",
              "type": "int32",
              "description": "Width of the embedded preview",
              "nilable": false
            },
            {
              "name": "embed_height",
              "type": "int32",
              "description": "Height of the embedded preview",
              "nilable": false
            },
            {
              "name": "duration",
              "type": "int32",
              "description": "Duration of the content, in seconds",
              "nilable": false
            },
            {
              "name": "author",
              "type": "string",
              "description": "Author of the content",
              "nilable": false
            },
            {
              "name": "animation",
              "type": "animation",
              "description": "Preview of the content as an animation, if available; may be null",
              "nilable": true
            },
            {
              "name": "audio",
              "type": "audio",
              "description": "Preview of the content as an audio file, if available; may be null",
              "nilable": true
            },
            {
              "name": "document",
              "type": "document",
              "description": "Preview of the content as a document, if available (currently only available for small PDF files and ZIP archives); may be null",
              "nilable": true
            },
            {
              "name": "sticker",
              "type": "sticker",
              "description": "Preview of the content as a sticker for small WEBP files, if available; may be null",
              "nilable": true
            },
            {
              "name": "video",
              "type": "video",
              "description": "Preview of the content as a video, if available; may be null",
              "nilable": true
            },
            {
              "name": "video_note",
              "type": "videoNote",
              "description": "Preview of the content as a video note, if available; may be null",
              "nilable": true
            },
            {
              "name": "voice_note",
              "type": "voiceNote",
              "description": "Preview of the content as a voice note, if available; may be null",
              "nilable": true
            },
            {
              "name": "instant_view_version",
              "type": "int32",
              "description": "Version of instant view, available for the web page (currently can be 1 or 2), 0 if none",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Describes a web page preview @url Original URL of the link @display_url URL to display",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "address",
          "properties": [
            {
              "name": "country_code",
              "type": "string",
              "nilable": false
            },
            {
              "name": "state",
              "type": "string",
              "nilable": false
            },
            {
              "name": "city",
              "type": "string",
              "nilable": false
            },
            {
              "name": "street_line1",
              "type": "string",
              "nilable": false
            },
            {
              "name": "street_line2",
              "type": "string",
              "nilable": false
            },
            {
              "name": "postal_code",
              "type": "string",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Describes an address @country_code A two-letter ISO 3166-1 alpha-2 country code @state State, if applicable @city City @street_line1 First line of the address @street_line2 Second line of the address @postal_code Address postal code",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "labeledPricePart",
          "properties": [
            {
              "name": "label",
              "type": "string",
              "nilable": false
            },
            {
              "name": "amount",
              "type": "int53",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Portion of the price of a product (e.g., \"delivery cost\", \"tax amount\") @label Label for this portion of the product price @amount Currency amount in minimal quantity of the currency",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "invoice",
          "properties": [
            {
              "name": "currency",
              "type": "string",
              "nilable": false
            },
            {
              "name": "price_parts",
              "type": "vector<labeledPricePart>",
              "nilable": false
            },
            {
              "name": "is_test",
              "type": "Bool",
              "nilable": false
            },
            {
              "name": "need_name",
              "type": "Bool",
              "description": "True, if the user's name is needed for payment @need_phone_number True, if the user's phone number is needed for payment @need_email_address True, if the user's email address is needed for payment",
              "nilable": false
            },
            {
              "name": "need_phone_number",
              "type": "Bool",
              "nilable": false
            },
            {
              "name": "need_email_address",
              "type": "Bool",
              "nilable": false
            },
            {
              "name": "need_shipping_address",
              "type": "Bool",
              "description": "True, if the user's shipping address is needed for payment @send_phone_number_to_provider True, if the user's phone number will be sent to the provider",
              "nilable": false
            },
            {
              "name": "send_phone_number_to_provider",
              "type": "Bool",
              "nilable": false
            },
            {
              "name": "send_email_address_to_provider",
              "type": "Bool",
              "description": "True, if the user's email address will be sent to the provider @is_flexible True, if the total price depends on the shipping method",
              "nilable": false
            },
            {
              "name": "is_flexible",
              "type": "Bool",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Product invoice @currency ISO 4217 currency code @price_parts A list of objects used to calculate the total price of the product @is_test True, if the payment is a test payment",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "orderInfo",
          "properties": [
            {
              "name": "name",
              "type": "string",
              "nilable": false
            },
            {
              "name": "phone_number",
              "type": "string",
              "nilable": false
            },
            {
              "name": "email_address",
              "type": "string",
              "nilable": false
            },
            {
              "name": "shipping_address",
              "type": "address",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Order information @name Name of the user @phone_number Phone number of the user @email_address Email address of the user @shipping_address Shipping address for this order; may be null",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "shippingOption",
          "properties": [
            {
              "name": "id",
              "type": "string",
              "nilable": false
            },
            {
              "name": "title",
              "type": "string",
              "nilable": false
            },
            {
              "name": "price_parts",
              "type": "vector<labeledPricePart>",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "One shipping option @id Shipping option identifier @title Option title @price_parts A list of objects used to calculate the total shipping costs",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "savedCredentials",
          "properties": [
            {
              "name": "id",
              "type": "string",
              "nilable": false
            },
            {
              "name": "title",
              "type": "string",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Contains information about saved card credentials @id Unique identifier of the saved credentials @title Title of the saved credentials",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "paymentsProviderStripe",
          "properties": [
            {
              "name": "publishable_key",
              "type": "string",
              "nilable": false
            },
            {
              "name": "need_country",
              "type": "Bool",
              "nilable": false
            },
            {
              "name": "need_postal_code",
              "type": "Bool",
              "nilable": false
            },
            {
              "name": "need_cardholder_name",
              "type": "Bool",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Stripe payment provider @publishable_key Stripe API publishable key @need_country True, if the user country must be provided @need_postal_code True, if the user ZIP/postal code must be provided @need_cardholder_name True, if the cardholder name must be provided",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "paymentForm",
          "properties": [
            {
              "name": "invoice",
              "type": "invoice",
              "nilable": false
            },
            {
              "name": "url",
              "type": "string",
              "nilable": false
            },
            {
              "name": "payments_provider",
              "type": "paymentsProviderStripe",
              "nilable": false
            },
            {
              "name": "saved_order_info",
              "type": "orderInfo",
              "description": "Saved server-side order information; may be null @saved_credentials Contains information about saved card credentials; may be null @can_save_credentials True, if the user can choose to save credentials @need_password True, if the user will be able to save credentials protected by a password they set up",
              "nilable": true
            },
            {
              "name": "saved_credentials",
              "type": "savedCredentials",
              "nilable": false
            },
            {
              "name": "can_save_credentials",
              "type": "Bool",
              "nilable": false
            },
            {
              "name": "need_password",
              "type": "Bool",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Contains information about an invoice payment form @invoice Full information of the invoice @url Payment form URL @payments_provider Contains information about the payment provider, if available, to support it natively without the need for opening the URL; may be null",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "validatedOrderInfo",
          "properties": [
            {
              "name": "order_info_id",
              "type": "string",
              "nilable": false
            },
            {
              "name": "shipping_options",
              "type": "vector<shippingOption>",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Contains a temporary identifier of validated order information, which is stored for one hour. Also contains the available shipping options @order_info_id Temporary identifier of the order information @shipping_options Available shipping options",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "paymentResult",
          "properties": [
            {
              "name": "success",
              "type": "Bool",
              "nilable": false
            },
            {
              "name": "verification_url",
              "type": "string",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Contains the result of a payment request @success True, if the payment request was successful; otherwise the verification_url will be not empty @verification_url URL for additional payment credentials verification",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "paymentReceipt",
          "properties": [
            {
              "name": "date",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "payments_provider_user_id",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "invoice",
              "type": "invoice",
              "nilable": false
            },
            {
              "name": "order_info",
              "type": "orderInfo",
              "description": "Contains order information; may be null @shipping_option Chosen shipping option; may be null @credentials_title Title of the saved credentials",
              "nilable": true
            },
            {
              "name": "shipping_option",
              "type": "shippingOption",
              "nilable": false
            },
            {
              "name": "credentials_title",
              "type": "string",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Contains information about a successful payment @date Point in time (Unix timestamp) when the payment was made @payments_provider_user_id User identifier of the payment provider bot @invoice Contains information about the invoice",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "datedFile",
          "properties": [
            {
              "name": "file",
              "type": "file",
              "nilable": false
            },
            {
              "name": "date",
              "type": "int32",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "File with the date it was uploaded @file The file @date Point in time (Unix timestamp) when the file was uploaded",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "date",
          "properties": [
            {
              "name": "day",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "month",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "year",
              "type": "int32",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Represents a date according to the Gregorian calendar @day Day of the month, 1-31 @month Month, 1-12 @year Year, 1-9999",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "personalDetails",
          "properties": [
            {
              "name": "first_name",
              "type": "string",
              "description": "First name of the user written in English; 1-255 characters @middle_name Middle name of the user written in English; 0-255 characters @last_name Last name of the user written in English; 1-255 characters",
              "nilable": false
            },
            {
              "name": "middle_name",
              "type": "string",
              "nilable": false
            },
            {
              "name": "last_name",
              "type": "string",
              "nilable": false
            },
            {
              "name": "native_first_name",
              "type": "string",
              "description": "Native first name of the user; 1-255 characters @native_middle_name Native middle name of the user; 0-255 characters @native_last_name Native last name of the user; 1-255 characters",
              "nilable": false
            },
            {
              "name": "native_middle_name",
              "type": "string",
              "nilable": false
            },
            {
              "name": "native_last_name",
              "type": "string",
              "nilable": false
            },
            {
              "name": "birthdate",
              "type": "date",
              "description": "Birthdate of the user @gender Gender of the user, \"male\" or \"female\" @country_code A two-letter ISO 3166-1 alpha-2 country code of the user's country @residence_country_code A two-letter ISO 3166-1 alpha-2 country code of the user's residence country",
              "nilable": false
            },
            {
              "name": "gender",
              "type": "string",
              "nilable": false
            },
            {
              "name": "country_code",
              "type": "string",
              "nilable": false
            },
            {
              "name": "residence_country_code",
              "type": "string",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Contains the user's personal details",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "identityDocument",
          "properties": [
            {
              "name": "number",
              "type": "string",
              "nilable": false
            },
            {
              "name": "expiry_date",
              "type": "date",
              "nilable": false
            },
            {
              "name": "front_side",
              "type": "datedFile",
              "nilable": false
            },
            {
              "name": "reverse_side",
              "type": "datedFile",
              "description": "Reverse side of the document; only for driver license and identity card @selfie Selfie with the document; may be null @translation List of files containing a certified English translation of the document",
              "nilable": true
            },
            {
              "name": "selfie",
              "type": "datedFile",
              "nilable": false
            },
            {
              "name": "translation",
              "type": "vector<datedFile>",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "An identity document @number Document number; 1-24 characters @expiry_date Document expiry date; may be null @front_side Front side of the document",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "inputIdentityDocument",
          "properties": [
            {
              "name": "number",
              "type": "string",
              "nilable": false
            },
            {
              "name": "expiry_date",
              "type": "date",
              "nilable": false
            },
            {
              "name": "front_side",
              "type": "InputFile",
              "nilable": false
            },
            {
              "name": "reverse_side",
              "type": "InputFile",
              "description": "Reverse side of the document; only for driver license and identity card @selfie Selfie with the document, if available @translation List of files containing a certified English translation of the document",
              "nilable": true
            },
            {
              "name": "selfie",
              "type": "InputFile",
              "nilable": false
            },
            {
              "name": "translation",
              "type": "vector<InputFile>",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "An identity document to be saved to Telegram Passport @number Document number; 1-24 characters @expiry_date Document expiry date, if available @front_side Front side of the document",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "personalDocument",
          "properties": [
            {
              "name": "files",
              "type": "vector<datedFile>",
              "nilable": false
            },
            {
              "name": "translation",
              "type": "vector<datedFile>",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "A personal document, containing some information about a user @files List of files containing the pages of the document @translation List of files containing a certified English translation of the document",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "inputPersonalDocument",
          "properties": [
            {
              "name": "files",
              "type": "vector<InputFile>",
              "nilable": false
            },
            {
              "name": "translation",
              "type": "vector<InputFile>",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "A personal document to be saved to Telegram Passport @files List of files containing the pages of the document @translation List of files containing a certified English translation of the document",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "passportElements",
          "properties": [
            {
              "name": "elements",
              "type": "vector<PassportElement>",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Contains information about saved Telegram Passport elements @elements Telegram Passport elements",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "passportElementError",
          "properties": [
            {
              "name": "type",
              "type": "PassportElementType",
              "nilable": false
            },
            {
              "name": "message",
              "type": "string",
              "nilable": false
            },
            {
              "name": "source",
              "type": "PassportElementErrorSource",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Contains the description of an error in a Telegram Passport element @type Type of the Telegram Passport element which has the error @message Error message @source Error source",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "passportSuitableElement",
          "properties": [
            {
              "name": "type",
              "type": "PassportElementType",
              "nilable": false
            },
            {
              "name": "is_selfie_required",
              "type": "Bool",
              "nilable": false
            },
            {
              "name": "is_translation_required",
              "type": "Bool",
              "description": "True, if a certified English translation is required with the document @is_native_name_required True, if personal details must include the user's name in the language of their country of residence",
              "nilable": false
            },
            {
              "name": "is_native_name_required",
              "type": "Bool",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Contains information about a Telegram Passport element that was requested by a service @type Type of the element @is_selfie_required True, if a selfie is required with the identity document",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "passportRequiredElement",
          "properties": [
            {
              "name": "suitable_elements",
              "type": "vector<passportSuitableElement>",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Contains a description of the required Telegram Passport element that was requested by a service @suitable_elements List of Telegram Passport elements any of which is enough to provide",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "passportAuthorizationForm",
          "properties": [
            {
              "name": "id",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "required_elements",
              "type": "vector<passportRequiredElement>",
              "description": "Information about the Telegram Passport elements that need to be provided to complete the form",
              "nilable": false
            },
            {
              "name": "privacy_policy_url",
              "type": "string",
              "description": "URL for the privacy policy of the service; may be empty",
              "nilable": true
            }
          ],
          "type": "Base",
          "description": "Contains information about a Telegram Passport authorization form that was requested @id Unique identifier of the authorization form",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "passportElementsWithErrors",
          "properties": [
            {
              "name": "elements",
              "type": "vector<PassportElement>",
              "nilable": false
            },
            {
              "name": "errors",
              "type": "vector<passportElementError>",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Contains information about a Telegram Passport elements and corresponding errors @elements Telegram Passport elements @errors Errors in the elements that are already available",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "encryptedCredentials",
          "properties": [
            {
              "name": "data",
              "type": "bytes",
              "nilable": false
            },
            {
              "name": "hash",
              "type": "bytes",
              "nilable": false
            },
            {
              "name": "secret",
              "type": "bytes",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Contains encrypted Telegram Passport data credentials @data The encrypted credentials @hash The decrypted data hash @secret Secret for data decryption, encrypted with the service's public key",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "encryptedPassportElement",
          "properties": [
            {
              "name": "type",
              "type": "PassportElementType",
              "nilable": false
            },
            {
              "name": "data",
              "type": "bytes",
              "nilable": false
            },
            {
              "name": "front_side",
              "type": "datedFile",
              "nilable": false
            },
            {
              "name": "reverse_side",
              "type": "datedFile",
              "nilable": false
            },
            {
              "name": "selfie",
              "type": "datedFile",
              "nilable": false
            },
            {
              "name": "translation",
              "type": "vector<datedFile>",
              "nilable": false
            },
            {
              "name": "files",
              "type": "vector<datedFile>",
              "nilable": false
            },
            {
              "name": "value",
              "type": "string",
              "nilable": false
            },
            {
              "name": "hash",
              "type": "string",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Contains information about an encrypted Telegram Passport element; for bots only @type Type of Telegram Passport element @data Encrypted JSON-encoded data about the user @front_side The front side of an identity document @reverse_side The reverse side of an identity document; may be null @selfie Selfie with the document; may be null @translation List of files containing a certified English translation of the document @files List of attached files @value Unencrypted data, phone number or email address @hash Hash of the entire element",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "inputPassportElementError",
          "properties": [
            {
              "name": "type",
              "type": "PassportElementType",
              "nilable": false
            },
            {
              "name": "message",
              "type": "string",
              "nilable": false
            },
            {
              "name": "source",
              "type": "InputPassportElementErrorSource",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Contains the description of an error in a Telegram Passport element; for bots only @type Type of Telegram Passport element that has the error @message Error message @source Error source",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "inputThumbnail",
          "properties": [
            {
              "name": "thumbnail",
              "type": "InputFile",
              "nilable": false
            },
            {
              "name": "width",
              "type": "int32",
              "description": "Thumbnail width, usually shouldn't exceed 320. Use 0 if unknown @height Thumbnail height, usually shouldn't exceed 320. Use 0 if unknown",
              "nilable": false
            },
            {
              "name": "height",
              "type": "int32",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "A thumbnail to be sent along with a file; should be in JPEG or WEBP format for stickers, and less than 200 kB in size @thumbnail Thumbnail file to send. Sending thumbnails by file_id is currently not supported",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "stickers",
          "properties": [
            {
              "name": "stickers",
              "type": "vector<sticker>",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Represents a list of stickers @stickers List of stickers",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "emojis",
          "properties": [
            {
              "name": "emojis",
              "type": "vector<string>",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Represents a list of emoji @emojis List of emojis",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "stickerSet",
          "properties": [
            {
              "name": "id",
              "type": "int64",
              "description": "Identifier of the sticker set @title Title of the sticker set @name Name of the sticker set @thumbnail Sticker set thumbnail in WEBP format with width and height 100; may be null. The file can be downloaded only before the thumbnail is changed",
              "nilable": true
            },
            {
              "name": "title",
              "type": "string",
              "nilable": false
            },
            {
              "name": "name",
              "type": "string",
              "nilable": false
            },
            {
              "name": "thumbnail",
              "type": "photoSize",
              "nilable": false
            },
            {
              "name": "is_installed",
              "type": "Bool",
              "description": "True, if the sticker set has been installed by the current user @is_archived True, if the sticker set has been archived. A sticker set can't be installed and archived simultaneously",
              "nilable": false
            },
            {
              "name": "is_archived",
              "type": "Bool",
              "nilable": false
            },
            {
              "name": "is_official",
              "type": "Bool",
              "description": "True, if the sticker set is official @is_animated True, is the stickers in the set are animated @is_masks True, if the stickers in the set are masks @is_viewed True for already viewed trending sticker sets",
              "nilable": false
            },
            {
              "name": "is_animated",
              "type": "Bool",
              "nilable": false
            },
            {
              "name": "is_masks",
              "type": "Bool",
              "nilable": false
            },
            {
              "name": "is_viewed",
              "type": "Bool",
              "nilable": false
            },
            {
              "name": "stickers",
              "type": "vector<sticker>",
              "description": "List of stickers in this set @emojis A list of emoji corresponding to the stickers in the same order. The list is only for informational purposes, because a sticker is always sent with a fixed emoji from the corresponding Sticker object",
              "nilable": false
            },
            {
              "name": "emojis",
              "type": "vector<emojis>",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Represents a sticker set",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "stickerSetInfo",
          "properties": [
            {
              "name": "id",
              "type": "int64",
              "description": "Identifier of the sticker set @title Title of the sticker set @name Name of the sticker set @thumbnail Sticker set thumbnail in WEBP format with width and height 100; may be null",
              "nilable": true
            },
            {
              "name": "title",
              "type": "string",
              "nilable": false
            },
            {
              "name": "name",
              "type": "string",
              "nilable": false
            },
            {
              "name": "thumbnail",
              "type": "photoSize",
              "nilable": false
            },
            {
              "name": "is_installed",
              "type": "Bool",
              "description": "True, if the sticker set has been installed by current user @is_archived True, if the sticker set has been archived. A sticker set can't be installed and archived simultaneously",
              "nilable": false
            },
            {
              "name": "is_archived",
              "type": "Bool",
              "nilable": false
            },
            {
              "name": "is_official",
              "type": "Bool",
              "description": "True, if the sticker set is official @is_animated True, is the stickers in the set are animated @is_masks True, if the stickers in the set are masks @is_viewed True for already viewed trending sticker sets",
              "nilable": false
            },
            {
              "name": "is_animated",
              "type": "Bool",
              "nilable": false
            },
            {
              "name": "is_masks",
              "type": "Bool",
              "nilable": false
            },
            {
              "name": "is_viewed",
              "type": "Bool",
              "nilable": false
            },
            {
              "name": "size",
              "type": "int32",
              "description": "Total number of stickers in the set @covers Contains up to the first 5 stickers from the set, depending on the context. If the client needs more stickers the full set should be requested",
              "nilable": false
            },
            {
              "name": "covers",
              "type": "vector<sticker>",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Represents short information about a sticker set",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "stickerSets",
          "properties": [
            {
              "name": "total_count",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "sets",
              "type": "vector<stickerSetInfo>",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Represents a list of sticker sets @total_count Approximate total number of sticker sets found @sets List of sticker sets",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "callProtocol",
          "properties": [
            {
              "name": "udp_p2p",
              "type": "Bool",
              "nilable": false
            },
            {
              "name": "udp_reflector",
              "type": "Bool",
              "nilable": false
            },
            {
              "name": "min_layer",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "max_layer",
              "type": "int32",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Specifies the supported call protocols @udp_p2p True, if UDP peer-to-peer connections are supported @udp_reflector True, if connection through UDP reflectors is supported @min_layer Minimum supported API layer; use 65 @max_layer Maximum supported API layer; use 65",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "callConnection",
          "properties": [
            {
              "name": "id",
              "type": "int64",
              "nilable": false
            },
            {
              "name": "ip",
              "type": "string",
              "nilable": false
            },
            {
              "name": "ipv6",
              "type": "string",
              "nilable": false
            },
            {
              "name": "port",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "peer_tag",
              "type": "bytes",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Describes the address of UDP reflectors @id Reflector identifier @ip IPv4 reflector address @ipv6 IPv6 reflector address @port Reflector port number @peer_tag Connection peer tag",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "callId",
          "properties": [
            {
              "name": "id",
              "type": "int32",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Contains the call identifier @id Call identifier",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "call",
          "properties": [
            {
              "name": "id",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "user_id",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "is_outgoing",
              "type": "Bool",
              "nilable": false
            },
            {
              "name": "state",
              "type": "CallState",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Describes a call @id Call identifier, not persistent @user_id Peer user identifier @is_outgoing True, if the call is outgoing @state Call state",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "phoneNumberAuthenticationSettings",
          "properties": [
            {
              "name": "allow_flash_call",
              "type": "Bool",
              "description": "Pass true if the authentication code may be sent via flash call to the specified phone number",
              "nilable": false
            },
            {
              "name": "is_current_phone_number",
              "type": "Bool",
              "description": "Pass true if the authenticated phone number is used on the current device",
              "nilable": false
            },
            {
              "name": "allow_sms_retriever_api",
              "type": "Bool",
              "description": "For official applications only. True, if the app can use Android SMS Retriever API (requires Google Play Services >= 10.2) to automatically receive the authentication code from the SMS. See https://developers.google.com/identity/sms-retriever/ for more details",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Contains settings for the authentication of the user's phone number",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "animations",
          "properties": [
            {
              "name": "animations",
              "type": "vector<animation>",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Represents a list of animations @animations List of animations",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "importedContacts",
          "properties": [
            {
              "name": "user_ids",
              "type": "vector<int32>",
              "nilable": false
            },
            {
              "name": "importer_count",
              "type": "vector<int32>",
              "description": "The number of users that imported the corresponding contact; 0 for already registered users or if unavailable",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Represents the result of an ImportContacts request @user_ids User identifiers of the imported contacts in the same order as they were specified in the request; 0 if the contact is not yet a registered user",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "httpUrl",
          "properties": [
            {
              "name": "url",
              "type": "string",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Contains an HTTP URL @url The URL",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "inlineQueryResults",
          "properties": [
            {
              "name": "inline_query_id",
              "type": "int64",
              "nilable": false
            },
            {
              "name": "next_offset",
              "type": "string",
              "nilable": false
            },
            {
              "name": "results",
              "type": "vector<InlineQueryResult>",
              "nilable": false
            },
            {
              "name": "switch_pm_text",
              "type": "string",
              "description": "If non-empty, this text should be shown on the button, which opens a private chat with the bot and sends the bot a start message with the switch_pm_parameter @switch_pm_parameter Parameter for the bot start message",
              "nilable": false
            },
            {
              "name": "switch_pm_parameter",
              "type": "string",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Represents the results of the inline query. Use sendInlineQueryResultMessage to send the result of the query @inline_query_id Unique identifier of the inline query @next_offset The offset for the next request. If empty, there are no more results @results Results of the query",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "callbackQueryAnswer",
          "properties": [
            {
              "name": "text",
              "type": "string",
              "nilable": false
            },
            {
              "name": "show_alert",
              "type": "Bool",
              "nilable": false
            },
            {
              "name": "url",
              "type": "string",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Contains a bot's answer to a callback query @text Text of the answer @show_alert True, if an alert should be shown to the user instead of a toast notification @url URL to be opened",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "customRequestResult",
          "properties": [
            {
              "name": "result",
              "type": "string",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Contains the result of a custom request @result A JSON-serialized result",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "gameHighScore",
          "properties": [
            {
              "name": "position",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "user_id",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "score",
              "type": "int32",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Contains one row of the game high score table @position Position in the high score table @user_id User identifier @score User score",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "gameHighScores",
          "properties": [
            {
              "name": "scores",
              "type": "vector<gameHighScore>",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Contains a list of game high scores @scores A list of game high scores",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "tonLiteServerResponse",
          "properties": [
            {
              "name": "response",
              "type": "bytes",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Contains the response of a request to TON lite server @response The response",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "tonWalletPasswordSalt",
          "properties": [
            {
              "name": "salt",
              "type": "bytes",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Contains the salt to be used with locally stored password to access a local TON-based wallet @salt The salt",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "chatEvent",
          "properties": [
            {
              "name": "id",
              "type": "int64",
              "nilable": false
            },
            {
              "name": "date",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "user_id",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "action",
              "type": "ChatEventAction",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Represents a chat event @id Chat event identifier @date Point in time (Unix timestamp) when the event happened @user_id Identifier of the user who performed the action that triggered the event @action Action performed by the user",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "chatEvents",
          "properties": [
            {
              "name": "events",
              "type": "vector<chatEvent>",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Contains a list of chat events @events List of events",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "chatEventLogFilters",
          "properties": [
            {
              "name": "message_edits",
              "type": "Bool",
              "description": "True, if message edits should be returned",
              "nilable": false
            },
            {
              "name": "message_deletions",
              "type": "Bool",
              "description": "True, if message deletions should be returned",
              "nilable": false
            },
            {
              "name": "message_pins",
              "type": "Bool",
              "description": "True, if pin/unpin events should be returned",
              "nilable": false
            },
            {
              "name": "member_joins",
              "type": "Bool",
              "description": "True, if members joining events should be returned",
              "nilable": false
            },
            {
              "name": "member_leaves",
              "type": "Bool",
              "description": "True, if members leaving events should be returned",
              "nilable": false
            },
            {
              "name": "member_invites",
              "type": "Bool",
              "description": "True, if invited member events should be returned",
              "nilable": false
            },
            {
              "name": "member_promotions",
              "type": "Bool",
              "description": "True, if member promotion/demotion events should be returned",
              "nilable": false
            },
            {
              "name": "member_restrictions",
              "type": "Bool",
              "description": "True, if member restricted/unrestricted/banned/unbanned events should be returned",
              "nilable": false
            },
            {
              "name": "info_changes",
              "type": "Bool",
              "description": "True, if changes in chat information should be returned",
              "nilable": false
            },
            {
              "name": "setting_changes",
              "type": "Bool",
              "description": "True, if changes in chat settings should be returned",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Represents a set of filters used to obtain a chat event log",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "languagePackString",
          "properties": [
            {
              "name": "key",
              "type": "string",
              "nilable": false
            },
            {
              "name": "value",
              "type": "LanguagePackStringValue",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Represents one language pack string @key String key @value String value",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "languagePackStrings",
          "properties": [
            {
              "name": "strings",
              "type": "vector<languagePackString>",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Contains a list of language pack strings @strings A list of language pack strings",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "languagePackInfo",
          "properties": [
            {
              "name": "id",
              "type": "string",
              "nilable": false
            },
            {
              "name": "base_language_pack_id",
              "type": "string",
              "description": "Identifier of a base language pack; may be empty. If a string is missed in the language pack, then it should be fetched from base language pack. Unsupported in custom language packs",
              "nilable": true
            },
            {
              "name": "name",
              "type": "string",
              "description": "Language name @native_name Name of the language in that language",
              "nilable": false
            },
            {
              "name": "native_name",
              "type": "string",
              "nilable": false
            },
            {
              "name": "plural_code",
              "type": "string",
              "description": "A language code to be used to apply plural forms. See https://www.unicode.org/cldr/charts/latest/supplemental/language_plural_rules.html for more info",
              "nilable": false
            },
            {
              "name": "is_official",
              "type": "Bool",
              "description": "True, if the language pack is official @is_rtl True, if the language pack strings are RTL @is_beta True, if the language pack is a beta language pack",
              "nilable": false
            },
            {
              "name": "is_rtl",
              "type": "Bool",
              "nilable": false
            },
            {
              "name": "is_beta",
              "type": "Bool",
              "nilable": false
            },
            {
              "name": "is_installed",
              "type": "Bool",
              "description": "True, if the language pack is installed by the current user",
              "nilable": false
            },
            {
              "name": "total_string_count",
              "type": "int32",
              "description": "Total number of non-deleted strings from the language pack @translated_string_count Total number of translated strings from the language pack",
              "nilable": false
            },
            {
              "name": "translated_string_count",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "local_string_count",
              "type": "int32",
              "description": "Total number of non-deleted strings from the language pack available locally @translation_url Link to language translation interface; empty for custom local language packs",
              "nilable": true
            },
            {
              "name": "translation_url",
              "type": "string",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Contains information about a language pack @id Unique language pack identifier",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "localizationTargetInfo",
          "properties": [
            {
              "name": "language_packs",
              "type": "vector<languagePackInfo>",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Contains information about the current localization target @language_packs List of available language packs for this application",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "pushReceiverId",
          "properties": [
            {
              "name": "id",
              "type": "int64",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Contains a globally unique push receiver identifier, which can be used to identify which account has received a push notification @id The globally unique identifier of push notification subscription",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "background",
          "properties": [
            {
              "name": "id",
              "type": "int64",
              "description": "Unique background identifier",
              "nilable": false
            },
            {
              "name": "is_default",
              "type": "Bool",
              "description": "True, if this is one of default backgrounds",
              "nilable": false
            },
            {
              "name": "is_dark",
              "type": "Bool",
              "description": "True, if the background is dark and is recommended to be used with dark theme",
              "nilable": false
            },
            {
              "name": "name",
              "type": "string",
              "description": "Unique background name",
              "nilable": false
            },
            {
              "name": "document",
              "type": "document",
              "description": "Document with the background; may be null. Null only for solid backgrounds",
              "nilable": true
            },
            {
              "name": "type",
              "type": "BackgroundType",
              "description": "Type of the background",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Describes a chat background",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "backgrounds",
          "properties": [
            {
              "name": "backgrounds",
              "type": "vector<background>",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Contains a list of backgrounds @backgrounds A list of backgrounds",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "hashtags",
          "properties": [
            {
              "name": "hashtags",
              "type": "vector<string>",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Contains a list of hashtags @hashtags A list of hashtags",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "notification",
          "properties": [
            {
              "name": "id",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "date",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "is_silent",
              "type": "Bool",
              "description": "True, if the notification was initially silent @type Notification type",
              "nilable": false
            },
            {
              "name": "type",
              "type": "NotificationType",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Contains information about a notification @id Unique persistent identifier of this notification @date Notification date",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "notificationGroup",
          "properties": [
            {
              "name": "id",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "type",
              "type": "NotificationGroupType",
              "nilable": false
            },
            {
              "name": "chat_id",
              "type": "int53",
              "description": "Identifier of a chat to which all notifications in the group belong",
              "nilable": false
            },
            {
              "name": "total_count",
              "type": "int32",
              "description": "Total number of active notifications in the group @notifications The list of active notifications",
              "nilable": false
            },
            {
              "name": "notifications",
              "type": "vector<notification>",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Describes a group of notifications @id Unique persistent auto-incremented from 1 identifier of the notification group @type Type of the group",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "jsonObjectMember",
          "properties": [
            {
              "name": "key",
              "type": "string",
              "nilable": false
            },
            {
              "name": "value",
              "type": "JsonValue",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Represents one member of a JSON object @key Member's key @value Member's value",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "userPrivacySettingRules",
          "properties": [
            {
              "name": "rules",
              "type": "vector<UserPrivacySettingRule>",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "A list of privacy rules. Rules are matched in the specified order. The first matched rule defines the privacy setting for a given user. If no rule matches, the action is not allowed @rules A list of rules",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "accountTtl",
          "properties": [
            {
              "name": "days",
              "type": "int32",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Contains information about the period of inactivity after which the current user's account will automatically be deleted @days Number of days of inactivity before the account will be flagged for deletion; should range from 30-366 days",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "session",
          "properties": [
            {
              "name": "id",
              "type": "int64",
              "description": "Session identifier @is_current True, if this session is the current session",
              "nilable": false
            },
            {
              "name": "is_current",
              "type": "Bool",
              "nilable": false
            },
            {
              "name": "is_password_pending",
              "type": "Bool",
              "description": "True, if a password is needed to complete authorization of the session",
              "nilable": false
            },
            {
              "name": "api_id",
              "type": "int32",
              "description": "Telegram API identifier, as provided by the application @application_name Name of the application, as provided by the application",
              "nilable": false
            },
            {
              "name": "application_name",
              "type": "string",
              "nilable": false
            },
            {
              "name": "application_version",
              "type": "string",
              "description": "The version of the application, as provided by the application @is_official_application True, if the application is an official application or uses the api_id of an official application",
              "nilable": false
            },
            {
              "name": "is_official_application",
              "type": "Bool",
              "nilable": false
            },
            {
              "name": "device_model",
              "type": "string",
              "description": "Model of the device the application has been run or is running on, as provided by the application @platform Operating system the application has been run or is running on, as provided by the application",
              "nilable": false
            },
            {
              "name": "platform",
              "type": "string",
              "nilable": false
            },
            {
              "name": "system_version",
              "type": "string",
              "description": "Version of the operating system the application has been run or is running on, as provided by the application @log_in_date Point in time (Unix timestamp) when the user has logged in",
              "nilable": false
            },
            {
              "name": "log_in_date",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "last_active_date",
              "type": "int32",
              "description": "Point in time (Unix timestamp) when the session was last used @ip IP address from which the session was created, in human-readable format",
              "nilable": false
            },
            {
              "name": "ip",
              "type": "string",
              "nilable": false
            },
            {
              "name": "country",
              "type": "string",
              "description": "A two-letter country code for the country from which the session was created, based on the IP address @region Region code from which the session was created, based on the IP address",
              "nilable": false
            },
            {
              "name": "region",
              "type": "string",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Contains information about one session in a Telegram application used by the current user. Sessions should be shown to the user in the returned order",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "sessions",
          "properties": [
            {
              "name": "sessions",
              "type": "vector<session>",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Contains a list of sessions @sessions List of sessions",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "connectedWebsite",
          "properties": [
            {
              "name": "id",
              "type": "int64",
              "description": "Website identifier",
              "nilable": false
            },
            {
              "name": "domain_name",
              "type": "string",
              "description": "The domain name of the website",
              "nilable": false
            },
            {
              "name": "bot_user_id",
              "type": "int32",
              "description": "User identifier of a bot linked with the website",
              "nilable": false
            },
            {
              "name": "browser",
              "type": "string",
              "description": "The version of a browser used to log in",
              "nilable": false
            },
            {
              "name": "platform",
              "type": "string",
              "description": "Operating system the browser is running on",
              "nilable": false
            },
            {
              "name": "log_in_date",
              "type": "int32",
              "description": "Point in time (Unix timestamp) when the user was logged in",
              "nilable": false
            },
            {
              "name": "last_active_date",
              "type": "int32",
              "description": "Point in time (Unix timestamp) when obtained authorization was last used",
              "nilable": false
            },
            {
              "name": "ip",
              "type": "string",
              "description": "IP address from which the user was logged in, in human-readable format",
              "nilable": false
            },
            {
              "name": "location",
              "type": "string",
              "description": "Human-readable description of a country and a region, from which the user was logged in, based on the IP address",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Contains information about one website the current user is logged in with Telegram",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "connectedWebsites",
          "properties": [
            {
              "name": "websites",
              "type": "vector<connectedWebsite>",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Contains a list of websites the current user is logged in with Telegram @websites List of connected websites",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "chatReportSpamState",
          "properties": [
            {
              "name": "can_report_spam",
              "type": "Bool",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Contains information about the availability of the \"Report spam\" action for a chat @can_report_spam True, if a prompt with the \"Report spam\" action should be shown to the user",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "publicMessageLink",
          "properties": [
            {
              "name": "link",
              "type": "string",
              "nilable": false
            },
            {
              "name": "html",
              "type": "string",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Contains a public HTTPS link to a message in a public supergroup or channel with a username @link Message link @html HTML-code for embedding the message",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "messageLinkInfo",
          "properties": [
            {
              "name": "is_public",
              "type": "Bool",
              "description": "True, if the link is a public link for a message in a chat",
              "nilable": false
            },
            {
              "name": "chat_id",
              "type": "int53",
              "description": "If found, identifier of the chat to which the message belongs, 0 otherwise",
              "nilable": false
            },
            {
              "name": "message",
              "type": "message",
              "description": "If found, the linked message; may be null",
              "nilable": true
            },
            {
              "name": "for_album",
              "type": "Bool",
              "description": "True, if the whole media album to which the message belongs is linked",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Contains information about a link to a message in a chat",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "filePart",
          "properties": [
            {
              "name": "data",
              "type": "bytes",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Contains a part of a file @data File bytes",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "storageStatisticsByFileType",
          "properties": [
            {
              "name": "file_type",
              "type": "FileType",
              "nilable": false
            },
            {
              "name": "size",
              "type": "int53",
              "nilable": false
            },
            {
              "name": "count",
              "type": "int32",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Contains the storage usage statistics for a specific file type @file_type File type @size Total size of the files @count Total number of files",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "storageStatisticsByChat",
          "properties": [
            {
              "name": "chat_id",
              "type": "int53",
              "nilable": false
            },
            {
              "name": "size",
              "type": "int53",
              "nilable": false
            },
            {
              "name": "count",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "by_file_type",
              "type": "vector<storageStatisticsByFileType>",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Contains the storage usage statistics for a specific chat @chat_id Chat identifier; 0 if none @size Total size of the files in the chat @count Total number of files in the chat @by_file_type Statistics split by file types",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "storageStatistics",
          "properties": [
            {
              "name": "size",
              "type": "int53",
              "nilable": false
            },
            {
              "name": "count",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "by_chat",
              "type": "vector<storageStatisticsByChat>",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Contains the exact storage usage statistics split by chats and file type @size Total size of files @count Total number of files @by_chat Statistics split by chats",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "storageStatisticsFast",
          "properties": [
            {
              "name": "files_size",
              "type": "int53",
              "nilable": false
            },
            {
              "name": "file_count",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "database_size",
              "type": "int53",
              "description": "Size of the database @language_pack_database_size Size of the language pack database @log_size Size of the TDLib internal log",
              "nilable": false
            },
            {
              "name": "language_pack_database_size",
              "type": "int53",
              "nilable": false
            },
            {
              "name": "log_size",
              "type": "int53",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Contains approximate storage usage statistics, excluding files of unknown file type @files_size Approximate total size of files @file_count Approximate number of files",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "databaseStatistics",
          "properties": [
            {
              "name": "statistics",
              "type": "string",
              "description": "Database statistics in an unspecified human-readable format",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Contains database statistics",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "networkStatistics",
          "properties": [
            {
              "name": "since_date",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "entries",
              "type": "vector<NetworkStatisticsEntry>",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "A full list of available network statistic entries @since_date Point in time (Unix timestamp) when the app began collecting statistics @entries Network statistics entries",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "autoDownloadSettings",
          "properties": [
            {
              "name": "is_auto_download_enabled",
              "type": "Bool",
              "description": "True, if the auto-download is enabled",
              "nilable": false
            },
            {
              "name": "max_photo_file_size",
              "type": "int32",
              "description": "Maximum size of a photo file to be auto-downloaded",
              "nilable": false
            },
            {
              "name": "max_video_file_size",
              "type": "int32",
              "description": "Maximum size of a video file to be auto-downloaded",
              "nilable": false
            },
            {
              "name": "max_other_file_size",
              "type": "int32",
              "description": "Maximum size of other file types to be auto-downloaded",
              "nilable": false
            },
            {
              "name": "preload_large_videos",
              "type": "Bool",
              "description": "True, if the beginning of videos needs to be preloaded for instant playback",
              "nilable": false
            },
            {
              "name": "preload_next_audio",
              "type": "Bool",
              "description": "True, if the next audio track needs to be preloaded while the user is listening to an audio file",
              "nilable": false
            },
            {
              "name": "use_less_data_for_calls",
              "type": "Bool",
              "description": "True, if \"use less data for calls\" option needs to be enabled",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Contains auto-download settings",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "autoDownloadSettingsPresets",
          "properties": [
            {
              "name": "low",
              "type": "autoDownloadSettings",
              "description": "Preset with lowest settings; supposed to be used by default when roaming",
              "nilable": false
            },
            {
              "name": "medium",
              "type": "autoDownloadSettings",
              "description": "Preset with medium settings; supposed to be used by default when using mobile data",
              "nilable": false
            },
            {
              "name": "high",
              "type": "autoDownloadSettings",
              "description": "Preset with highest settings; supposed to be used by default when connected on Wi-Fi",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Contains auto-download settings presets for the user",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "tMeUrl",
          "properties": [
            {
              "name": "url",
              "type": "string",
              "nilable": false
            },
            {
              "name": "type",
              "type": "TMeUrlType",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Represents a URL linking to an internal Telegram entity @url URL @type Type of the URL",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "tMeUrls",
          "properties": [
            {
              "name": "urls",
              "type": "vector<tMeUrl>",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Contains a list of t.me URLs @urls List of URLs",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "count",
          "properties": [
            {
              "name": "count",
              "type": "int32",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Contains a counter @count Count",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "text",
          "properties": [
            {
              "name": "text",
              "type": "string",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Contains some text @text Text",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "seconds",
          "properties": [
            {
              "name": "seconds",
              "type": "double",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Contains a value representing a number of seconds @seconds Number of seconds",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "deepLinkInfo",
          "properties": [
            {
              "name": "text",
              "type": "formattedText",
              "nilable": false
            },
            {
              "name": "need_update_application",
              "type": "Bool",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Contains information about a tg:// deep link @text Text to be shown to the user @need_update_application True, if user should be asked to update the application",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "proxy",
          "properties": [
            {
              "name": "id",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "server",
              "type": "string",
              "nilable": false
            },
            {
              "name": "port",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "last_used_date",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "is_enabled",
              "type": "Bool",
              "nilable": false
            },
            {
              "name": "type",
              "type": "ProxyType",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Contains information about a proxy server @id Unique identifier of the proxy @server Proxy server IP address @port Proxy server port @last_used_date Point in time (Unix timestamp) when the proxy was last used; 0 if never @is_enabled True, if the proxy is enabled now @type Type of the proxy",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "proxies",
          "properties": [
            {
              "name": "proxies",
              "type": "vector<proxy>",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Represents a list of proxy servers @proxies List of proxy servers",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "inputSticker",
          "properties": [
            {
              "name": "png_sticker",
              "type": "InputFile",
              "nilable": false
            },
            {
              "name": "emojis",
              "type": "string",
              "nilable": false
            },
            {
              "name": "mask_position",
              "type": "maskPosition",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Describes a sticker that should be added to a sticker set @png_sticker PNG image with the sticker; must be up to 512 kB in size and fit in a 512x512 square @emojis Emoji corresponding to the sticker @mask_position For masks, position where the mask should be placed; may be null",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "updates",
          "properties": [
            {
              "name": "updates",
              "type": "vector<Update>",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Contains a list of updates @updates List of updates",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "logVerbosityLevel",
          "properties": [
            {
              "name": "verbosity_level",
              "type": "int32",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Contains a TDLib internal log verbosity level @verbosity_level Log verbosity level",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "logTags",
          "properties": [
            {
              "name": "tags",
              "type": "vector<string>",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "Contains a list of available TDLib internal log tags @tags List of log tags",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "testInt",
          "properties": [
            {
              "name": "value",
              "type": "int32",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "A simple object containing a number; for testing only @value Number",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "testString",
          "properties": [
            {
              "name": "value",
              "type": "string",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "A simple object containing a string; for testing only @value String",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "testBytes",
          "properties": [
            {
              "name": "value",
              "type": "bytes",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "A simple object containing a sequence of bytes; for testing only @value Bytes",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "testVectorInt",
          "properties": [
            {
              "name": "value",
              "type": "vector<int32>",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "A simple object containing a vector of numbers; for testing only @value Vector of numbers",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "testVectorIntObject",
          "properties": [
            {
              "name": "value",
              "type": "vector<testInt>",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "A simple object containing a vector of objects that hold a number; for testing only @value Vector of objects",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "testVectorString",
          "properties": [
            {
              "name": "value",
              "type": "vector<string>",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "A simple object containing a vector of strings; for testing only @value Vector of strings",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "testVectorStringObject",
          "properties": [
            {
              "name": "value",
              "type": "vector<testString>",
              "nilable": false
            }
          ],
          "type": "Base",
          "description": "A simple object containing a vector of objects that hold a string; for testing only @value Vector of objects",
          "children": []
        }
      ]
    },
    {
      "function": false,
      "is_abstract": true,
      "name": "AuthenticationCodeType",
      "properties": [],
      "type": "Base",
      "description": "Provides information about the method by which an authentication code is delivered to the user",
      "children": [
        {
          "function": false,
          "is_abstract": false,
          "name": "authenticationCodeTypeTelegramMessage",
          "properties": [
            {
              "name": "length",
              "type": "int32",
              "nilable": false
            }
          ],
          "type": "AuthenticationCodeType",
          "description": "An authentication code is delivered via a private Telegram message, which can be viewed in another client @length Length of the code",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "authenticationCodeTypeSms",
          "properties": [
            {
              "name": "length",
              "type": "int32",
              "nilable": false
            }
          ],
          "type": "AuthenticationCodeType",
          "description": "An authentication code is delivered via an SMS message to the specified phone number @length Length of the code",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "authenticationCodeTypeCall",
          "properties": [
            {
              "name": "length",
              "type": "int32",
              "nilable": false
            }
          ],
          "type": "AuthenticationCodeType",
          "description": "An authentication code is delivered via a phone call to the specified phone number @length Length of the code",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "authenticationCodeTypeFlashCall",
          "properties": [
            {
              "name": "pattern",
              "type": "string",
              "nilable": false
            }
          ],
          "type": "AuthenticationCodeType",
          "description": "An authentication code is delivered by an immediately cancelled call to the specified phone number. The number from which the call was made is the code @pattern Pattern of the phone number from which the call will be made",
          "children": []
        }
      ]
    },
    {
      "function": false,
      "is_abstract": true,
      "name": "AuthorizationState",
      "properties": [],
      "type": "Base",
      "description": "Represents the current authorization state of the client",
      "children": [
        {
          "function": false,
          "is_abstract": false,
          "name": "authorizationStateWaitTdlibParameters",
          "properties": [],
          "type": "AuthorizationState",
          "description": "TDLib needs TdlibParameters for initialization",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "authorizationStateWaitEncryptionKey",
          "properties": [
            {
              "name": "is_encrypted",
              "type": "Bool",
              "nilable": false
            }
          ],
          "type": "AuthorizationState",
          "description": "TDLib needs an encryption key to decrypt the local database @is_encrypted True, if the database is currently encrypted",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "authorizationStateWaitPhoneNumber",
          "properties": [],
          "type": "AuthorizationState",
          "description": "TDLib needs the user's phone number to authorize",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "authorizationStateWaitCode",
          "properties": [
            {
              "name": "code_info",
              "type": "authenticationCodeInfo",
              "nilable": false
            }
          ],
          "type": "AuthorizationState",
          "description": "TDLib needs the user's authentication code to authorize @code_info Information about the authorization code that was sent",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "authorizationStateWaitRegistration",
          "properties": [
            {
              "name": "terms_of_service",
              "type": "termsOfService",
              "nilable": false
            }
          ],
          "type": "AuthorizationState",
          "description": "The user is unregistered and need to accept terms of service and enter their first name and last name to finish registration @terms_of_service Telegram terms of service",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "authorizationStateWaitPassword",
          "properties": [
            {
              "name": "password_hint",
              "type": "string",
              "nilable": false
            },
            {
              "name": "has_recovery_email_address",
              "type": "Bool",
              "nilable": false
            },
            {
              "name": "recovery_email_address_pattern",
              "type": "string",
              "description": "Pattern of the email address to which the recovery email was sent; empty until a recovery email has been sent",
              "nilable": true
            }
          ],
          "type": "AuthorizationState",
          "description": "The user has been authorized, but needs to enter a password to start using the application @password_hint Hint for the password; may be empty @has_recovery_email_address True, if a recovery email address has been set up",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "authorizationStateReady",
          "properties": [],
          "type": "AuthorizationState",
          "description": "The user has been successfully authorized. TDLib is now ready to answer queries",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "authorizationStateLoggingOut",
          "properties": [],
          "type": "AuthorizationState",
          "description": "The user is currently logging out",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "authorizationStateClosing",
          "properties": [],
          "type": "AuthorizationState",
          "description": "TDLib is closing, all subsequent queries will be answered with the error 500. Note that closing TDLib can take a while. All resources will be freed only after authorizationStateClosed has been received",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "authorizationStateClosed",
          "properties": [],
          "type": "AuthorizationState",
          "description": "TDLib client is in its final state. All databases are closed and all resources are released. No other updates will be received after this. All queries will be responded to",
          "children": []
        }
      ]
    },
    {
      "function": false,
      "is_abstract": true,
      "name": "InputFile",
      "properties": [],
      "type": "Base",
      "description": "Points to a file",
      "children": [
        {
          "function": false,
          "is_abstract": false,
          "name": "inputFileId",
          "properties": [
            {
              "name": "id",
              "type": "int32",
              "nilable": false
            }
          ],
          "type": "InputFile",
          "description": "A file defined by its unique ID @id Unique file identifier",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "inputFileRemote",
          "properties": [
            {
              "name": "id",
              "type": "string",
              "description": "Remote file identifier",
              "nilable": false
            }
          ],
          "type": "InputFile",
          "description": "A file defined by its remote ID. The remote ID is guaranteed to work only if it was received after TDLib launch and the corresponding file is still accessible to the user.",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "inputFileLocal",
          "properties": [
            {
              "name": "path",
              "type": "string",
              "nilable": false
            }
          ],
          "type": "InputFile",
          "description": "A file defined by a local path @path Local path to the file",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "inputFileGenerated",
          "properties": [
            {
              "name": "original_path",
              "type": "string",
              "nilable": false
            },
            {
              "name": "conversion",
              "type": "string",
              "description": "String specifying the conversion applied to the original file; should be persistent across application restarts. Conversions beginning with '#' are reserved for internal TDLib usage",
              "nilable": false
            },
            {
              "name": "expected_size",
              "type": "int32",
              "description": "Expected size of the generated file; 0 if unknown",
              "nilable": false
            }
          ],
          "type": "InputFile",
          "description": "A file generated by the client @original_path Local path to a file from which the file is generated; may be empty if there is no such file",
          "children": []
        }
      ]
    },
    {
      "function": false,
      "is_abstract": true,
      "name": "MaskPoint",
      "properties": [],
      "type": "Base",
      "description": "Part of the face, relative to which a mask should be placed",
      "children": [
        {
          "function": false,
          "is_abstract": false,
          "name": "maskPointForehead",
          "properties": [],
          "type": "MaskPoint",
          "description": "A mask should be placed relatively to the forehead",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "maskPointEyes",
          "properties": [],
          "type": "MaskPoint",
          "description": "A mask should be placed relatively to the eyes",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "maskPointMouth",
          "properties": [],
          "type": "MaskPoint",
          "description": "A mask should be placed relatively to the mouth",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "maskPointChin",
          "properties": [],
          "type": "MaskPoint",
          "description": "A mask should be placed relatively to the chin",
          "children": []
        }
      ]
    },
    {
      "function": false,
      "is_abstract": true,
      "name": "LinkState",
      "properties": [],
      "type": "Base",
      "description": "Represents the relationship between user A and user B. For incoming_link, user A is the current user; for outgoing_link, user B is the current user",
      "children": [
        {
          "function": false,
          "is_abstract": false,
          "name": "linkStateNone",
          "properties": [],
          "type": "LinkState",
          "description": "The phone number of user A is not known to user B",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "linkStateKnowsPhoneNumber",
          "properties": [],
          "type": "LinkState",
          "description": "The phone number of user A is known but that number has not been saved to the contact list of user B",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "linkStateIsContact",
          "properties": [],
          "type": "LinkState",
          "description": "The phone number of user A has been saved to the contact list of user B",
          "children": []
        }
      ]
    },
    {
      "function": false,
      "is_abstract": true,
      "name": "UserType",
      "properties": [],
      "type": "Base",
      "description": "Represents the type of the user. The following types are possible: regular users, deleted users and bots",
      "children": [
        {
          "function": false,
          "is_abstract": false,
          "name": "userTypeRegular",
          "properties": [],
          "type": "UserType",
          "description": "A regular user",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "userTypeDeleted",
          "properties": [],
          "type": "UserType",
          "description": "A deleted user or deleted bot. No information on the user besides the user_id is available. It is not possible to perform any active actions on this type of user",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "userTypeBot",
          "properties": [
            {
              "name": "can_join_groups",
              "type": "Bool",
              "nilable": false
            },
            {
              "name": "can_read_all_group_messages",
              "type": "Bool",
              "description": "True, if the bot can read all messages in basic group or supergroup chats and not just those addressed to the bot. In private and channel chats a bot can always read all messages",
              "nilable": false
            },
            {
              "name": "is_inline",
              "type": "Bool",
              "description": "True, if the bot supports inline queries @inline_query_placeholder Placeholder for inline queries (displayed on the client input field) @need_location True, if the location of the user should be sent with every inline query to this bot",
              "nilable": false
            },
            {
              "name": "inline_query_placeholder",
              "type": "string",
              "nilable": false
            },
            {
              "name": "need_location",
              "type": "Bool",
              "nilable": false
            }
          ],
          "type": "UserType",
          "description": "A bot (see https://core.telegram.org/bots) @can_join_groups True, if the bot can be invited to basic group and supergroup chats",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "userTypeUnknown",
          "properties": [],
          "type": "UserType",
          "description": "No information on the user besides the user_id is available, yet this user has not been deleted. This object is extremely rare and must be handled like a deleted user. It is not possible to perform any actions on users of this type",
          "children": []
        }
      ]
    },
    {
      "function": false,
      "is_abstract": true,
      "name": "ChatMemberStatus",
      "properties": [],
      "type": "Base",
      "description": "Provides information about the status of a member in a chat",
      "children": [
        {
          "function": false,
          "is_abstract": false,
          "name": "chatMemberStatusCreator",
          "properties": [
            {
              "name": "is_member",
              "type": "Bool",
              "nilable": false
            }
          ],
          "type": "ChatMemberStatus",
          "description": "The user is the creator of a chat and has all the administrator privileges @is_member True, if the user is a member of the chat",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "chatMemberStatusAdministrator",
          "properties": [
            {
              "name": "can_be_edited",
              "type": "Bool",
              "description": "True, if the current user can edit the administrator privileges for the called user",
              "nilable": false
            },
            {
              "name": "can_change_info",
              "type": "Bool",
              "description": "True, if the administrator can change the chat title, photo, and other settings",
              "nilable": false
            },
            {
              "name": "can_post_messages",
              "type": "Bool",
              "description": "True, if the administrator can create channel posts; applicable to channels only",
              "nilable": false
            },
            {
              "name": "can_edit_messages",
              "type": "Bool",
              "description": "True, if the administrator can edit messages of other users and pin messages; applicable to channels only",
              "nilable": false
            },
            {
              "name": "can_delete_messages",
              "type": "Bool",
              "description": "True, if the administrator can delete messages of other users",
              "nilable": false
            },
            {
              "name": "can_invite_users",
              "type": "Bool",
              "description": "True, if the administrator can invite new users to the chat",
              "nilable": false
            },
            {
              "name": "can_restrict_members",
              "type": "Bool",
              "description": "True, if the administrator can restrict, ban, or unban chat members",
              "nilable": false
            },
            {
              "name": "can_pin_messages",
              "type": "Bool",
              "description": "True, if the administrator can pin messages; applicable to groups only",
              "nilable": false
            },
            {
              "name": "can_promote_members",
              "type": "Bool",
              "description": "True, if the administrator can add new administrators with a subset of their own privileges or demote administrators that were directly or indirectly promoted by him",
              "nilable": false
            }
          ],
          "type": "ChatMemberStatus",
          "description": "The user is a member of a chat and has some additional privileges. In basic groups, administrators can edit and delete messages sent by others, add new members, and ban unprivileged members. In supergroups and channels, there are more detailed options for administrator privileges",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "chatMemberStatusMember",
          "properties": [],
          "type": "ChatMemberStatus",
          "description": "The user is a member of a chat, without any additional privileges or restrictions",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "chatMemberStatusRestricted",
          "properties": [
            {
              "name": "is_member",
              "type": "Bool",
              "description": "True, if the user is a member of the chat",
              "nilable": false
            },
            {
              "name": "restricted_until_date",
              "type": "int32",
              "description": "Point in time (Unix timestamp) when restrictions will be lifted from the user; 0 if never. If the user is restricted for more than 366 days or for less than 30 seconds from the current time, the user is considered to be restricted forever",
              "nilable": false
            },
            {
              "name": "permissions",
              "type": "chatPermissions",
              "description": "User permissions in the chat",
              "nilable": false
            }
          ],
          "type": "ChatMemberStatus",
          "description": "The user is under certain restrictions in the chat. Not supported in basic groups and channels",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "chatMemberStatusLeft",
          "properties": [],
          "type": "ChatMemberStatus",
          "description": "The user is not a chat member",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "chatMemberStatusBanned",
          "properties": [
            {
              "name": "banned_until_date",
              "type": "int32",
              "description": "Point in time (Unix timestamp) when the user will be unbanned; 0 if never. If the user is banned for more than 366 days or for less than 30 seconds from the current time, the user is considered to be banned forever",
              "nilable": false
            }
          ],
          "type": "ChatMemberStatus",
          "description": "The user was banned (and hence is not a member of the chat). Implies the user can't return to the chat or view messages",
          "children": []
        }
      ]
    },
    {
      "function": false,
      "is_abstract": true,
      "name": "ChatMembersFilter",
      "properties": [],
      "type": "Base",
      "description": "Specifies the kind of chat members to return in searchChatMembers",
      "children": [
        {
          "function": false,
          "is_abstract": false,
          "name": "chatMembersFilterContacts",
          "properties": [],
          "type": "ChatMembersFilter",
          "description": "Returns contacts of the user",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "chatMembersFilterAdministrators",
          "properties": [],
          "type": "ChatMembersFilter",
          "description": "Returns the creator and administrators",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "chatMembersFilterMembers",
          "properties": [],
          "type": "ChatMembersFilter",
          "description": "Returns all chat members, including restricted chat members",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "chatMembersFilterRestricted",
          "properties": [],
          "type": "ChatMembersFilter",
          "description": "Returns users under certain restrictions in the chat; can be used only by administrators in a supergroup",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "chatMembersFilterBanned",
          "properties": [],
          "type": "ChatMembersFilter",
          "description": "Returns users banned from the chat; can be used only by administrators in a supergroup or in a channel",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "chatMembersFilterBots",
          "properties": [],
          "type": "ChatMembersFilter",
          "description": "Returns bot members of the chat",
          "children": []
        }
      ]
    },
    {
      "function": false,
      "is_abstract": true,
      "name": "SupergroupMembersFilter",
      "properties": [],
      "type": "Base",
      "description": "Specifies the kind of chat members to return in getSupergroupMembers",
      "children": [
        {
          "function": false,
          "is_abstract": false,
          "name": "supergroupMembersFilterRecent",
          "properties": [],
          "type": "SupergroupMembersFilter",
          "description": "Returns recently active users in reverse chronological order",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "supergroupMembersFilterContacts",
          "properties": [
            {
              "name": "query",
              "type": "string",
              "nilable": false
            }
          ],
          "type": "SupergroupMembersFilter",
          "description": "Returns contacts of the user, which are members of the supergroup or channel @query Query to search for",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "supergroupMembersFilterAdministrators",
          "properties": [],
          "type": "SupergroupMembersFilter",
          "description": "Returns the creator and administrators",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "supergroupMembersFilterSearch",
          "properties": [
            {
              "name": "query",
              "type": "string",
              "nilable": false
            }
          ],
          "type": "SupergroupMembersFilter",
          "description": "Used to search for supergroup or channel members via a (string) query @query Query to search for",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "supergroupMembersFilterRestricted",
          "properties": [
            {
              "name": "query",
              "type": "string",
              "nilable": false
            }
          ],
          "type": "SupergroupMembersFilter",
          "description": "Returns restricted supergroup members; can be used only by administrators @query Query to search for",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "supergroupMembersFilterBanned",
          "properties": [
            {
              "name": "query",
              "type": "string",
              "nilable": false
            }
          ],
          "type": "SupergroupMembersFilter",
          "description": "Returns users banned from the supergroup or channel; can be used only by administrators @query Query to search for",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "supergroupMembersFilterBots",
          "properties": [],
          "type": "SupergroupMembersFilter",
          "description": "Returns bot members of the supergroup or channel",
          "children": []
        }
      ]
    },
    {
      "function": false,
      "is_abstract": true,
      "name": "SecretChatState",
      "properties": [],
      "type": "Base",
      "description": "Describes the current secret chat state",
      "children": [
        {
          "function": false,
          "is_abstract": false,
          "name": "secretChatStatePending",
          "properties": [],
          "type": "SecretChatState",
          "description": "The secret chat is not yet created; waiting for the other user to get online",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "secretChatStateReady",
          "properties": [],
          "type": "SecretChatState",
          "description": "The secret chat is ready to use",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "secretChatStateClosed",
          "properties": [],
          "type": "SecretChatState",
          "description": "The secret chat is closed",
          "children": []
        }
      ]
    },
    {
      "function": false,
      "is_abstract": true,
      "name": "MessageForwardOrigin",
      "properties": [],
      "type": "Base",
      "description": "Contains information about the origin of a forwarded message",
      "children": [
        {
          "function": false,
          "is_abstract": false,
          "name": "messageForwardOriginUser",
          "properties": [
            {
              "name": "sender_user_id",
              "type": "int32",
              "nilable": false
            }
          ],
          "type": "MessageForwardOrigin",
          "description": "The message was originally written by a known user @sender_user_id Identifier of the user that originally sent the message",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "messageForwardOriginHiddenUser",
          "properties": [
            {
              "name": "sender_name",
              "type": "string",
              "nilable": false
            }
          ],
          "type": "MessageForwardOrigin",
          "description": "The message was originally written by a user, which is hidden by their privacy settings @sender_name Name of the sender",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "messageForwardOriginChannel",
          "properties": [
            {
              "name": "chat_id",
              "type": "int53",
              "description": "Identifier of the chat from which the message was originally forwarded",
              "nilable": false
            },
            {
              "name": "message_id",
              "type": "int53",
              "description": "Message identifier of the original message; 0 if unknown",
              "nilable": false
            },
            {
              "name": "author_signature",
              "type": "string",
              "description": "Original post author signature",
              "nilable": false
            }
          ],
          "type": "MessageForwardOrigin",
          "description": "The message was originally a post in a channel",
          "children": []
        }
      ]
    },
    {
      "function": false,
      "is_abstract": true,
      "name": "MessageSendingState",
      "properties": [],
      "type": "Base",
      "description": "Contains information about the sending state of the message",
      "children": [
        {
          "function": false,
          "is_abstract": false,
          "name": "messageSendingStatePending",
          "properties": [],
          "type": "MessageSendingState",
          "description": "The message is being sent now, but has not yet been delivered to the server",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "messageSendingStateFailed",
          "properties": [
            {
              "name": "error_code",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "error_message",
              "type": "string",
              "nilable": false
            },
            {
              "name": "can_retry",
              "type": "Bool",
              "description": "True, if the message can be re-sent @retry_after Time left before the message can be re-sent, in seconds. No update is sent when this field changes",
              "nilable": false
            },
            {
              "name": "retry_after",
              "type": "double",
              "nilable": false
            }
          ],
          "type": "MessageSendingState",
          "description": "The message failed to be sent @error_code An error code; 0 if unknown @error_message Error message",
          "children": []
        }
      ]
    },
    {
      "function": false,
      "is_abstract": true,
      "name": "NotificationSettingsScope",
      "properties": [],
      "type": "Base",
      "description": "Describes the types of chats to which notification settings are applied",
      "children": [
        {
          "function": false,
          "is_abstract": false,
          "name": "notificationSettingsScopePrivateChats",
          "properties": [],
          "type": "NotificationSettingsScope",
          "description": "Notification settings applied to all private and secret chats when the corresponding chat setting has a default value",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "notificationSettingsScopeGroupChats",
          "properties": [],
          "type": "NotificationSettingsScope",
          "description": "Notification settings applied to all basic groups and supergroups when the corresponding chat setting has a default value",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "notificationSettingsScopeChannelChats",
          "properties": [],
          "type": "NotificationSettingsScope",
          "description": "Notification settings applied to all channels when the corresponding chat setting has a default value",
          "children": []
        }
      ]
    },
    {
      "function": false,
      "is_abstract": true,
      "name": "ChatType",
      "properties": [],
      "type": "Base",
      "description": "Describes the type of a chat",
      "children": [
        {
          "function": false,
          "is_abstract": false,
          "name": "chatTypePrivate",
          "properties": [
            {
              "name": "user_id",
              "type": "int32",
              "nilable": false
            }
          ],
          "type": "ChatType",
          "description": "An ordinary chat with a user @user_id User identifier",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "chatTypeBasicGroup",
          "properties": [
            {
              "name": "basic_group_id",
              "type": "int32",
              "nilable": false
            }
          ],
          "type": "ChatType",
          "description": "A basic group (i.e., a chat with 0-200 other users) @basic_group_id Basic group identifier",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "chatTypeSupergroup",
          "properties": [
            {
              "name": "supergroup_id",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "is_channel",
              "type": "Bool",
              "nilable": false
            }
          ],
          "type": "ChatType",
          "description": "A supergroup (i.e. a chat with up to GetOption(\"supergroup_max_size\") other users), or channel (with unlimited members) @supergroup_id Supergroup or channel identifier @is_channel True, if the supergroup is a channel",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "chatTypeSecret",
          "properties": [
            {
              "name": "secret_chat_id",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "user_id",
              "type": "int32",
              "nilable": false
            }
          ],
          "type": "ChatType",
          "description": "A secret chat with a user @secret_chat_id Secret chat identifier @user_id User identifier of the secret chat peer",
          "children": []
        }
      ]
    },
    {
      "function": false,
      "is_abstract": true,
      "name": "KeyboardButtonType",
      "properties": [],
      "type": "Base",
      "description": "Describes a keyboard button type",
      "children": [
        {
          "function": false,
          "is_abstract": false,
          "name": "keyboardButtonTypeText",
          "properties": [],
          "type": "KeyboardButtonType",
          "description": "A simple button, with text that should be sent when the button is pressed",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "keyboardButtonTypeRequestPhoneNumber",
          "properties": [],
          "type": "KeyboardButtonType",
          "description": "A button that sends the user's phone number when pressed; available only in private chats",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "keyboardButtonTypeRequestLocation",
          "properties": [],
          "type": "KeyboardButtonType",
          "description": "A button that sends the user's location when pressed; available only in private chats",
          "children": []
        }
      ]
    },
    {
      "function": false,
      "is_abstract": true,
      "name": "InlineKeyboardButtonType",
      "properties": [],
      "type": "Base",
      "description": "Describes the type of an inline keyboard button",
      "children": [
        {
          "function": false,
          "is_abstract": false,
          "name": "inlineKeyboardButtonTypeUrl",
          "properties": [
            {
              "name": "url",
              "type": "string",
              "nilable": false
            }
          ],
          "type": "InlineKeyboardButtonType",
          "description": "A button that opens a specified URL @url HTTP or tg:// URL to open",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "inlineKeyboardButtonTypeLoginUrl",
          "properties": [
            {
              "name": "url",
              "type": "string",
              "nilable": false
            },
            {
              "name": "id",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "forward_text",
              "type": "string",
              "nilable": false
            }
          ],
          "type": "InlineKeyboardButtonType",
          "description": "A button that opens a specified URL and automatically logs in in current user if they allowed to do that @url HTTP URL to open @id Unique button identifier @forward_text If non-empty, new text of the button in forwarded messages",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "inlineKeyboardButtonTypeCallback",
          "properties": [
            {
              "name": "data",
              "type": "bytes",
              "nilable": false
            }
          ],
          "type": "InlineKeyboardButtonType",
          "description": "A button that sends a special callback query to a bot @data Data to be sent to the bot via a callback query",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "inlineKeyboardButtonTypeCallbackGame",
          "properties": [],
          "type": "InlineKeyboardButtonType",
          "description": "A button with a game that sends a special callback query to a bot. This button must be in the first column and row of the keyboard and can be attached only to a message with content of the type messageGame",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "inlineKeyboardButtonTypeSwitchInline",
          "properties": [
            {
              "name": "query",
              "type": "string",
              "nilable": false
            },
            {
              "name": "in_current_chat",
              "type": "Bool",
              "nilable": false
            }
          ],
          "type": "InlineKeyboardButtonType",
          "description": "A button that forces an inline query to the bot to be inserted in the input field @query Inline query to be sent to the bot @in_current_chat True, if the inline query should be sent from the current chat",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "inlineKeyboardButtonTypeBuy",
          "properties": [],
          "type": "InlineKeyboardButtonType",
          "description": "A button to buy something. This button must be in the first column and row of the keyboard and can be attached only to a message with content of the type messageInvoice",
          "children": []
        }
      ]
    },
    {
      "function": false,
      "is_abstract": true,
      "name": "ReplyMarkup",
      "properties": [],
      "type": "Base",
      "description": "Contains a description of a custom keyboard and actions that can be done with it to quickly reply to bots",
      "children": [
        {
          "function": false,
          "is_abstract": false,
          "name": "replyMarkupRemoveKeyboard",
          "properties": [
            {
              "name": "is_personal",
              "type": "Bool",
              "description": "True, if the keyboard is removed only for the mentioned users or the target user of a reply",
              "nilable": false
            }
          ],
          "type": "ReplyMarkup",
          "description": "Instructs clients to remove the keyboard once this message has been received. This kind of keyboard can't be received in an incoming message; instead, UpdateChatReplyMarkup with message_id == 0 will be sent",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "replyMarkupForceReply",
          "properties": [
            {
              "name": "is_personal",
              "type": "Bool",
              "description": "True, if a forced reply must automatically be shown to the current user. For outgoing messages, specify true to show the forced reply only for the mentioned users and for the target user of a reply",
              "nilable": false
            }
          ],
          "type": "ReplyMarkup",
          "description": "Instructs clients to force a reply to this message",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "replyMarkupShowKeyboard",
          "properties": [
            {
              "name": "rows",
              "type": "vector<vector<keyboardButton>>",
              "description": "A list of rows of bot keyboard buttons",
              "nilable": false
            },
            {
              "name": "resize_keyboard",
              "type": "Bool",
              "description": "True, if the client needs to resize the keyboard vertically",
              "nilable": false
            },
            {
              "name": "one_time",
              "type": "Bool",
              "description": "True, if the client needs to hide the keyboard after use",
              "nilable": false
            },
            {
              "name": "is_personal",
              "type": "Bool",
              "description": "True, if the keyboard must automatically be shown to the current user. For outgoing messages, specify true to show the keyboard only for the mentioned users and for the target user of a reply",
              "nilable": false
            }
          ],
          "type": "ReplyMarkup",
          "description": "Contains a custom keyboard layout to quickly reply to bots",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "replyMarkupInlineKeyboard",
          "properties": [
            {
              "name": "rows",
              "type": "vector<vector<inlineKeyboardButton>>",
              "description": "A list of rows of inline keyboard buttons",
              "nilable": false
            }
          ],
          "type": "ReplyMarkup",
          "description": "Contains an inline keyboard layout",
          "children": []
        }
      ]
    },
    {
      "function": false,
      "is_abstract": true,
      "name": "RichText",
      "properties": [],
      "type": "Base",
      "description": "Describes a text object inside an instant-view web page",
      "children": [
        {
          "function": false,
          "is_abstract": false,
          "name": "richTextPlain",
          "properties": [
            {
              "name": "text",
              "type": "string",
              "nilable": false
            }
          ],
          "type": "RichText",
          "description": "A plain text @text Text",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "richTextBold",
          "properties": [
            {
              "name": "text",
              "type": "RichText",
              "nilable": false
            }
          ],
          "type": "RichText",
          "description": "A bold rich text @text Text",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "richTextItalic",
          "properties": [
            {
              "name": "text",
              "type": "RichText",
              "nilable": false
            }
          ],
          "type": "RichText",
          "description": "An italicized rich text @text Text",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "richTextUnderline",
          "properties": [
            {
              "name": "text",
              "type": "RichText",
              "nilable": false
            }
          ],
          "type": "RichText",
          "description": "An underlined rich text @text Text",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "richTextStrikethrough",
          "properties": [
            {
              "name": "text",
              "type": "RichText",
              "nilable": false
            }
          ],
          "type": "RichText",
          "description": "A strike-through rich text @text Text",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "richTextFixed",
          "properties": [
            {
              "name": "text",
              "type": "RichText",
              "nilable": false
            }
          ],
          "type": "RichText",
          "description": "A fixed-width rich text @text Text",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "richTextUrl",
          "properties": [
            {
              "name": "text",
              "type": "RichText",
              "nilable": false
            },
            {
              "name": "url",
              "type": "string",
              "nilable": false
            },
            {
              "name": "is_cached",
              "type": "Bool",
              "nilable": false
            }
          ],
          "type": "RichText",
          "description": "A rich text URL link @text Text @url URL @is_cached True, if the URL has cached instant view server-side",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "richTextEmailAddress",
          "properties": [
            {
              "name": "text",
              "type": "RichText",
              "nilable": false
            },
            {
              "name": "email_address",
              "type": "string",
              "nilable": false
            }
          ],
          "type": "RichText",
          "description": "A rich text email link @text Text @email_address Email address",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "richTextSubscript",
          "properties": [
            {
              "name": "text",
              "type": "RichText",
              "nilable": false
            }
          ],
          "type": "RichText",
          "description": "A subscript rich text @text Text",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "richTextSuperscript",
          "properties": [
            {
              "name": "text",
              "type": "RichText",
              "nilable": false
            }
          ],
          "type": "RichText",
          "description": "A superscript rich text @text Text",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "richTextMarked",
          "properties": [
            {
              "name": "text",
              "type": "RichText",
              "nilable": false
            }
          ],
          "type": "RichText",
          "description": "A marked rich text @text Text",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "richTextPhoneNumber",
          "properties": [
            {
              "name": "text",
              "type": "RichText",
              "nilable": false
            },
            {
              "name": "phone_number",
              "type": "string",
              "nilable": false
            }
          ],
          "type": "RichText",
          "description": "A rich text phone number @text Text @phone_number Phone number",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "richTextIcon",
          "properties": [
            {
              "name": "document",
              "type": "document",
              "nilable": false
            },
            {
              "name": "width",
              "type": "int32",
              "description": "Width of a bounding box in which the image should be shown; 0 if unknown",
              "nilable": false
            },
            {
              "name": "height",
              "type": "int32",
              "description": "Height of a bounding box in which the image should be shown; 0 if unknown",
              "nilable": false
            }
          ],
          "type": "RichText",
          "description": "A small image inside the text @document The image represented as a document. The image can be in GIF, JPEG or PNG format",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "richTextAnchor",
          "properties": [
            {
              "name": "text",
              "type": "RichText",
              "nilable": false
            },
            {
              "name": "name",
              "type": "string",
              "nilable": false
            }
          ],
          "type": "RichText",
          "description": "A rich text anchor @text Text @name Anchor name",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "richTexts",
          "properties": [
            {
              "name": "texts",
              "type": "vector<RichText>",
              "nilable": false
            }
          ],
          "type": "RichText",
          "description": "A concatenation of rich texts @texts Texts",
          "children": []
        }
      ]
    },
    {
      "function": false,
      "is_abstract": true,
      "name": "PageBlockHorizontalAlignment",
      "properties": [],
      "type": "Base",
      "description": "Describes a horizontal alignment of a table cell content",
      "children": [
        {
          "function": false,
          "is_abstract": false,
          "name": "pageBlockHorizontalAlignmentLeft",
          "properties": [],
          "type": "PageBlockHorizontalAlignment",
          "description": "The content should be left-aligned",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "pageBlockHorizontalAlignmentCenter",
          "properties": [],
          "type": "PageBlockHorizontalAlignment",
          "description": "The content should be center-aligned",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "pageBlockHorizontalAlignmentRight",
          "properties": [],
          "type": "PageBlockHorizontalAlignment",
          "description": "The content should be right-aligned",
          "children": []
        }
      ]
    },
    {
      "function": false,
      "is_abstract": true,
      "name": "PageBlockVerticalAlignment",
      "properties": [],
      "type": "Base",
      "description": "Describes a Vertical alignment of a table cell content",
      "children": [
        {
          "function": false,
          "is_abstract": false,
          "name": "pageBlockVerticalAlignmentTop",
          "properties": [],
          "type": "PageBlockVerticalAlignment",
          "description": "The content should be top-aligned",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "pageBlockVerticalAlignmentMiddle",
          "properties": [],
          "type": "PageBlockVerticalAlignment",
          "description": "The content should be middle-aligned",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "pageBlockVerticalAlignmentBottom",
          "properties": [],
          "type": "PageBlockVerticalAlignment",
          "description": "The content should be bottom-aligned",
          "children": []
        }
      ]
    },
    {
      "function": false,
      "is_abstract": true,
      "name": "PageBlock",
      "properties": [],
      "type": "Base",
      "description": "Describes a block of an instant view web page",
      "children": [
        {
          "function": false,
          "is_abstract": false,
          "name": "pageBlockTitle",
          "properties": [
            {
              "name": "title",
              "type": "RichText",
              "nilable": false
            }
          ],
          "type": "PageBlock",
          "description": "The title of a page @title Title",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "pageBlockSubtitle",
          "properties": [
            {
              "name": "subtitle",
              "type": "RichText",
              "nilable": false
            }
          ],
          "type": "PageBlock",
          "description": "The subtitle of a page @subtitle Subtitle",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "pageBlockAuthorDate",
          "properties": [
            {
              "name": "author",
              "type": "RichText",
              "nilable": false
            },
            {
              "name": "publish_date",
              "type": "int32",
              "nilable": false
            }
          ],
          "type": "PageBlock",
          "description": "The author and publishing date of a page @author Author @publish_date Point in time (Unix timestamp) when the article was published; 0 if unknown",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "pageBlockHeader",
          "properties": [
            {
              "name": "header",
              "type": "RichText",
              "nilable": false
            }
          ],
          "type": "PageBlock",
          "description": "A header @header Header",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "pageBlockSubheader",
          "properties": [
            {
              "name": "subheader",
              "type": "RichText",
              "nilable": false
            }
          ],
          "type": "PageBlock",
          "description": "A subheader @subheader Subheader",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "pageBlockKicker",
          "properties": [
            {
              "name": "kicker",
              "type": "RichText",
              "nilable": false
            }
          ],
          "type": "PageBlock",
          "description": "A kicker @kicker Kicker",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "pageBlockParagraph",
          "properties": [
            {
              "name": "text",
              "type": "RichText",
              "nilable": false
            }
          ],
          "type": "PageBlock",
          "description": "A text paragraph @text Paragraph text",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "pageBlockPreformatted",
          "properties": [
            {
              "name": "text",
              "type": "RichText",
              "nilable": false
            },
            {
              "name": "language",
              "type": "string",
              "nilable": false
            }
          ],
          "type": "PageBlock",
          "description": "A preformatted text paragraph @text Paragraph text @language Programming language for which the text should be formatted",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "pageBlockFooter",
          "properties": [
            {
              "name": "footer",
              "type": "RichText",
              "nilable": false
            }
          ],
          "type": "PageBlock",
          "description": "The footer of a page @footer Footer",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "pageBlockDivider",
          "properties": [],
          "type": "PageBlock",
          "description": "An empty block separating a page",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "pageBlockAnchor",
          "properties": [
            {
              "name": "name",
              "type": "string",
              "nilable": false
            }
          ],
          "type": "PageBlock",
          "description": "An invisible anchor on a page, which can be used in a URL to open the page from the specified anchor @name Name of the anchor",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "pageBlockList",
          "properties": [
            {
              "name": "items",
              "type": "vector<pageBlockListItem>",
              "nilable": false
            }
          ],
          "type": "PageBlock",
          "description": "A list of data blocks @items The items of the list",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "pageBlockBlockQuote",
          "properties": [
            {
              "name": "text",
              "type": "RichText",
              "nilable": false
            },
            {
              "name": "credit",
              "type": "RichText",
              "nilable": false
            }
          ],
          "type": "PageBlock",
          "description": "A block quote @text Quote text @credit Quote credit",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "pageBlockPullQuote",
          "properties": [
            {
              "name": "text",
              "type": "RichText",
              "nilable": false
            },
            {
              "name": "credit",
              "type": "RichText",
              "nilable": false
            }
          ],
          "type": "PageBlock",
          "description": "A pull quote @text Quote text @credit Quote credit",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "pageBlockAnimation",
          "properties": [
            {
              "name": "animation",
              "type": "animation",
              "nilable": false
            },
            {
              "name": "caption",
              "type": "pageBlockCaption",
              "nilable": false
            },
            {
              "name": "need_autoplay",
              "type": "Bool",
              "nilable": false
            }
          ],
          "type": "PageBlock",
          "description": "An animation @animation Animation file; may be null @caption Animation caption @need_autoplay True, if the animation should be played automatically",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "pageBlockAudio",
          "properties": [
            {
              "name": "audio",
              "type": "audio",
              "nilable": false
            },
            {
              "name": "caption",
              "type": "pageBlockCaption",
              "nilable": false
            }
          ],
          "type": "PageBlock",
          "description": "An audio file @audio Audio file; may be null @caption Audio file caption",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "pageBlockPhoto",
          "properties": [
            {
              "name": "photo",
              "type": "photo",
              "nilable": false
            },
            {
              "name": "caption",
              "type": "pageBlockCaption",
              "nilable": false
            },
            {
              "name": "url",
              "type": "string",
              "nilable": false
            }
          ],
          "type": "PageBlock",
          "description": "A photo @photo Photo file; may be null @caption Photo caption @url URL that needs to be opened when the photo is clicked",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "pageBlockVideo",
          "properties": [
            {
              "name": "video",
              "type": "video",
              "nilable": false
            },
            {
              "name": "caption",
              "type": "pageBlockCaption",
              "nilable": false
            },
            {
              "name": "need_autoplay",
              "type": "Bool",
              "nilable": false
            },
            {
              "name": "is_looped",
              "type": "Bool",
              "nilable": false
            }
          ],
          "type": "PageBlock",
          "description": "A video @video Video file; may be null @caption Video caption @need_autoplay True, if the video should be played automatically @is_looped True, if the video should be looped",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "pageBlockVoiceNote",
          "properties": [
            {
              "name": "voice_note",
              "type": "voiceNote",
              "nilable": false
            },
            {
              "name": "caption",
              "type": "pageBlockCaption",
              "nilable": false
            }
          ],
          "type": "PageBlock",
          "description": "A voice note @voice_note Voice note; may be null @caption Voice note caption",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "pageBlockCover",
          "properties": [
            {
              "name": "cover",
              "type": "PageBlock",
              "nilable": false
            }
          ],
          "type": "PageBlock",
          "description": "A page cover @cover Cover",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "pageBlockEmbedded",
          "properties": [
            {
              "name": "url",
              "type": "string",
              "nilable": false
            },
            {
              "name": "html",
              "type": "string",
              "nilable": false
            },
            {
              "name": "poster_photo",
              "type": "photo",
              "nilable": false
            },
            {
              "name": "width",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "height",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "caption",
              "type": "pageBlockCaption",
              "nilable": false
            },
            {
              "name": "is_full_width",
              "type": "Bool",
              "nilable": false
            },
            {
              "name": "allow_scrolling",
              "type": "Bool",
              "nilable": false
            }
          ],
          "type": "PageBlock",
          "description": "An embedded web page @url Web page URL, if available @html HTML-markup of the embedded page @poster_photo Poster photo, if available; may be null @width Block width; 0 if unknown @height Block height; 0 if unknown @caption Block caption @is_full_width True, if the block should be full width @allow_scrolling True, if scrolling should be allowed",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "pageBlockEmbeddedPost",
          "properties": [
            {
              "name": "url",
              "type": "string",
              "nilable": false
            },
            {
              "name": "author",
              "type": "string",
              "nilable": false
            },
            {
              "name": "author_photo",
              "type": "photo",
              "nilable": false
            },
            {
              "name": "date",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "page_blocks",
              "type": "vector<PageBlock>",
              "nilable": false
            },
            {
              "name": "caption",
              "type": "pageBlockCaption",
              "nilable": false
            }
          ],
          "type": "PageBlock",
          "description": "An embedded post @url Web page URL @author Post author @author_photo Post author photo; may be null @date Point in time (Unix timestamp) when the post was created; 0 if unknown @page_blocks Post content @caption Post caption",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "pageBlockCollage",
          "properties": [
            {
              "name": "page_blocks",
              "type": "vector<PageBlock>",
              "nilable": false
            },
            {
              "name": "caption",
              "type": "pageBlockCaption",
              "nilable": false
            }
          ],
          "type": "PageBlock",
          "description": "A collage @page_blocks Collage item contents @caption Block caption",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "pageBlockSlideshow",
          "properties": [
            {
              "name": "page_blocks",
              "type": "vector<PageBlock>",
              "nilable": false
            },
            {
              "name": "caption",
              "type": "pageBlockCaption",
              "nilable": false
            }
          ],
          "type": "PageBlock",
          "description": "A slideshow @page_blocks Slideshow item contents @caption Block caption",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "pageBlockChatLink",
          "properties": [
            {
              "name": "title",
              "type": "string",
              "nilable": false
            },
            {
              "name": "photo",
              "type": "chatPhoto",
              "nilable": false
            },
            {
              "name": "username",
              "type": "string",
              "nilable": false
            }
          ],
          "type": "PageBlock",
          "description": "A link to a chat @title Chat title @photo Chat photo; may be null @username Chat username, by which all other information about the chat should be resolved",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "pageBlockTable",
          "properties": [
            {
              "name": "caption",
              "type": "RichText",
              "nilable": false
            },
            {
              "name": "cells",
              "type": "vector<vector<pageBlockTableCell>>",
              "nilable": false
            },
            {
              "name": "is_bordered",
              "type": "Bool",
              "nilable": false
            },
            {
              "name": "is_striped",
              "type": "Bool",
              "nilable": false
            }
          ],
          "type": "PageBlock",
          "description": "A table @caption Table caption @cells Table cells @is_bordered True, if the table is bordered @is_striped True, if the table is striped",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "pageBlockDetails",
          "properties": [
            {
              "name": "header",
              "type": "RichText",
              "nilable": false
            },
            {
              "name": "page_blocks",
              "type": "vector<PageBlock>",
              "nilable": false
            },
            {
              "name": "is_open",
              "type": "Bool",
              "nilable": false
            }
          ],
          "type": "PageBlock",
          "description": "A collapsible block @header Always visible heading for the block @page_blocks Block contents @is_open True, if the block is open by default",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "pageBlockRelatedArticles",
          "properties": [
            {
              "name": "header",
              "type": "RichText",
              "nilable": false
            },
            {
              "name": "articles",
              "type": "vector<pageBlockRelatedArticle>",
              "nilable": false
            }
          ],
          "type": "PageBlock",
          "description": "Related articles @header Block header @articles List of related articles",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "pageBlockMap",
          "properties": [
            {
              "name": "location",
              "type": "location",
              "nilable": false
            },
            {
              "name": "zoom",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "width",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "height",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "caption",
              "type": "pageBlockCaption",
              "nilable": false
            }
          ],
          "type": "PageBlock",
          "description": "A map @location Location of the map center @zoom Map zoom level @width Map width @height Map height @caption Block caption",
          "children": []
        }
      ]
    },
    {
      "function": false,
      "is_abstract": true,
      "name": "InputCredentials",
      "properties": [],
      "type": "Base",
      "description": "Contains information about the payment method chosen by the user",
      "children": [
        {
          "function": false,
          "is_abstract": false,
          "name": "inputCredentialsSaved",
          "properties": [
            {
              "name": "saved_credentials_id",
              "type": "string",
              "nilable": false
            }
          ],
          "type": "InputCredentials",
          "description": "Applies if a user chooses some previously saved payment credentials. To use their previously saved credentials, the user must have a valid temporary password @saved_credentials_id Identifier of the saved credentials",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "inputCredentialsNew",
          "properties": [
            {
              "name": "data",
              "type": "string",
              "nilable": false
            },
            {
              "name": "allow_save",
              "type": "Bool",
              "nilable": false
            }
          ],
          "type": "InputCredentials",
          "description": "Applies if a user enters new credentials on a payment provider website @data Contains JSON-encoded data with a credential identifier from the payment provider @allow_save True, if the credential identifier can be saved on the server side",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "inputCredentialsAndroidPay",
          "properties": [
            {
              "name": "data",
              "type": "string",
              "nilable": false
            }
          ],
          "type": "InputCredentials",
          "description": "Applies if a user enters new credentials using Android Pay @data JSON-encoded data with the credential identifier",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "inputCredentialsApplePay",
          "properties": [
            {
              "name": "data",
              "type": "string",
              "nilable": false
            }
          ],
          "type": "InputCredentials",
          "description": "Applies if a user enters new credentials using Apple Pay @data JSON-encoded data with the credential identifier",
          "children": []
        }
      ]
    },
    {
      "function": false,
      "is_abstract": true,
      "name": "PassportElementType",
      "properties": [],
      "type": "Base",
      "description": "Contains the type of a Telegram Passport element",
      "children": [
        {
          "function": false,
          "is_abstract": false,
          "name": "passportElementTypePersonalDetails",
          "properties": [],
          "type": "PassportElementType",
          "description": "A Telegram Passport element containing the user's personal details",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "passportElementTypePassport",
          "properties": [],
          "type": "PassportElementType",
          "description": "A Telegram Passport element containing the user's passport",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "passportElementTypeDriverLicense",
          "properties": [],
          "type": "PassportElementType",
          "description": "A Telegram Passport element containing the user's driver license",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "passportElementTypeIdentityCard",
          "properties": [],
          "type": "PassportElementType",
          "description": "A Telegram Passport element containing the user's identity card",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "passportElementTypeInternalPassport",
          "properties": [],
          "type": "PassportElementType",
          "description": "A Telegram Passport element containing the user's internal passport",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "passportElementTypeAddress",
          "properties": [],
          "type": "PassportElementType",
          "description": "A Telegram Passport element containing the user's address",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "passportElementTypeUtilityBill",
          "properties": [],
          "type": "PassportElementType",
          "description": "A Telegram Passport element containing the user's utility bill",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "passportElementTypeBankStatement",
          "properties": [],
          "type": "PassportElementType",
          "description": "A Telegram Passport element containing the user's bank statement",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "passportElementTypeRentalAgreement",
          "properties": [],
          "type": "PassportElementType",
          "description": "A Telegram Passport element containing the user's rental agreement",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "passportElementTypePassportRegistration",
          "properties": [],
          "type": "PassportElementType",
          "description": "A Telegram Passport element containing the registration page of the user's passport",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "passportElementTypeTemporaryRegistration",
          "properties": [],
          "type": "PassportElementType",
          "description": "A Telegram Passport element containing the user's temporary registration",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "passportElementTypePhoneNumber",
          "properties": [],
          "type": "PassportElementType",
          "description": "A Telegram Passport element containing the user's phone number",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "passportElementTypeEmailAddress",
          "properties": [],
          "type": "PassportElementType",
          "description": "A Telegram Passport element containing the user's email address",
          "children": []
        }
      ]
    },
    {
      "function": false,
      "is_abstract": true,
      "name": "PassportElement",
      "properties": [],
      "type": "Base",
      "description": "Contains information about a Telegram Passport element",
      "children": [
        {
          "function": false,
          "is_abstract": false,
          "name": "passportElementPersonalDetails",
          "properties": [
            {
              "name": "personal_details",
              "type": "personalDetails",
              "nilable": false
            }
          ],
          "type": "PassportElement",
          "description": "A Telegram Passport element containing the user's personal details @personal_details Personal details of the user",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "passportElementPassport",
          "properties": [
            {
              "name": "passport",
              "type": "identityDocument",
              "nilable": false
            }
          ],
          "type": "PassportElement",
          "description": "A Telegram Passport element containing the user's passport @passport Passport",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "passportElementDriverLicense",
          "properties": [
            {
              "name": "driver_license",
              "type": "identityDocument",
              "nilable": false
            }
          ],
          "type": "PassportElement",
          "description": "A Telegram Passport element containing the user's driver license @driver_license Driver license",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "passportElementIdentityCard",
          "properties": [
            {
              "name": "identity_card",
              "type": "identityDocument",
              "nilable": false
            }
          ],
          "type": "PassportElement",
          "description": "A Telegram Passport element containing the user's identity card @identity_card Identity card",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "passportElementInternalPassport",
          "properties": [
            {
              "name": "internal_passport",
              "type": "identityDocument",
              "nilable": false
            }
          ],
          "type": "PassportElement",
          "description": "A Telegram Passport element containing the user's internal passport @internal_passport Internal passport",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "passportElementAddress",
          "properties": [
            {
              "name": "address",
              "type": "address",
              "nilable": false
            }
          ],
          "type": "PassportElement",
          "description": "A Telegram Passport element containing the user's address @address Address",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "passportElementUtilityBill",
          "properties": [
            {
              "name": "utility_bill",
              "type": "personalDocument",
              "nilable": false
            }
          ],
          "type": "PassportElement",
          "description": "A Telegram Passport element containing the user's utility bill @utility_bill Utility bill",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "passportElementBankStatement",
          "properties": [
            {
              "name": "bank_statement",
              "type": "personalDocument",
              "nilable": false
            }
          ],
          "type": "PassportElement",
          "description": "A Telegram Passport element containing the user's bank statement @bank_statement Bank statement",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "passportElementRentalAgreement",
          "properties": [
            {
              "name": "rental_agreement",
              "type": "personalDocument",
              "nilable": false
            }
          ],
          "type": "PassportElement",
          "description": "A Telegram Passport element containing the user's rental agreement @rental_agreement Rental agreement",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "passportElementPassportRegistration",
          "properties": [
            {
              "name": "passport_registration",
              "type": "personalDocument",
              "nilable": false
            }
          ],
          "type": "PassportElement",
          "description": "A Telegram Passport element containing the user's passport registration pages @passport_registration Passport registration pages",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "passportElementTemporaryRegistration",
          "properties": [
            {
              "name": "temporary_registration",
              "type": "personalDocument",
              "nilable": false
            }
          ],
          "type": "PassportElement",
          "description": "A Telegram Passport element containing the user's temporary registration @temporary_registration Temporary registration",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "passportElementPhoneNumber",
          "properties": [
            {
              "name": "phone_number",
              "type": "string",
              "nilable": false
            }
          ],
          "type": "PassportElement",
          "description": "A Telegram Passport element containing the user's phone number @phone_number Phone number",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "passportElementEmailAddress",
          "properties": [
            {
              "name": "email_address",
              "type": "string",
              "nilable": false
            }
          ],
          "type": "PassportElement",
          "description": "A Telegram Passport element containing the user's email address @email_address Email address",
          "children": []
        }
      ]
    },
    {
      "function": false,
      "is_abstract": true,
      "name": "InputPassportElement",
      "properties": [],
      "type": "Base",
      "description": "Contains information about a Telegram Passport element to be saved",
      "children": [
        {
          "function": false,
          "is_abstract": false,
          "name": "inputPassportElementPersonalDetails",
          "properties": [
            {
              "name": "personal_details",
              "type": "personalDetails",
              "nilable": false
            }
          ],
          "type": "InputPassportElement",
          "description": "A Telegram Passport element to be saved containing the user's personal details @personal_details Personal details of the user",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "inputPassportElementPassport",
          "properties": [
            {
              "name": "passport",
              "type": "inputIdentityDocument",
              "nilable": false
            }
          ],
          "type": "InputPassportElement",
          "description": "A Telegram Passport element to be saved containing the user's passport @passport The passport to be saved",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "inputPassportElementDriverLicense",
          "properties": [
            {
              "name": "driver_license",
              "type": "inputIdentityDocument",
              "nilable": false
            }
          ],
          "type": "InputPassportElement",
          "description": "A Telegram Passport element to be saved containing the user's driver license @driver_license The driver license to be saved",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "inputPassportElementIdentityCard",
          "properties": [
            {
              "name": "identity_card",
              "type": "inputIdentityDocument",
              "nilable": false
            }
          ],
          "type": "InputPassportElement",
          "description": "A Telegram Passport element to be saved containing the user's identity card @identity_card The identity card to be saved",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "inputPassportElementInternalPassport",
          "properties": [
            {
              "name": "internal_passport",
              "type": "inputIdentityDocument",
              "nilable": false
            }
          ],
          "type": "InputPassportElement",
          "description": "A Telegram Passport element to be saved containing the user's internal passport @internal_passport The internal passport to be saved",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "inputPassportElementAddress",
          "properties": [
            {
              "name": "address",
              "type": "address",
              "nilable": false
            }
          ],
          "type": "InputPassportElement",
          "description": "A Telegram Passport element to be saved containing the user's address @address The address to be saved",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "inputPassportElementUtilityBill",
          "properties": [
            {
              "name": "utility_bill",
              "type": "inputPersonalDocument",
              "nilable": false
            }
          ],
          "type": "InputPassportElement",
          "description": "A Telegram Passport element to be saved containing the user's utility bill @utility_bill The utility bill to be saved",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "inputPassportElementBankStatement",
          "properties": [
            {
              "name": "bank_statement",
              "type": "inputPersonalDocument",
              "nilable": false
            }
          ],
          "type": "InputPassportElement",
          "description": "A Telegram Passport element to be saved containing the user's bank statement @bank_statement The bank statement to be saved",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "inputPassportElementRentalAgreement",
          "properties": [
            {
              "name": "rental_agreement",
              "type": "inputPersonalDocument",
              "nilable": false
            }
          ],
          "type": "InputPassportElement",
          "description": "A Telegram Passport element to be saved containing the user's rental agreement @rental_agreement The rental agreement to be saved",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "inputPassportElementPassportRegistration",
          "properties": [
            {
              "name": "passport_registration",
              "type": "inputPersonalDocument",
              "nilable": false
            }
          ],
          "type": "InputPassportElement",
          "description": "A Telegram Passport element to be saved containing the user's passport registration @passport_registration The passport registration page to be saved",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "inputPassportElementTemporaryRegistration",
          "properties": [
            {
              "name": "temporary_registration",
              "type": "inputPersonalDocument",
              "nilable": false
            }
          ],
          "type": "InputPassportElement",
          "description": "A Telegram Passport element to be saved containing the user's temporary registration @temporary_registration The temporary registration document to be saved",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "inputPassportElementPhoneNumber",
          "properties": [
            {
              "name": "phone_number",
              "type": "string",
              "nilable": false
            }
          ],
          "type": "InputPassportElement",
          "description": "A Telegram Passport element to be saved containing the user's phone number @phone_number The phone number to be saved",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "inputPassportElementEmailAddress",
          "properties": [
            {
              "name": "email_address",
              "type": "string",
              "nilable": false
            }
          ],
          "type": "InputPassportElement",
          "description": "A Telegram Passport element to be saved containing the user's email address @email_address The email address to be saved",
          "children": []
        }
      ]
    },
    {
      "function": false,
      "is_abstract": true,
      "name": "PassportElementErrorSource",
      "properties": [],
      "type": "Base",
      "description": "Contains the description of an error in a Telegram Passport element",
      "children": [
        {
          "function": false,
          "is_abstract": false,
          "name": "passportElementErrorSourceUnspecified",
          "properties": [],
          "type": "PassportElementErrorSource",
          "description": "The element contains an error in an unspecified place. The error will be considered resolved when new data is added",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "passportElementErrorSourceDataField",
          "properties": [
            {
              "name": "field_name",
              "type": "string",
              "nilable": false
            }
          ],
          "type": "PassportElementErrorSource",
          "description": "One of the data fields contains an error. The error will be considered resolved when the value of the field changes @field_name Field name",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "passportElementErrorSourceFrontSide",
          "properties": [],
          "type": "PassportElementErrorSource",
          "description": "The front side of the document contains an error. The error will be considered resolved when the file with the front side changes",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "passportElementErrorSourceReverseSide",
          "properties": [],
          "type": "PassportElementErrorSource",
          "description": "The reverse side of the document contains an error. The error will be considered resolved when the file with the reverse side changes",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "passportElementErrorSourceSelfie",
          "properties": [],
          "type": "PassportElementErrorSource",
          "description": "The selfie with the document contains an error. The error will be considered resolved when the file with the selfie changes",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "passportElementErrorSourceTranslationFile",
          "properties": [
            {
              "name": "file_index",
              "type": "int32",
              "nilable": false
            }
          ],
          "type": "PassportElementErrorSource",
          "description": "One of files with the translation of the document contains an error. The error will be considered resolved when the file changes @file_index Index of a file with the error",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "passportElementErrorSourceTranslationFiles",
          "properties": [],
          "type": "PassportElementErrorSource",
          "description": "The translation of the document contains an error. The error will be considered resolved when the list of translation files changes",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "passportElementErrorSourceFile",
          "properties": [
            {
              "name": "file_index",
              "type": "int32",
              "nilable": false
            }
          ],
          "type": "PassportElementErrorSource",
          "description": "The file contains an error. The error will be considered resolved when the file changes @file_index Index of a file with the error",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "passportElementErrorSourceFiles",
          "properties": [],
          "type": "PassportElementErrorSource",
          "description": "The list of attached files contains an error. The error will be considered resolved when the list of files changes",
          "children": []
        }
      ]
    },
    {
      "function": false,
      "is_abstract": true,
      "name": "InputPassportElementErrorSource",
      "properties": [],
      "type": "Base",
      "description": "Contains the description of an error in a Telegram Passport element; for bots only",
      "children": [
        {
          "function": false,
          "is_abstract": false,
          "name": "inputPassportElementErrorSourceUnspecified",
          "properties": [
            {
              "name": "element_hash",
              "type": "bytes",
              "nilable": false
            }
          ],
          "type": "InputPassportElementErrorSource",
          "description": "The element contains an error in an unspecified place. The error will be considered resolved when new data is added @element_hash Current hash of the entire element",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "inputPassportElementErrorSourceDataField",
          "properties": [
            {
              "name": "field_name",
              "type": "string",
              "nilable": false
            },
            {
              "name": "data_hash",
              "type": "bytes",
              "nilable": false
            }
          ],
          "type": "InputPassportElementErrorSource",
          "description": "A data field contains an error. The error is considered resolved when the field's value changes @field_name Field name @data_hash Current data hash",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "inputPassportElementErrorSourceFrontSide",
          "properties": [
            {
              "name": "file_hash",
              "type": "bytes",
              "nilable": false
            }
          ],
          "type": "InputPassportElementErrorSource",
          "description": "The front side of the document contains an error. The error is considered resolved when the file with the front side of the document changes @file_hash Current hash of the file containing the front side",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "inputPassportElementErrorSourceReverseSide",
          "properties": [
            {
              "name": "file_hash",
              "type": "bytes",
              "nilable": false
            }
          ],
          "type": "InputPassportElementErrorSource",
          "description": "The reverse side of the document contains an error. The error is considered resolved when the file with the reverse side of the document changes @file_hash Current hash of the file containing the reverse side",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "inputPassportElementErrorSourceSelfie",
          "properties": [
            {
              "name": "file_hash",
              "type": "bytes",
              "nilable": false
            }
          ],
          "type": "InputPassportElementErrorSource",
          "description": "The selfie contains an error. The error is considered resolved when the file with the selfie changes @file_hash Current hash of the file containing the selfie",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "inputPassportElementErrorSourceTranslationFile",
          "properties": [
            {
              "name": "file_hash",
              "type": "bytes",
              "nilable": false
            }
          ],
          "type": "InputPassportElementErrorSource",
          "description": "One of the files containing the translation of the document contains an error. The error is considered resolved when the file with the translation changes @file_hash Current hash of the file containing the translation",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "inputPassportElementErrorSourceTranslationFiles",
          "properties": [
            {
              "name": "file_hashes",
              "type": "vector<bytes>",
              "nilable": false
            }
          ],
          "type": "InputPassportElementErrorSource",
          "description": "The translation of the document contains an error. The error is considered resolved when the list of files changes @file_hashes Current hashes of all files with the translation",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "inputPassportElementErrorSourceFile",
          "properties": [
            {
              "name": "file_hash",
              "type": "bytes",
              "nilable": false
            }
          ],
          "type": "InputPassportElementErrorSource",
          "description": "The file contains an error. The error is considered resolved when the file changes @file_hash Current hash of the file which has the error",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "inputPassportElementErrorSourceFiles",
          "properties": [
            {
              "name": "file_hashes",
              "type": "vector<bytes>",
              "nilable": false
            }
          ],
          "type": "InputPassportElementErrorSource",
          "description": "The list of attached files contains an error. The error is considered resolved when the file list changes @file_hashes Current hashes of all attached files",
          "children": []
        }
      ]
    },
    {
      "function": false,
      "is_abstract": true,
      "name": "MessageContent",
      "properties": [],
      "type": "Base",
      "description": "Contains the content of a message",
      "children": [
        {
          "function": false,
          "is_abstract": false,
          "name": "messageText",
          "properties": [
            {
              "name": "text",
              "type": "formattedText",
              "nilable": false
            },
            {
              "name": "web_page",
              "type": "webPage",
              "nilable": false
            }
          ],
          "type": "MessageContent",
          "description": "A text message @text Text of the message @web_page A preview of the web page that's mentioned in the text; may be null",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "messageAnimation",
          "properties": [
            {
              "name": "animation",
              "type": "animation",
              "nilable": false
            },
            {
              "name": "caption",
              "type": "formattedText",
              "nilable": false
            },
            {
              "name": "is_secret",
              "type": "Bool",
              "nilable": false
            }
          ],
          "type": "MessageContent",
          "description": "An animation message (GIF-style). @animation Message content @caption Animation caption @is_secret True, if the animation thumbnail must be blurred and the animation must be shown only while tapped",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "messageAudio",
          "properties": [
            {
              "name": "audio",
              "type": "audio",
              "nilable": false
            },
            {
              "name": "caption",
              "type": "formattedText",
              "nilable": false
            }
          ],
          "type": "MessageContent",
          "description": "An audio message @audio Message content @caption Audio caption",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "messageDocument",
          "properties": [
            {
              "name": "document",
              "type": "document",
              "nilable": false
            },
            {
              "name": "caption",
              "type": "formattedText",
              "nilable": false
            }
          ],
          "type": "MessageContent",
          "description": "A document message (general file) @document Message content @caption Document caption",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "messagePhoto",
          "properties": [
            {
              "name": "photo",
              "type": "photo",
              "nilable": false
            },
            {
              "name": "caption",
              "type": "formattedText",
              "nilable": false
            },
            {
              "name": "is_secret",
              "type": "Bool",
              "nilable": false
            }
          ],
          "type": "MessageContent",
          "description": "A photo message @photo Message content @caption Photo caption @is_secret True, if the photo must be blurred and must be shown only while tapped",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "messageExpiredPhoto",
          "properties": [],
          "type": "MessageContent",
          "description": "An expired photo message (self-destructed after TTL has elapsed)",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "messageSticker",
          "properties": [
            {
              "name": "sticker",
              "type": "sticker",
              "nilable": false
            }
          ],
          "type": "MessageContent",
          "description": "A sticker message @sticker Message content",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "messageVideo",
          "properties": [
            {
              "name": "video",
              "type": "video",
              "nilable": false
            },
            {
              "name": "caption",
              "type": "formattedText",
              "nilable": false
            },
            {
              "name": "is_secret",
              "type": "Bool",
              "nilable": false
            }
          ],
          "type": "MessageContent",
          "description": "A video message @video Message content @caption Video caption @is_secret True, if the video thumbnail must be blurred and the video must be shown only while tapped",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "messageExpiredVideo",
          "properties": [],
          "type": "MessageContent",
          "description": "An expired video message (self-destructed after TTL has elapsed)",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "messageVideoNote",
          "properties": [
            {
              "name": "video_note",
              "type": "videoNote",
              "nilable": false
            },
            {
              "name": "is_viewed",
              "type": "Bool",
              "nilable": false
            },
            {
              "name": "is_secret",
              "type": "Bool",
              "nilable": false
            }
          ],
          "type": "MessageContent",
          "description": "A video note message @video_note Message content @is_viewed True, if at least one of the recipients has viewed the video note @is_secret True, if the video note thumbnail must be blurred and the video note must be shown only while tapped",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "messageVoiceNote",
          "properties": [
            {
              "name": "voice_note",
              "type": "voiceNote",
              "nilable": false
            },
            {
              "name": "caption",
              "type": "formattedText",
              "nilable": false
            },
            {
              "name": "is_listened",
              "type": "Bool",
              "nilable": false
            }
          ],
          "type": "MessageContent",
          "description": "A voice note message @voice_note Message content @caption Voice note caption @is_listened True, if at least one of the recipients has listened to the voice note",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "messageLocation",
          "properties": [
            {
              "name": "location",
              "type": "location",
              "nilable": false
            },
            {
              "name": "live_period",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "expires_in",
              "type": "int32",
              "description": "Left time for which the location can be updated, in seconds. updateMessageContent is not sent when this field changes",
              "nilable": false
            }
          ],
          "type": "MessageContent",
          "description": "A message with a location @location Message content @live_period Time relative to the message sent date until which the location can be updated, in seconds",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "messageVenue",
          "properties": [
            {
              "name": "venue",
              "type": "venue",
              "nilable": false
            }
          ],
          "type": "MessageContent",
          "description": "A message with information about a venue @venue Message content",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "messageContact",
          "properties": [
            {
              "name": "contact",
              "type": "contact",
              "nilable": false
            }
          ],
          "type": "MessageContent",
          "description": "A message with a user contact @contact Message content",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "messageGame",
          "properties": [
            {
              "name": "game",
              "type": "game",
              "nilable": false
            }
          ],
          "type": "MessageContent",
          "description": "A message with a game @game Game",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "messagePoll",
          "properties": [
            {
              "name": "poll",
              "type": "poll",
              "nilable": false
            }
          ],
          "type": "MessageContent",
          "description": "A message with a poll @poll Poll",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "messageInvoice",
          "properties": [
            {
              "name": "title",
              "type": "string",
              "nilable": false
            },
            {
              "name": "description",
              "type": "string",
              "description": "A message with an invoice from a bot @title Product title @param_description Product description @photo Product photo; may be null @currency Currency for the product price @total_amount Product total price in the minimal quantity of the currency",
              "nilable": true
            },
            {
              "name": "photo",
              "type": "photo",
              "nilable": false
            },
            {
              "name": "currency",
              "type": "string",
              "nilable": false
            },
            {
              "name": "total_amount",
              "type": "int53",
              "nilable": false
            },
            {
              "name": "start_parameter",
              "type": "string",
              "description": "Unique invoice bot start_parameter. To share an invoice use the URL https://t.me/{bot_username}?start={start_parameter} @is_test True, if the invoice is a test invoice",
              "nilable": false
            },
            {
              "name": "is_test",
              "type": "Bool",
              "nilable": false
            },
            {
              "name": "need_shipping_address",
              "type": "Bool",
              "description": "True, if the shipping address should be specified @receipt_message_id The identifier of the message with the receipt, after the product has been purchased",
              "nilable": false
            },
            {
              "name": "receipt_message_id",
              "type": "int53",
              "nilable": false
            }
          ],
          "type": "MessageContent",
          "description": "A message with an invoice from a bot @title Product title @param_description Product description @photo Product photo; may be null @currency Currency for the product price @total_amount Product total price in the minimal quantity of the currency",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "messageCall",
          "properties": [
            {
              "name": "discard_reason",
              "type": "CallDiscardReason",
              "nilable": false
            },
            {
              "name": "duration",
              "type": "int32",
              "nilable": false
            }
          ],
          "type": "MessageContent",
          "description": "A message with information about an ended call @discard_reason Reason why the call was discarded @duration Call duration, in seconds",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "messageBasicGroupChatCreate",
          "properties": [
            {
              "name": "title",
              "type": "string",
              "nilable": false
            },
            {
              "name": "member_user_ids",
              "type": "vector<int32>",
              "nilable": false
            }
          ],
          "type": "MessageContent",
          "description": "A newly created basic group @title Title of the basic group @member_user_ids User identifiers of members in the basic group",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "messageSupergroupChatCreate",
          "properties": [
            {
              "name": "title",
              "type": "string",
              "nilable": false
            }
          ],
          "type": "MessageContent",
          "description": "A newly created supergroup or channel @title Title of the supergroup or channel",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "messageChatChangeTitle",
          "properties": [
            {
              "name": "title",
              "type": "string",
              "nilable": false
            }
          ],
          "type": "MessageContent",
          "description": "An updated chat title @title New chat title",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "messageChatChangePhoto",
          "properties": [
            {
              "name": "photo",
              "type": "photo",
              "nilable": false
            }
          ],
          "type": "MessageContent",
          "description": "An updated chat photo @photo New chat photo",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "messageChatDeletePhoto",
          "properties": [],
          "type": "MessageContent",
          "description": "A deleted chat photo",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "messageChatAddMembers",
          "properties": [
            {
              "name": "member_user_ids",
              "type": "vector<int32>",
              "nilable": false
            }
          ],
          "type": "MessageContent",
          "description": "New chat members were added @member_user_ids User identifiers of the new members",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "messageChatJoinByLink",
          "properties": [],
          "type": "MessageContent",
          "description": "A new member joined the chat by invite link",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "messageChatDeleteMember",
          "properties": [
            {
              "name": "user_id",
              "type": "int32",
              "nilable": false
            }
          ],
          "type": "MessageContent",
          "description": "A chat member was deleted @user_id User identifier of the deleted chat member",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "messageChatUpgradeTo",
          "properties": [
            {
              "name": "supergroup_id",
              "type": "int32",
              "nilable": false
            }
          ],
          "type": "MessageContent",
          "description": "A basic group was upgraded to a supergroup and was deactivated as the result @supergroup_id Identifier of the supergroup to which the basic group was upgraded",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "messageChatUpgradeFrom",
          "properties": [
            {
              "name": "title",
              "type": "string",
              "nilable": false
            },
            {
              "name": "basic_group_id",
              "type": "int32",
              "nilable": false
            }
          ],
          "type": "MessageContent",
          "description": "A supergroup has been created from a basic group @title Title of the newly created supergroup @basic_group_id The identifier of the original basic group",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "messagePinMessage",
          "properties": [
            {
              "name": "message_id",
              "type": "int53",
              "nilable": false
            }
          ],
          "type": "MessageContent",
          "description": "A message has been pinned @message_id Identifier of the pinned message, can be an identifier of a deleted message or 0",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "messageScreenshotTaken",
          "properties": [],
          "type": "MessageContent",
          "description": "A screenshot of a message in the chat has been taken",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "messageChatSetTtl",
          "properties": [
            {
              "name": "ttl",
              "type": "int32",
              "nilable": false
            }
          ],
          "type": "MessageContent",
          "description": "The TTL (Time To Live) setting messages in a secret chat has been changed @ttl New TTL",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "messageCustomServiceAction",
          "properties": [
            {
              "name": "text",
              "type": "string",
              "nilable": false
            }
          ],
          "type": "MessageContent",
          "description": "A non-standard action has happened in the chat @text Message text to be shown in the chat",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "messageGameScore",
          "properties": [
            {
              "name": "game_message_id",
              "type": "int53",
              "nilable": false
            },
            {
              "name": "game_id",
              "type": "int64",
              "nilable": false
            },
            {
              "name": "score",
              "type": "int32",
              "nilable": false
            }
          ],
          "type": "MessageContent",
          "description": "A new high score was achieved in a game @game_message_id Identifier of the message with the game, can be an identifier of a deleted message @game_id Identifier of the game; may be different from the games presented in the message with the game @score New score",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "messagePaymentSuccessful",
          "properties": [
            {
              "name": "invoice_message_id",
              "type": "int53",
              "nilable": false
            },
            {
              "name": "currency",
              "type": "string",
              "nilable": false
            },
            {
              "name": "total_amount",
              "type": "int53",
              "nilable": false
            }
          ],
          "type": "MessageContent",
          "description": "A payment has been completed @invoice_message_id Identifier of the message with the corresponding invoice; can be an identifier of a deleted message @currency Currency for the price of the product @total_amount Total price for the product, in the minimal quantity of the currency",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "messagePaymentSuccessfulBot",
          "properties": [
            {
              "name": "invoice_message_id",
              "type": "int53",
              "nilable": false
            },
            {
              "name": "currency",
              "type": "string",
              "nilable": false
            },
            {
              "name": "total_amount",
              "type": "int53",
              "description": "Total price for the product, in the minimal quantity of the currency @invoice_payload Invoice payload @shipping_option_id Identifier of the shipping option chosen by the user; may be empty if not applicable @order_info Information about the order; may be null",
              "nilable": true
            },
            {
              "name": "invoice_payload",
              "type": "bytes",
              "nilable": false
            },
            {
              "name": "shipping_option_id",
              "type": "string",
              "nilable": false
            },
            {
              "name": "order_info",
              "type": "orderInfo",
              "nilable": false
            },
            {
              "name": "telegram_payment_charge_id",
              "type": "string",
              "description": "Telegram payment identifier @provider_payment_charge_id Provider payment identifier",
              "nilable": false
            },
            {
              "name": "provider_payment_charge_id",
              "type": "string",
              "nilable": false
            }
          ],
          "type": "MessageContent",
          "description": "A payment has been completed; for bots only @invoice_message_id Identifier of the message with the corresponding invoice; can be an identifier of a deleted message @currency Currency for price of the product",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "messageContactRegistered",
          "properties": [],
          "type": "MessageContent",
          "description": "A contact has registered with Telegram",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "messageWebsiteConnected",
          "properties": [
            {
              "name": "domain_name",
              "type": "string",
              "nilable": false
            }
          ],
          "type": "MessageContent",
          "description": "The current user has connected a website by logging in using Telegram Login Widget on it @domain_name Domain name of the connected website",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "messagePassportDataSent",
          "properties": [
            {
              "name": "types",
              "type": "vector<PassportElementType>",
              "nilable": false
            }
          ],
          "type": "MessageContent",
          "description": "Telegram Passport data has been sent @types List of Telegram Passport element types sent",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "messagePassportDataReceived",
          "properties": [
            {
              "name": "elements",
              "type": "vector<encryptedPassportElement>",
              "nilable": false
            },
            {
              "name": "credentials",
              "type": "encryptedCredentials",
              "nilable": false
            }
          ],
          "type": "MessageContent",
          "description": "Telegram Passport data has been received; for bots only @elements List of received Telegram Passport elements @credentials Encrypted data credentials",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "messageUnsupported",
          "properties": [],
          "type": "MessageContent",
          "description": "Message content that is not supported by the client",
          "children": []
        }
      ]
    },
    {
      "function": false,
      "is_abstract": true,
      "name": "TextEntityType",
      "properties": [],
      "type": "Base",
      "description": "Represents a part of the text which must be formatted differently",
      "children": [
        {
          "function": false,
          "is_abstract": false,
          "name": "textEntityTypeMention",
          "properties": [],
          "type": "TextEntityType",
          "description": "A mention of a user by their username",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "textEntityTypeHashtag",
          "properties": [],
          "type": "TextEntityType",
          "description": "A hashtag text, beginning with \"#\"",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "textEntityTypeCashtag",
          "properties": [],
          "type": "TextEntityType",
          "description": "A cashtag text, beginning with \"$\" and consisting of capital english letters (i.e. \"$USD\")",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "textEntityTypeBotCommand",
          "properties": [],
          "type": "TextEntityType",
          "description": "A bot command, beginning with \"/\". This shouldn't be highlighted if there are no bots in the chat",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "textEntityTypeUrl",
          "properties": [],
          "type": "TextEntityType",
          "description": "An HTTP URL",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "textEntityTypeEmailAddress",
          "properties": [],
          "type": "TextEntityType",
          "description": "An email address",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "textEntityTypeBold",
          "properties": [],
          "type": "TextEntityType",
          "description": "A bold text",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "textEntityTypeItalic",
          "properties": [],
          "type": "TextEntityType",
          "description": "An italic text",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "textEntityTypeCode",
          "properties": [],
          "type": "TextEntityType",
          "description": "Text that must be formatted as if inside a code HTML tag",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "textEntityTypePre",
          "properties": [],
          "type": "TextEntityType",
          "description": "Text that must be formatted as if inside a pre HTML tag",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "textEntityTypePreCode",
          "properties": [
            {
              "name": "language",
              "type": "string",
              "nilable": false
            }
          ],
          "type": "TextEntityType",
          "description": "Text that must be formatted as if inside pre, and code HTML tags @language Programming language of the code; as defined by the sender",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "textEntityTypeTextUrl",
          "properties": [
            {
              "name": "url",
              "type": "string",
              "nilable": false
            }
          ],
          "type": "TextEntityType",
          "description": "A text description shown instead of a raw URL @url HTTP or tg:// URL to be opened when the link is clicked",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "textEntityTypeMentionName",
          "properties": [
            {
              "name": "user_id",
              "type": "int32",
              "nilable": false
            }
          ],
          "type": "TextEntityType",
          "description": "A text shows instead of a raw mention of the user (e.g., when the user has no username) @user_id Identifier of the mentioned user",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "textEntityTypePhoneNumber",
          "properties": [],
          "type": "TextEntityType",
          "description": "A phone number",
          "children": []
        }
      ]
    },
    {
      "function": false,
      "is_abstract": true,
      "name": "InputMessageContent",
      "properties": [],
      "type": "Base",
      "description": "The content of a message to send",
      "children": [
        {
          "function": false,
          "is_abstract": false,
          "name": "inputMessageText",
          "properties": [
            {
              "name": "text",
              "type": "formattedText",
              "nilable": false
            },
            {
              "name": "disable_web_page_preview",
              "type": "Bool",
              "description": "True, if rich web page previews for URLs in the message text should be disabled @clear_draft True, if a chat message draft should be deleted",
              "nilable": false
            },
            {
              "name": "clear_draft",
              "type": "Bool",
              "nilable": false
            }
          ],
          "type": "InputMessageContent",
          "description": "A text message @text Formatted text to be sent; 1-GetOption(\"message_text_length_max\") characters. Only Bold, Italic, Code, Pre, PreCode and TextUrl entities are allowed to be specified manually",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "inputMessageAnimation",
          "properties": [
            {
              "name": "animation",
              "type": "InputFile",
              "nilable": false
            },
            {
              "name": "thumbnail",
              "type": "inputThumbnail",
              "nilable": false
            },
            {
              "name": "duration",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "width",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "height",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "caption",
              "type": "formattedText",
              "nilable": false
            }
          ],
          "type": "InputMessageContent",
          "description": "An animation message (GIF-style). @animation Animation file to be sent @thumbnail Animation thumbnail, if available @duration Duration of the animation, in seconds @width Width of the animation; may be replaced by the server @height Height of the animation; may be replaced by the server @caption Animation caption; 0-GetOption(\"message_caption_length_max\") characters",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "inputMessageAudio",
          "properties": [
            {
              "name": "audio",
              "type": "InputFile",
              "nilable": false
            },
            {
              "name": "album_cover_thumbnail",
              "type": "inputThumbnail",
              "nilable": false
            },
            {
              "name": "duration",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "title",
              "type": "string",
              "nilable": false
            },
            {
              "name": "performer",
              "type": "string",
              "description": "Performer of the audio; 0-64 characters, may be replaced by the server @caption Audio caption; 0-GetOption(\"message_caption_length_max\") characters",
              "nilable": false
            },
            {
              "name": "caption",
              "type": "formattedText",
              "nilable": false
            }
          ],
          "type": "InputMessageContent",
          "description": "An audio message @audio Audio file to be sent @album_cover_thumbnail Thumbnail of the cover for the album, if available @duration Duration of the audio, in seconds; may be replaced by the server @title Title of the audio; 0-64 characters; may be replaced by the server",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "inputMessageDocument",
          "properties": [
            {
              "name": "document",
              "type": "InputFile",
              "nilable": false
            },
            {
              "name": "thumbnail",
              "type": "inputThumbnail",
              "nilable": false
            },
            {
              "name": "caption",
              "type": "formattedText",
              "nilable": false
            }
          ],
          "type": "InputMessageContent",
          "description": "A document message (general file) @document Document to be sent @thumbnail Document thumbnail, if available @caption Document caption; 0-GetOption(\"message_caption_length_max\") characters",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "inputMessagePhoto",
          "properties": [
            {
              "name": "photo",
              "type": "InputFile",
              "nilable": false
            },
            {
              "name": "thumbnail",
              "type": "inputThumbnail",
              "nilable": false
            },
            {
              "name": "added_sticker_file_ids",
              "type": "vector<int32>",
              "nilable": false
            },
            {
              "name": "width",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "height",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "caption",
              "type": "formattedText",
              "nilable": false
            },
            {
              "name": "ttl",
              "type": "int32",
              "description": "Photo TTL (Time To Live), in seconds (0-60). A non-zero TTL can be specified only in private chats",
              "nilable": false
            }
          ],
          "type": "InputMessageContent",
          "description": "A photo message @photo Photo to send @thumbnail Photo thumbnail to be sent, this is sent to the other party in secret chats only @added_sticker_file_ids File identifiers of the stickers added to the photo, if applicable @width Photo width @height Photo height @caption Photo caption; 0-GetOption(\"message_caption_length_max\") characters",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "inputMessageSticker",
          "properties": [
            {
              "name": "sticker",
              "type": "InputFile",
              "nilable": false
            },
            {
              "name": "thumbnail",
              "type": "inputThumbnail",
              "nilable": false
            },
            {
              "name": "width",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "height",
              "type": "int32",
              "nilable": false
            }
          ],
          "type": "InputMessageContent",
          "description": "A sticker message @sticker Sticker to be sent @thumbnail Sticker thumbnail, if available @width Sticker width @height Sticker height",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "inputMessageVideo",
          "properties": [
            {
              "name": "video",
              "type": "InputFile",
              "nilable": false
            },
            {
              "name": "thumbnail",
              "type": "inputThumbnail",
              "nilable": false
            },
            {
              "name": "added_sticker_file_ids",
              "type": "vector<int32>",
              "nilable": false
            },
            {
              "name": "duration",
              "type": "int32",
              "description": "Duration of the video, in seconds @width Video width @height Video height @supports_streaming True, if the video should be tried to be streamed",
              "nilable": false
            },
            {
              "name": "width",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "height",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "supports_streaming",
              "type": "Bool",
              "nilable": false
            },
            {
              "name": "caption",
              "type": "formattedText",
              "description": "Video caption; 0-GetOption(\"message_caption_length_max\") characters @ttl Video TTL (Time To Live), in seconds (0-60). A non-zero TTL can be specified only in private chats",
              "nilable": false
            },
            {
              "name": "ttl",
              "type": "int32",
              "nilable": false
            }
          ],
          "type": "InputMessageContent",
          "description": "A video message @video Video to be sent @thumbnail Video thumbnail, if available @added_sticker_file_ids File identifiers of the stickers added to the video, if applicable",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "inputMessageVideoNote",
          "properties": [
            {
              "name": "video_note",
              "type": "InputFile",
              "nilable": false
            },
            {
              "name": "thumbnail",
              "type": "inputThumbnail",
              "nilable": false
            },
            {
              "name": "duration",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "length",
              "type": "int32",
              "nilable": false
            }
          ],
          "type": "InputMessageContent",
          "description": "A video note message @video_note Video note to be sent @thumbnail Video thumbnail, if available @duration Duration of the video, in seconds @length Video width and height; must be positive and not greater than 640",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "inputMessageVoiceNote",
          "properties": [
            {
              "name": "voice_note",
              "type": "InputFile",
              "nilable": false
            },
            {
              "name": "duration",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "waveform",
              "type": "bytes",
              "nilable": false
            },
            {
              "name": "caption",
              "type": "formattedText",
              "nilable": false
            }
          ],
          "type": "InputMessageContent",
          "description": "A voice note message @voice_note Voice note to be sent @duration Duration of the voice note, in seconds @waveform Waveform representation of the voice note, in 5-bit format @caption Voice note caption; 0-GetOption(\"message_caption_length_max\") characters",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "inputMessageLocation",
          "properties": [
            {
              "name": "location",
              "type": "location",
              "nilable": false
            },
            {
              "name": "live_period",
              "type": "int32",
              "nilable": false
            }
          ],
          "type": "InputMessageContent",
          "description": "A message with a location @location Location to be sent @live_period Period for which the location can be updated, in seconds; should bebetween 60 and 86400 for a live location and 0 otherwise",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "inputMessageVenue",
          "properties": [
            {
              "name": "venue",
              "type": "venue",
              "nilable": false
            }
          ],
          "type": "InputMessageContent",
          "description": "A message with information about a venue @venue Venue to send",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "inputMessageContact",
          "properties": [
            {
              "name": "contact",
              "type": "contact",
              "nilable": false
            }
          ],
          "type": "InputMessageContent",
          "description": "A message containing a user contact @contact Contact to send",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "inputMessageGame",
          "properties": [
            {
              "name": "bot_user_id",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "game_short_name",
              "type": "string",
              "nilable": false
            }
          ],
          "type": "InputMessageContent",
          "description": "A message with a game; not supported for channels or secret chats @bot_user_id User identifier of the bot that owns the game @game_short_name Short name of the game",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "inputMessageInvoice",
          "properties": [
            {
              "name": "invoice",
              "type": "invoice",
              "nilable": false
            },
            {
              "name": "title",
              "type": "string",
              "nilable": false
            },
            {
              "name": "description",
              "type": "string",
              "description": "A message with an invoice; can be used only by bots and only in private chats @invoice Invoice @title Product title; 1-32 characters @param_description Product description; 0-255 characters @photo_url Product photo URL; optional @photo_size Product photo size @photo_width Product photo width @photo_height Product photo height",
              "nilable": true
            },
            {
              "name": "photo_url",
              "type": "string",
              "nilable": false
            },
            {
              "name": "photo_size",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "photo_width",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "photo_height",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "payload",
              "type": "bytes",
              "description": "The invoice payload @provider_token Payment provider token @provider_data JSON-encoded data about the invoice, which will be shared with the payment provider @start_parameter Unique invoice bot start_parameter for the generation of this invoice",
              "nilable": false
            },
            {
              "name": "provider_token",
              "type": "string",
              "nilable": false
            },
            {
              "name": "provider_data",
              "type": "string",
              "nilable": false
            },
            {
              "name": "start_parameter",
              "type": "string",
              "nilable": false
            }
          ],
          "type": "InputMessageContent",
          "description": "A message with an invoice; can be used only by bots and only in private chats @invoice Invoice @title Product title; 1-32 characters @param_description Product description; 0-255 characters @photo_url Product photo URL; optional @photo_size Product photo size @photo_width Product photo width @photo_height Product photo height",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "inputMessagePoll",
          "properties": [
            {
              "name": "question",
              "type": "string",
              "nilable": false
            },
            {
              "name": "options",
              "type": "vector<string>",
              "nilable": false
            }
          ],
          "type": "InputMessageContent",
          "description": "A message with a poll. Polls can't be sent to private or secret chats @question Poll question, 1-255 characters @options List of poll answer options, 2-10 strings 1-100 characters each",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "inputMessageForwarded",
          "properties": [
            {
              "name": "from_chat_id",
              "type": "int53",
              "nilable": false
            },
            {
              "name": "message_id",
              "type": "int53",
              "nilable": false
            },
            {
              "name": "in_game_share",
              "type": "Bool",
              "description": "True, if a game message should be shared within a launched game; applies only to game messages",
              "nilable": false
            },
            {
              "name": "send_copy",
              "type": "Bool",
              "description": "True, if content of the message needs to be copied without a link to the original message. Always true if the message is forwarded to a secret chat",
              "nilable": false
            },
            {
              "name": "remove_caption",
              "type": "Bool",
              "description": "True, if media caption of the message copy needs to be removed. Ignored if send_copy is false",
              "nilable": false
            }
          ],
          "type": "InputMessageContent",
          "description": "A forwarded message @from_chat_id Identifier for the chat this forwarded message came from @message_id Identifier of the message to forward",
          "children": []
        }
      ]
    },
    {
      "function": false,
      "is_abstract": true,
      "name": "SearchMessagesFilter",
      "properties": [],
      "type": "Base",
      "description": "Represents a filter for message search results",
      "children": [
        {
          "function": false,
          "is_abstract": false,
          "name": "searchMessagesFilterEmpty",
          "properties": [],
          "type": "SearchMessagesFilter",
          "description": "Returns all found messages, no filter is applied",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "searchMessagesFilterAnimation",
          "properties": [],
          "type": "SearchMessagesFilter",
          "description": "Returns only animation messages",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "searchMessagesFilterAudio",
          "properties": [],
          "type": "SearchMessagesFilter",
          "description": "Returns only audio messages",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "searchMessagesFilterDocument",
          "properties": [],
          "type": "SearchMessagesFilter",
          "description": "Returns only document messages",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "searchMessagesFilterPhoto",
          "properties": [],
          "type": "SearchMessagesFilter",
          "description": "Returns only photo messages",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "searchMessagesFilterVideo",
          "properties": [],
          "type": "SearchMessagesFilter",
          "description": "Returns only video messages",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "searchMessagesFilterVoiceNote",
          "properties": [],
          "type": "SearchMessagesFilter",
          "description": "Returns only voice note messages",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "searchMessagesFilterPhotoAndVideo",
          "properties": [],
          "type": "SearchMessagesFilter",
          "description": "Returns only photo and video messages",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "searchMessagesFilterUrl",
          "properties": [],
          "type": "SearchMessagesFilter",
          "description": "Returns only messages containing URLs",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "searchMessagesFilterChatPhoto",
          "properties": [],
          "type": "SearchMessagesFilter",
          "description": "Returns only messages containing chat photos",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "searchMessagesFilterCall",
          "properties": [],
          "type": "SearchMessagesFilter",
          "description": "Returns only call messages",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "searchMessagesFilterMissedCall",
          "properties": [],
          "type": "SearchMessagesFilter",
          "description": "Returns only incoming call messages with missed/declined discard reasons",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "searchMessagesFilterVideoNote",
          "properties": [],
          "type": "SearchMessagesFilter",
          "description": "Returns only video note messages",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "searchMessagesFilterVoiceAndVideoNote",
          "properties": [],
          "type": "SearchMessagesFilter",
          "description": "Returns only voice and video note messages",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "searchMessagesFilterMention",
          "properties": [],
          "type": "SearchMessagesFilter",
          "description": "Returns only messages with mentions of the current user, or messages that are replies to their messages",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "searchMessagesFilterUnreadMention",
          "properties": [],
          "type": "SearchMessagesFilter",
          "description": "Returns only messages with unread mentions of the current user, or messages that are replies to their messages. When using this filter the results can't be additionally filtered by a query or by the sending user",
          "children": []
        }
      ]
    },
    {
      "function": false,
      "is_abstract": true,
      "name": "ChatAction",
      "properties": [],
      "type": "Base",
      "description": "Describes the different types of activity in a chat",
      "children": [
        {
          "function": false,
          "is_abstract": false,
          "name": "chatActionTyping",
          "properties": [],
          "type": "ChatAction",
          "description": "The user is typing a message",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "chatActionRecordingVideo",
          "properties": [],
          "type": "ChatAction",
          "description": "The user is recording a video",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "chatActionUploadingVideo",
          "properties": [
            {
              "name": "progress",
              "type": "int32",
              "nilable": false
            }
          ],
          "type": "ChatAction",
          "description": "The user is uploading a video @progress Upload progress, as a percentage",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "chatActionRecordingVoiceNote",
          "properties": [],
          "type": "ChatAction",
          "description": "The user is recording a voice note",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "chatActionUploadingVoiceNote",
          "properties": [
            {
              "name": "progress",
              "type": "int32",
              "nilable": false
            }
          ],
          "type": "ChatAction",
          "description": "The user is uploading a voice note @progress Upload progress, as a percentage",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "chatActionUploadingPhoto",
          "properties": [
            {
              "name": "progress",
              "type": "int32",
              "nilable": false
            }
          ],
          "type": "ChatAction",
          "description": "The user is uploading a photo @progress Upload progress, as a percentage",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "chatActionUploadingDocument",
          "properties": [
            {
              "name": "progress",
              "type": "int32",
              "nilable": false
            }
          ],
          "type": "ChatAction",
          "description": "The user is uploading a document @progress Upload progress, as a percentage",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "chatActionChoosingLocation",
          "properties": [],
          "type": "ChatAction",
          "description": "The user is picking a location or venue to send",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "chatActionChoosingContact",
          "properties": [],
          "type": "ChatAction",
          "description": "The user is picking a contact to send",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "chatActionStartPlayingGame",
          "properties": [],
          "type": "ChatAction",
          "description": "The user has started to play a game",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "chatActionRecordingVideoNote",
          "properties": [],
          "type": "ChatAction",
          "description": "The user is recording a video note",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "chatActionUploadingVideoNote",
          "properties": [
            {
              "name": "progress",
              "type": "int32",
              "nilable": false
            }
          ],
          "type": "ChatAction",
          "description": "The user is uploading a video note @progress Upload progress, as a percentage",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "chatActionCancel",
          "properties": [],
          "type": "ChatAction",
          "description": "The user has cancelled the previous action",
          "children": []
        }
      ]
    },
    {
      "function": false,
      "is_abstract": true,
      "name": "UserStatus",
      "properties": [],
      "type": "Base",
      "description": "Describes the last time the user was online",
      "children": [
        {
          "function": false,
          "is_abstract": false,
          "name": "userStatusEmpty",
          "properties": [],
          "type": "UserStatus",
          "description": "The user status was never changed",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "userStatusOnline",
          "properties": [
            {
              "name": "expires",
              "type": "int32",
              "nilable": false
            }
          ],
          "type": "UserStatus",
          "description": "The user is online @expires Point in time (Unix timestamp) when the user's online status will expire",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "userStatusOffline",
          "properties": [
            {
              "name": "was_online",
              "type": "int32",
              "nilable": false
            }
          ],
          "type": "UserStatus",
          "description": "The user is offline @was_online Point in time (Unix timestamp) when the user was last online",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "userStatusRecently",
          "properties": [],
          "type": "UserStatus",
          "description": "The user was online recently",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "userStatusLastWeek",
          "properties": [],
          "type": "UserStatus",
          "description": "The user is offline, but was online last week",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "userStatusLastMonth",
          "properties": [],
          "type": "UserStatus",
          "description": "The user is offline, but was online last month",
          "children": []
        }
      ]
    },
    {
      "function": false,
      "is_abstract": true,
      "name": "CallDiscardReason",
      "properties": [],
      "type": "Base",
      "description": "Describes the reason why a call was discarded",
      "children": [
        {
          "function": false,
          "is_abstract": false,
          "name": "callDiscardReasonEmpty",
          "properties": [],
          "type": "CallDiscardReason",
          "description": "The call wasn't discarded, or the reason is unknown",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "callDiscardReasonMissed",
          "properties": [],
          "type": "CallDiscardReason",
          "description": "The call was ended before the conversation started. It was cancelled by the caller or missed by the other party",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "callDiscardReasonDeclined",
          "properties": [],
          "type": "CallDiscardReason",
          "description": "The call was ended before the conversation started. It was declined by the other party",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "callDiscardReasonDisconnected",
          "properties": [],
          "type": "CallDiscardReason",
          "description": "The call was ended during the conversation because the users were disconnected",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "callDiscardReasonHungUp",
          "properties": [],
          "type": "CallDiscardReason",
          "description": "The call was ended because one of the parties hung up",
          "children": []
        }
      ]
    },
    {
      "function": false,
      "is_abstract": true,
      "name": "CallState",
      "properties": [],
      "type": "Base",
      "description": "Describes the current call state",
      "children": [
        {
          "function": false,
          "is_abstract": false,
          "name": "callStatePending",
          "properties": [
            {
              "name": "is_created",
              "type": "Bool",
              "nilable": false
            },
            {
              "name": "is_received",
              "type": "Bool",
              "nilable": false
            }
          ],
          "type": "CallState",
          "description": "The call is pending, waiting to be accepted by a user @is_created True, if the call has already been created by the server @is_received True, if the call has already been received by the other party",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "callStateExchangingKeys",
          "properties": [],
          "type": "CallState",
          "description": "The call has been answered and encryption keys are being exchanged",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "callStateReady",
          "properties": [
            {
              "name": "protocol",
              "type": "callProtocol",
              "nilable": false
            },
            {
              "name": "connections",
              "type": "vector<callConnection>",
              "nilable": false
            },
            {
              "name": "config",
              "type": "string",
              "nilable": false
            },
            {
              "name": "encryption_key",
              "type": "bytes",
              "nilable": false
            },
            {
              "name": "emojis",
              "type": "vector<string>",
              "nilable": false
            },
            {
              "name": "allow_p2p",
              "type": "Bool",
              "nilable": false
            }
          ],
          "type": "CallState",
          "description": "The call is ready to use @protocol Call protocols supported by the peer @connections Available UDP reflectors @config A JSON-encoded call config @encryption_key Call encryption key @emojis Encryption key emojis fingerprint @allow_p2p True, if peer-to-peer connection is allowed by users privacy settings",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "callStateHangingUp",
          "properties": [],
          "type": "CallState",
          "description": "The call is hanging up after discardCall has been called",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "callStateDiscarded",
          "properties": [
            {
              "name": "reason",
              "type": "CallDiscardReason",
              "nilable": false
            },
            {
              "name": "need_rating",
              "type": "Bool",
              "nilable": false
            },
            {
              "name": "need_debug_information",
              "type": "Bool",
              "nilable": false
            }
          ],
          "type": "CallState",
          "description": "The call has ended successfully @reason The reason, why the call has ended @need_rating True, if the call rating should be sent to the server @need_debug_information True, if the call debug information should be sent to the server",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "callStateError",
          "properties": [
            {
              "name": "error",
              "type": "error",
              "nilable": false
            }
          ],
          "type": "CallState",
          "description": "The call has ended with an error @error Error. An error with the code 4005000 will be returned if an outgoing call is missed because of an expired timeout",
          "children": []
        }
      ]
    },
    {
      "function": false,
      "is_abstract": true,
      "name": "CallProblem",
      "properties": [],
      "type": "Base",
      "description": "Describes the exact type of a problem with a call",
      "children": [
        {
          "function": false,
          "is_abstract": false,
          "name": "callProblemEcho",
          "properties": [],
          "type": "CallProblem",
          "description": "The user heard their own voice",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "callProblemNoise",
          "properties": [],
          "type": "CallProblem",
          "description": "The user heard background noise",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "callProblemInterruptions",
          "properties": [],
          "type": "CallProblem",
          "description": "The other side kept disappearing",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "callProblemDistortedSpeech",
          "properties": [],
          "type": "CallProblem",
          "description": "The speech was distorted",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "callProblemSilentLocal",
          "properties": [],
          "type": "CallProblem",
          "description": "The user couldn't hear the other side",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "callProblemSilentRemote",
          "properties": [],
          "type": "CallProblem",
          "description": "The other side couldn't hear the user",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "callProblemDropped",
          "properties": [],
          "type": "CallProblem",
          "description": "The call ended unexpectedly",
          "children": []
        }
      ]
    },
    {
      "function": false,
      "is_abstract": true,
      "name": "InputInlineQueryResult",
      "properties": [],
      "type": "Base",
      "description": "Represents a single result of an inline query; for bots only",
      "children": [
        {
          "function": false,
          "is_abstract": false,
          "name": "inputInlineQueryResultAnimatedGif",
          "properties": [
            {
              "name": "id",
              "type": "string",
              "nilable": false
            },
            {
              "name": "title",
              "type": "string",
              "nilable": false
            },
            {
              "name": "thumbnail_url",
              "type": "string",
              "nilable": false
            },
            {
              "name": "gif_url",
              "type": "string",
              "description": "The URL of the GIF-file (file size must not exceed 1MB) @gif_duration Duration of the GIF, in seconds @gif_width Width of the GIF @gif_height Height of the GIF",
              "nilable": false
            },
            {
              "name": "gif_duration",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "gif_width",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "gif_height",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "reply_markup",
              "type": "ReplyMarkup",
              "description": "The message reply markup. Must be of type replyMarkupInlineKeyboard or null",
              "nilable": false
            },
            {
              "name": "input_message_content",
              "type": "InputMessageContent",
              "description": "The content of the message to be sent. Must be one of the following types: InputMessageText, InputMessageAnimation, InputMessageLocation, InputMessageVenue or InputMessageContact",
              "nilable": false
            }
          ],
          "type": "InputInlineQueryResult",
          "description": "Represents a link to an animated GIF @id Unique identifier of the query result @title Title of the query result @thumbnail_url URL of the static result thumbnail (JPEG or GIF), if it exists",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "string",
          "properties": [
            {
              "name": "title",
              "type": "string",
              "nilable": false
            },
            {
              "name": "thumbnail_url",
              "type": "string",
              "nilable": false
            },
            {
              "name": "mpeg4_url",
              "type": "string",
              "description": "The URL of the MPEG4-file (file size must not exceed 1MB) @mpeg4_duration Duration of the video, in seconds @mpeg4_width Width of the video @mpeg4_height Height of the video",
              "nilable": false
            },
            {
              "name": "mpeg4_duration",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "mpeg4_width",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "mpeg4_height",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "reply_markup",
              "type": "ReplyMarkup",
              "description": "The message reply markup. Must be of type replyMarkupInlineKeyboard or null",
              "nilable": false
            },
            {
              "name": "input_message_content",
              "type": "InputMessageContent",
              "description": "The content of the message to be sent. Must be one of the following types: InputMessageText, InputMessageAnimation, InputMessageLocation, InputMessageVenue or InputMessageContact",
              "nilable": false
            }
          ],
          "type": "InputInlineQueryResult",
          "description": "Represents a link to an animated (i.e. without sound) H.264/MPEG-4 AVC video @id Unique identifier of the query result @title Title of the result @thumbnail_url URL of the static result thumbnail (JPEG or GIF), if it exists",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "inputInlineQueryResultArticle",
          "properties": [
            {
              "name": "id",
              "type": "string",
              "nilable": false
            },
            {
              "name": "url",
              "type": "string",
              "nilable": false
            },
            {
              "name": "hide_url",
              "type": "Bool",
              "nilable": false
            },
            {
              "name": "title",
              "type": "string",
              "nilable": false
            },
            {
              "name": "description",
              "type": "string",
              "description": "Represents a link to an article or web page @id Unique identifier of the query result @url URL of the result, if it exists @hide_url True, if the URL must be not shown @title Title of the result",
              "nilable": false
            },
            {
              "name": "thumbnail_url",
              "type": "string",
              "nilable": false
            },
            {
              "name": "thumbnail_width",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "thumbnail_height",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "reply_markup",
              "type": "ReplyMarkup",
              "description": "The message reply markup. Must be of type replyMarkupInlineKeyboard or null",
              "nilable": false
            },
            {
              "name": "input_message_content",
              "type": "InputMessageContent",
              "description": "The content of the message to be sent. Must be one of the following types: InputMessageText, InputMessageLocation, InputMessageVenue or InputMessageContact",
              "nilable": false
            }
          ],
          "type": "InputInlineQueryResult",
          "description": "Represents a link to an article or web page @id Unique identifier of the query result @url URL of the result, if it exists @hide_url True, if the URL must be not shown @title Title of the result",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "inputInlineQueryResultAudio",
          "properties": [
            {
              "name": "id",
              "type": "string",
              "nilable": false
            },
            {
              "name": "title",
              "type": "string",
              "nilable": false
            },
            {
              "name": "performer",
              "type": "string",
              "nilable": false
            },
            {
              "name": "audio_url",
              "type": "string",
              "description": "The URL of the audio file @audio_duration Audio file duration, in seconds",
              "nilable": false
            },
            {
              "name": "audio_duration",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "reply_markup",
              "type": "ReplyMarkup",
              "description": "The message reply markup. Must be of type replyMarkupInlineKeyboard or null",
              "nilable": false
            },
            {
              "name": "input_message_content",
              "type": "InputMessageContent",
              "description": "The content of the message to be sent. Must be one of the following types: InputMessageText, InputMessageAudio, InputMessageLocation, InputMessageVenue or InputMessageContact",
              "nilable": false
            }
          ],
          "type": "InputInlineQueryResult",
          "description": "Represents a link to an MP3 audio file @id Unique identifier of the query result @title Title of the audio file @performer Performer of the audio file",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "inputInlineQueryResultContact",
          "properties": [
            {
              "name": "id",
              "type": "string",
              "nilable": false
            },
            {
              "name": "contact",
              "type": "contact",
              "nilable": false
            },
            {
              "name": "thumbnail_url",
              "type": "string",
              "nilable": false
            },
            {
              "name": "thumbnail_width",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "thumbnail_height",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "reply_markup",
              "type": "ReplyMarkup",
              "description": "The message reply markup. Must be of type replyMarkupInlineKeyboard or null",
              "nilable": false
            },
            {
              "name": "input_message_content",
              "type": "InputMessageContent",
              "description": "The content of the message to be sent. Must be one of the following types: InputMessageText, InputMessageLocation, InputMessageVenue or InputMessageContact",
              "nilable": false
            }
          ],
          "type": "InputInlineQueryResult",
          "description": "Represents a user contact @id Unique identifier of the query result @contact User contact @thumbnail_url URL of the result thumbnail, if it exists @thumbnail_width Thumbnail width, if known @thumbnail_height Thumbnail height, if known",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "inputInlineQueryResultDocument",
          "properties": [
            {
              "name": "id",
              "type": "string",
              "nilable": false
            },
            {
              "name": "title",
              "type": "string",
              "nilable": false
            },
            {
              "name": "description",
              "type": "string",
              "description": "Represents a link to a file @id Unique identifier of the query result @title Title of the resulting file @param_description Short description of the result, if known @document_url URL of the file @mime_type MIME type of the file content; only \"application/pdf\" and \"application/zip\" are currently allowed",
              "nilable": false
            },
            {
              "name": "document_url",
              "type": "string",
              "nilable": false
            },
            {
              "name": "mime_type",
              "type": "string",
              "nilable": false
            },
            {
              "name": "thumbnail_url",
              "type": "string",
              "description": "The URL of the file thumbnail, if it exists @thumbnail_width Width of the thumbnail @thumbnail_height Height of the thumbnail",
              "nilable": false
            },
            {
              "name": "thumbnail_width",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "thumbnail_height",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "reply_markup",
              "type": "ReplyMarkup",
              "description": "The message reply markup. Must be of type replyMarkupInlineKeyboard or null",
              "nilable": false
            },
            {
              "name": "input_message_content",
              "type": "InputMessageContent",
              "description": "The content of the message to be sent. Must be one of the following types: InputMessageText, InputMessageDocument, InputMessageLocation, InputMessageVenue or InputMessageContact",
              "nilable": false
            }
          ],
          "type": "InputInlineQueryResult",
          "description": "Represents a link to a file @id Unique identifier of the query result @title Title of the resulting file @param_description Short description of the result, if known @document_url URL of the file @mime_type MIME type of the file content; only \"application/pdf\" and \"application/zip\" are currently allowed",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "inputInlineQueryResultGame",
          "properties": [
            {
              "name": "id",
              "type": "string",
              "nilable": false
            },
            {
              "name": "game_short_name",
              "type": "string",
              "nilable": false
            },
            {
              "name": "reply_markup",
              "type": "ReplyMarkup",
              "nilable": false
            }
          ],
          "type": "InputInlineQueryResult",
          "description": "Represents a game @id Unique identifier of the query result @game_short_name Short name of the game @reply_markup Message reply markup. Must be of type replyMarkupInlineKeyboard or null",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "inputInlineQueryResultLocation",
          "properties": [
            {
              "name": "id",
              "type": "string",
              "nilable": false
            },
            {
              "name": "location",
              "type": "location",
              "nilable": false
            },
            {
              "name": "live_period",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "title",
              "type": "string",
              "nilable": false
            },
            {
              "name": "thumbnail_url",
              "type": "string",
              "nilable": false
            },
            {
              "name": "thumbnail_width",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "thumbnail_height",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "reply_markup",
              "type": "ReplyMarkup",
              "description": "The message reply markup. Must be of type replyMarkupInlineKeyboard or null",
              "nilable": false
            },
            {
              "name": "input_message_content",
              "type": "InputMessageContent",
              "description": "The content of the message to be sent. Must be one of the following types: InputMessageText, InputMessageLocation, InputMessageVenue or InputMessageContact",
              "nilable": false
            }
          ],
          "type": "InputInlineQueryResult",
          "description": "Represents a point on the map @id Unique identifier of the query result @location Location result @live_period Amount of time relative to the message sent time until the location can be updated, in seconds @title Title of the result @thumbnail_url URL of the result thumbnail, if it exists @thumbnail_width Thumbnail width, if known @thumbnail_height Thumbnail height, if known",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "inputInlineQueryResultPhoto",
          "properties": [
            {
              "name": "id",
              "type": "string",
              "nilable": false
            },
            {
              "name": "title",
              "type": "string",
              "nilable": false
            },
            {
              "name": "description",
              "type": "string",
              "description": "Represents link to a JPEG image @id Unique identifier of the query result @title Title of the result, if known @param_description A short description of the result, if known @thumbnail_url URL of the photo thumbnail, if it exists",
              "nilable": false
            },
            {
              "name": "thumbnail_url",
              "type": "string",
              "nilable": false
            },
            {
              "name": "photo_url",
              "type": "string",
              "description": "The URL of the JPEG photo (photo size must not exceed 5MB) @photo_width Width of the photo @photo_height Height of the photo",
              "nilable": false
            },
            {
              "name": "photo_width",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "photo_height",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "reply_markup",
              "type": "ReplyMarkup",
              "description": "The message reply markup. Must be of type replyMarkupInlineKeyboard or null",
              "nilable": false
            },
            {
              "name": "input_message_content",
              "type": "InputMessageContent",
              "description": "The content of the message to be sent. Must be one of the following types: InputMessageText, InputMessagePhoto, InputMessageLocation, InputMessageVenue or InputMessageContact",
              "nilable": false
            }
          ],
          "type": "InputInlineQueryResult",
          "description": "Represents link to a JPEG image @id Unique identifier of the query result @title Title of the result, if known @param_description A short description of the result, if known @thumbnail_url URL of the photo thumbnail, if it exists",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "inputInlineQueryResultSticker",
          "properties": [
            {
              "name": "id",
              "type": "string",
              "nilable": false
            },
            {
              "name": "thumbnail_url",
              "type": "string",
              "nilable": false
            },
            {
              "name": "sticker_url",
              "type": "string",
              "description": "The URL of the WEBP or a TGS sticker (sticker file size must not exceed 5MB) @sticker_width Width of the sticker @sticker_height Height of the sticker",
              "nilable": false
            },
            {
              "name": "sticker_width",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "sticker_height",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "reply_markup",
              "type": "ReplyMarkup",
              "description": "The message reply markup. Must be of type replyMarkupInlineKeyboard or null",
              "nilable": false
            },
            {
              "name": "input_message_content",
              "type": "InputMessageContent",
              "description": "The content of the message to be sent. Must be one of the following types: InputMessageText, inputMessageSticker, InputMessageLocation, InputMessageVenue or InputMessageContact",
              "nilable": false
            }
          ],
          "type": "InputInlineQueryResult",
          "description": "Represents a link to a WEBP or a TGS sticker @id Unique identifier of the query result @thumbnail_url URL of the sticker thumbnail, if it exists",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "inputInlineQueryResultVenue",
          "properties": [
            {
              "name": "id",
              "type": "string",
              "nilable": false
            },
            {
              "name": "venue",
              "type": "venue",
              "nilable": false
            },
            {
              "name": "thumbnail_url",
              "type": "string",
              "nilable": false
            },
            {
              "name": "thumbnail_width",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "thumbnail_height",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "reply_markup",
              "type": "ReplyMarkup",
              "description": "The message reply markup. Must be of type replyMarkupInlineKeyboard or null",
              "nilable": false
            },
            {
              "name": "input_message_content",
              "type": "InputMessageContent",
              "description": "The content of the message to be sent. Must be one of the following types: InputMessageText, InputMessageLocation, InputMessageVenue or InputMessageContact",
              "nilable": false
            }
          ],
          "type": "InputInlineQueryResult",
          "description": "Represents information about a venue @id Unique identifier of the query result @venue Venue result @thumbnail_url URL of the result thumbnail, if it exists @thumbnail_width Thumbnail width, if known @thumbnail_height Thumbnail height, if known",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "inputInlineQueryResultVideo",
          "properties": [
            {
              "name": "id",
              "type": "string",
              "nilable": false
            },
            {
              "name": "title",
              "type": "string",
              "nilable": false
            },
            {
              "name": "description",
              "type": "string",
              "description": "Represents a link to a page containing an embedded video player or a video file @id Unique identifier of the query result @title Title of the result @param_description A short description of the result, if known",
              "nilable": false
            },
            {
              "name": "thumbnail_url",
              "type": "string",
              "description": "The URL of the video thumbnail (JPEG), if it exists @video_url URL of the embedded video player or video file @mime_type MIME type of the content of the video URL, only \"text/html\" or \"video/mp4\" are currently supported",
              "nilable": false
            },
            {
              "name": "video_url",
              "type": "string",
              "nilable": false
            },
            {
              "name": "mime_type",
              "type": "string",
              "nilable": false
            },
            {
              "name": "video_width",
              "type": "int32",
              "description": "Width of the video @video_height Height of the video @video_duration Video duration, in seconds",
              "nilable": false
            },
            {
              "name": "video_height",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "video_duration",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "reply_markup",
              "type": "ReplyMarkup",
              "description": "The message reply markup. Must be of type replyMarkupInlineKeyboard or null",
              "nilable": false
            },
            {
              "name": "input_message_content",
              "type": "InputMessageContent",
              "description": "The content of the message to be sent. Must be one of the following types: InputMessageText, InputMessageVideo, InputMessageLocation, InputMessageVenue or InputMessageContact",
              "nilable": false
            }
          ],
          "type": "InputInlineQueryResult",
          "description": "Represents a link to a page containing an embedded video player or a video file @id Unique identifier of the query result @title Title of the result @param_description A short description of the result, if known",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "inputInlineQueryResultVoiceNote",
          "properties": [
            {
              "name": "id",
              "type": "string",
              "nilable": false
            },
            {
              "name": "title",
              "type": "string",
              "nilable": false
            },
            {
              "name": "voice_note_url",
              "type": "string",
              "description": "The URL of the voice note file @voice_note_duration Duration of the voice note, in seconds",
              "nilable": false
            },
            {
              "name": "voice_note_duration",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "reply_markup",
              "type": "ReplyMarkup",
              "description": "The message reply markup. Must be of type replyMarkupInlineKeyboard or null",
              "nilable": false
            },
            {
              "name": "input_message_content",
              "type": "InputMessageContent",
              "description": "The content of the message to be sent. Must be one of the following types: InputMessageText, InputMessageVoiceNote, InputMessageLocation, InputMessageVenue or InputMessageContact",
              "nilable": false
            }
          ],
          "type": "InputInlineQueryResult",
          "description": "Represents a link to an opus-encoded audio file within an OGG container, single channel audio @id Unique identifier of the query result @title Title of the voice note",
          "children": []
        }
      ]
    },
    {
      "function": false,
      "is_abstract": true,
      "name": "InlineQueryResult",
      "properties": [],
      "type": "Base",
      "description": "Represents a single result of an inline query",
      "children": [
        {
          "function": false,
          "is_abstract": false,
          "name": "inlineQueryResultArticle",
          "properties": [
            {
              "name": "id",
              "type": "string",
              "nilable": false
            },
            {
              "name": "url",
              "type": "string",
              "nilable": false
            },
            {
              "name": "hide_url",
              "type": "Bool",
              "nilable": false
            },
            {
              "name": "title",
              "type": "string",
              "nilable": false
            },
            {
              "name": "description",
              "type": "string",
              "description": "Represents a link to an article or web page @id Unique identifier of the query result @url URL of the result, if it exists @hide_url True, if the URL must be not shown @title Title of the result",
              "nilable": false
            },
            {
              "name": "thumbnail",
              "type": "photoSize",
              "nilable": false
            }
          ],
          "type": "InlineQueryResult",
          "description": "Represents a link to an article or web page @id Unique identifier of the query result @url URL of the result, if it exists @hide_url True, if the URL must be not shown @title Title of the result",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "inlineQueryResultContact",
          "properties": [
            {
              "name": "id",
              "type": "string",
              "nilable": false
            },
            {
              "name": "contact",
              "type": "contact",
              "nilable": false
            },
            {
              "name": "thumbnail",
              "type": "photoSize",
              "nilable": false
            }
          ],
          "type": "InlineQueryResult",
          "description": "Represents a user contact @id Unique identifier of the query result @contact A user contact @thumbnail Result thumbnail; may be null",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "inlineQueryResultLocation",
          "properties": [
            {
              "name": "id",
              "type": "string",
              "nilable": false
            },
            {
              "name": "location",
              "type": "location",
              "nilable": false
            },
            {
              "name": "title",
              "type": "string",
              "nilable": false
            },
            {
              "name": "thumbnail",
              "type": "photoSize",
              "nilable": false
            }
          ],
          "type": "InlineQueryResult",
          "description": "Represents a point on the map @id Unique identifier of the query result @location Location result @title Title of the result @thumbnail Result thumbnail; may be null",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "inlineQueryResultVenue",
          "properties": [
            {
              "name": "id",
              "type": "string",
              "nilable": false
            },
            {
              "name": "venue",
              "type": "venue",
              "nilable": false
            },
            {
              "name": "thumbnail",
              "type": "photoSize",
              "nilable": false
            }
          ],
          "type": "InlineQueryResult",
          "description": "Represents information about a venue @id Unique identifier of the query result @venue Venue result @thumbnail Result thumbnail; may be null",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "inlineQueryResultGame",
          "properties": [
            {
              "name": "id",
              "type": "string",
              "nilable": false
            },
            {
              "name": "game",
              "type": "game",
              "nilable": false
            }
          ],
          "type": "InlineQueryResult",
          "description": "Represents information about a game @id Unique identifier of the query result @game Game result",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "inlineQueryResultAnimation",
          "properties": [
            {
              "name": "id",
              "type": "string",
              "nilable": false
            },
            {
              "name": "animation",
              "type": "animation",
              "nilable": false
            },
            {
              "name": "title",
              "type": "string",
              "nilable": false
            }
          ],
          "type": "InlineQueryResult",
          "description": "Represents an animation file @id Unique identifier of the query result @animation Animation file @title Animation title",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "inlineQueryResultAudio",
          "properties": [
            {
              "name": "id",
              "type": "string",
              "nilable": false
            },
            {
              "name": "audio",
              "type": "audio",
              "nilable": false
            }
          ],
          "type": "InlineQueryResult",
          "description": "Represents an audio file @id Unique identifier of the query result @audio Audio file",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "inlineQueryResultDocument",
          "properties": [
            {
              "name": "id",
              "type": "string",
              "nilable": false
            },
            {
              "name": "document",
              "type": "document",
              "nilable": false
            },
            {
              "name": "title",
              "type": "string",
              "nilable": false
            },
            {
              "name": "description",
              "type": "string",
              "description": "Represents a document @id Unique identifier of the query result @document Document @title Document title @param_description Document description",
              "nilable": false
            }
          ],
          "type": "InlineQueryResult",
          "description": "Represents a document @id Unique identifier of the query result @document Document @title Document title @param_description Document description",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "inlineQueryResultPhoto",
          "properties": [
            {
              "name": "id",
              "type": "string",
              "nilable": false
            },
            {
              "name": "photo",
              "type": "photo",
              "nilable": false
            },
            {
              "name": "title",
              "type": "string",
              "nilable": false
            },
            {
              "name": "description",
              "type": "string",
              "description": "Represents a photo @id Unique identifier of the query result @photo Photo @title Title of the result, if known @param_description A short description of the result, if known",
              "nilable": false
            }
          ],
          "type": "InlineQueryResult",
          "description": "Represents a photo @id Unique identifier of the query result @photo Photo @title Title of the result, if known @param_description A short description of the result, if known",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "inlineQueryResultSticker",
          "properties": [
            {
              "name": "id",
              "type": "string",
              "nilable": false
            },
            {
              "name": "sticker",
              "type": "sticker",
              "nilable": false
            }
          ],
          "type": "InlineQueryResult",
          "description": "Represents a sticker @id Unique identifier of the query result @sticker Sticker",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "inlineQueryResultVideo",
          "properties": [
            {
              "name": "id",
              "type": "string",
              "nilable": false
            },
            {
              "name": "video",
              "type": "video",
              "nilable": false
            },
            {
              "name": "title",
              "type": "string",
              "nilable": false
            },
            {
              "name": "description",
              "type": "string",
              "description": "Represents a video @id Unique identifier of the query result @video Video @title Title of the video @param_description Description of the video",
              "nilable": false
            }
          ],
          "type": "InlineQueryResult",
          "description": "Represents a video @id Unique identifier of the query result @video Video @title Title of the video @param_description Description of the video",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "inlineQueryResultVoiceNote",
          "properties": [
            {
              "name": "id",
              "type": "string",
              "nilable": false
            },
            {
              "name": "voice_note",
              "type": "voiceNote",
              "nilable": false
            },
            {
              "name": "title",
              "type": "string",
              "nilable": false
            }
          ],
          "type": "InlineQueryResult",
          "description": "Represents a voice note @id Unique identifier of the query result @voice_note Voice note @title Title of the voice note",
          "children": []
        }
      ]
    },
    {
      "function": false,
      "is_abstract": true,
      "name": "CallbackQueryPayload",
      "properties": [],
      "type": "Base",
      "description": "Represents a payload of a callback query",
      "children": [
        {
          "function": false,
          "is_abstract": false,
          "name": "callbackQueryPayloadData",
          "properties": [
            {
              "name": "data",
              "type": "bytes",
              "nilable": false
            }
          ],
          "type": "CallbackQueryPayload",
          "description": "The payload from a general callback button @data Data that was attached to the callback button",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "callbackQueryPayloadGame",
          "properties": [
            {
              "name": "game_short_name",
              "type": "string",
              "nilable": false
            }
          ],
          "type": "CallbackQueryPayload",
          "description": "The payload from a game callback button @game_short_name A short name of the game that was attached to the callback button",
          "children": []
        }
      ]
    },
    {
      "function": false,
      "is_abstract": true,
      "name": "ChatEventAction",
      "properties": [],
      "type": "Base",
      "description": "Represents a chat event",
      "children": [
        {
          "function": false,
          "is_abstract": false,
          "name": "chatEventMessageEdited",
          "properties": [
            {
              "name": "old_message",
              "type": "message",
              "nilable": false
            },
            {
              "name": "new_message",
              "type": "message",
              "nilable": false
            }
          ],
          "type": "ChatEventAction",
          "description": "A message was edited @old_message The original message before the edit @new_message The message after it was edited",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "chatEventMessageDeleted",
          "properties": [
            {
              "name": "message",
              "type": "message",
              "nilable": false
            }
          ],
          "type": "ChatEventAction",
          "description": "A message was deleted @message Deleted message",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "chatEventPollStopped",
          "properties": [
            {
              "name": "message",
              "type": "message",
              "nilable": false
            }
          ],
          "type": "ChatEventAction",
          "description": "A poll in a message was stopped @message The message with the poll",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "chatEventMessagePinned",
          "properties": [
            {
              "name": "message",
              "type": "message",
              "nilable": false
            }
          ],
          "type": "ChatEventAction",
          "description": "A message was pinned @message Pinned message",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "chatEventMessageUnpinned",
          "properties": [],
          "type": "ChatEventAction",
          "description": "A message was unpinned",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "chatEventMemberJoined",
          "properties": [],
          "type": "ChatEventAction",
          "description": "A new member joined the chat",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "chatEventMemberLeft",
          "properties": [],
          "type": "ChatEventAction",
          "description": "A member left the chat",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "chatEventMemberInvited",
          "properties": [
            {
              "name": "user_id",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "status",
              "type": "ChatMemberStatus",
              "nilable": false
            }
          ],
          "type": "ChatEventAction",
          "description": "A new chat member was invited @user_id New member user identifier @status New member status",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "chatEventMemberPromoted",
          "properties": [
            {
              "name": "user_id",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "old_status",
              "type": "ChatMemberStatus",
              "nilable": false
            },
            {
              "name": "new_status",
              "type": "ChatMemberStatus",
              "nilable": false
            }
          ],
          "type": "ChatEventAction",
          "description": "A chat member has gained/lost administrator status, or the list of their administrator privileges has changed @user_id Chat member user identifier @old_status Previous status of the chat member @new_status New status of the chat member",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "chatEventMemberRestricted",
          "properties": [
            {
              "name": "user_id",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "old_status",
              "type": "ChatMemberStatus",
              "nilable": false
            },
            {
              "name": "new_status",
              "type": "ChatMemberStatus",
              "nilable": false
            }
          ],
          "type": "ChatEventAction",
          "description": "A chat member was restricted/unrestricted or banned/unbanned, or the list of their restrictions has changed @user_id Chat member user identifier @old_status Previous status of the chat member @new_status New status of the chat member",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "chatEventTitleChanged",
          "properties": [
            {
              "name": "old_title",
              "type": "string",
              "nilable": false
            },
            {
              "name": "new_title",
              "type": "string",
              "nilable": false
            }
          ],
          "type": "ChatEventAction",
          "description": "The chat title was changed @old_title Previous chat title @new_title New chat title",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "chatEventPermissionsChanged",
          "properties": [
            {
              "name": "old_permissions",
              "type": "chatPermissions",
              "nilable": false
            },
            {
              "name": "new_permissions",
              "type": "chatPermissions",
              "nilable": false
            }
          ],
          "type": "ChatEventAction",
          "description": "The chat permissions was changed @old_permissions Previous chat permissions @new_permissions New chat permissions",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "chatEventDescriptionChanged",
          "properties": [
            {
              "name": "old_description",
              "type": "string",
              "nilable": false
            },
            {
              "name": "new_description",
              "type": "string",
              "nilable": false
            }
          ],
          "type": "ChatEventAction",
          "description": "The chat description was changed @old_description Previous chat description @new_description New chat description",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "chatEventUsernameChanged",
          "properties": [
            {
              "name": "old_username",
              "type": "string",
              "nilable": false
            },
            {
              "name": "new_username",
              "type": "string",
              "nilable": false
            }
          ],
          "type": "ChatEventAction",
          "description": "The chat username was changed @old_username Previous chat username @new_username New chat username",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "chatEventPhotoChanged",
          "properties": [
            {
              "name": "old_photo",
              "type": "photo",
              "nilable": false
            },
            {
              "name": "new_photo",
              "type": "photo",
              "nilable": false
            }
          ],
          "type": "ChatEventAction",
          "description": "The chat photo was changed @old_photo Previous chat photo value; may be null @new_photo New chat photo value; may be null",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "chatEventInvitesToggled",
          "properties": [
            {
              "name": "can_invite_users",
              "type": "Bool",
              "nilable": false
            }
          ],
          "type": "ChatEventAction",
          "description": "The can_invite_users permission of a supergroup chat was toggled @can_invite_users New value of can_invite_users permission",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "chatEventSignMessagesToggled",
          "properties": [
            {
              "name": "sign_messages",
              "type": "Bool",
              "nilable": false
            }
          ],
          "type": "ChatEventAction",
          "description": "The sign_messages setting of a channel was toggled @sign_messages New value of sign_messages",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "chatEventStickerSetChanged",
          "properties": [
            {
              "name": "old_sticker_set_id",
              "type": "int64",
              "nilable": false
            },
            {
              "name": "new_sticker_set_id",
              "type": "int64",
              "nilable": false
            }
          ],
          "type": "ChatEventAction",
          "description": "The supergroup sticker set was changed @old_sticker_set_id Previous identifier of the chat sticker set; 0 if none @new_sticker_set_id New identifier of the chat sticker set; 0 if none",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "chatEventIsAllHistoryAvailableToggled",
          "properties": [
            {
              "name": "is_all_history_available",
              "type": "Bool",
              "nilable": false
            }
          ],
          "type": "ChatEventAction",
          "description": "The is_all_history_available setting of a supergroup was toggled @is_all_history_available New value of is_all_history_available",
          "children": []
        }
      ]
    },
    {
      "function": false,
      "is_abstract": true,
      "name": "LanguagePackStringValue",
      "properties": [],
      "type": "Base",
      "description": "Represents the value of a string in a language pack",
      "children": [
        {
          "function": false,
          "is_abstract": false,
          "name": "languagePackStringValueOrdinary",
          "properties": [
            {
              "name": "value",
              "type": "string",
              "nilable": false
            }
          ],
          "type": "LanguagePackStringValue",
          "description": "An ordinary language pack string @value String value",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "languagePackStringValuePluralized",
          "properties": [
            {
              "name": "zero_value",
              "type": "string",
              "description": "Value for zero objects @one_value Value for one object @two_value Value for two objects",
              "nilable": false
            },
            {
              "name": "one_value",
              "type": "string",
              "nilable": false
            },
            {
              "name": "two_value",
              "type": "string",
              "nilable": false
            },
            {
              "name": "few_value",
              "type": "string",
              "description": "Value for few objects @many_value Value for many objects @other_value Default value",
              "nilable": false
            },
            {
              "name": "many_value",
              "type": "string",
              "nilable": false
            },
            {
              "name": "other_value",
              "type": "string",
              "nilable": false
            }
          ],
          "type": "LanguagePackStringValue",
          "description": "A language pack string which has different forms based on the number of some object it mentions. See https://www.unicode.org/cldr/charts/latest/supplemental/language_plural_rules.html for more info",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "languagePackStringValueDeleted",
          "properties": [],
          "type": "LanguagePackStringValue",
          "description": "A deleted language pack string, the value should be taken from the built-in english language pack",
          "children": []
        }
      ]
    },
    {
      "function": false,
      "is_abstract": true,
      "name": "DeviceToken",
      "properties": [],
      "type": "Base",
      "description": "Represents a data needed to subscribe for push notifications through registerDevice method. To use specific push notification service, you must specify the correct application platform and upload valid server authentication data at https://my.telegram.org",
      "children": [
        {
          "function": false,
          "is_abstract": false,
          "name": "deviceTokenFirebaseCloudMessaging",
          "properties": [
            {
              "name": "token",
              "type": "string",
              "nilable": false
            },
            {
              "name": "encrypt",
              "type": "Bool",
              "nilable": false
            }
          ],
          "type": "DeviceToken",
          "description": "A token for Firebase Cloud Messaging @token Device registration token; may be empty to de-register a device @encrypt True, if push notifications should be additionally encrypted",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "deviceTokenApplePush",
          "properties": [
            {
              "name": "device_token",
              "type": "string",
              "nilable": false
            },
            {
              "name": "is_app_sandbox",
              "type": "Bool",
              "nilable": false
            }
          ],
          "type": "DeviceToken",
          "description": "A token for Apple Push Notification service @device_token Device token; may be empty to de-register a device @is_app_sandbox True, if App Sandbox is enabled",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "deviceTokenApplePushVoIP",
          "properties": [
            {
              "name": "device_token",
              "type": "string",
              "nilable": false
            },
            {
              "name": "is_app_sandbox",
              "type": "Bool",
              "nilable": false
            },
            {
              "name": "encrypt",
              "type": "Bool",
              "nilable": false
            }
          ],
          "type": "DeviceToken",
          "description": "A token for Apple Push Notification service VoIP notifications @device_token Device token; may be empty to de-register a device @is_app_sandbox True, if App Sandbox is enabled @encrypt True, if push notifications should be additionally encrypted",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "deviceTokenWindowsPush",
          "properties": [
            {
              "name": "access_token",
              "type": "string",
              "nilable": false
            }
          ],
          "type": "DeviceToken",
          "description": "A token for Windows Push Notification Services @access_token The access token that will be used to send notifications; may be empty to de-register a device",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "deviceTokenMicrosoftPush",
          "properties": [
            {
              "name": "channel_uri",
              "type": "string",
              "nilable": false
            }
          ],
          "type": "DeviceToken",
          "description": "A token for Microsoft Push Notification Service @channel_uri Push notification channel URI; may be empty to de-register a device",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "deviceTokenMicrosoftPushVoIP",
          "properties": [
            {
              "name": "channel_uri",
              "type": "string",
              "nilable": false
            }
          ],
          "type": "DeviceToken",
          "description": "A token for Microsoft Push Notification Service VoIP channel @channel_uri Push notification channel URI; may be empty to de-register a device",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "deviceTokenWebPush",
          "properties": [
            {
              "name": "endpoint",
              "type": "string",
              "nilable": false
            },
            {
              "name": "p256dh_base64url",
              "type": "string",
              "description": "Base64url-encoded P-256 elliptic curve Diffie-Hellman public key @auth_base64url Base64url-encoded authentication secret",
              "nilable": false
            },
            {
              "name": "auth_base64url",
              "type": "string",
              "nilable": false
            }
          ],
          "type": "DeviceToken",
          "description": "A token for web Push API @endpoint Absolute URL exposed by the push service where the application server can send push messages; may be empty to de-register a device",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "deviceTokenSimplePush",
          "properties": [
            {
              "name": "endpoint",
              "type": "string",
              "nilable": false
            }
          ],
          "type": "DeviceToken",
          "description": "A token for Simple Push API for Firefox OS @endpoint Absolute URL exposed by the push service where the application server can send push messages; may be empty to de-register a device",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "deviceTokenUbuntuPush",
          "properties": [
            {
              "name": "token",
              "type": "string",
              "nilable": false
            }
          ],
          "type": "DeviceToken",
          "description": "A token for Ubuntu Push Client service @token Token; may be empty to de-register a device",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "deviceTokenBlackBerryPush",
          "properties": [
            {
              "name": "token",
              "type": "string",
              "nilable": false
            }
          ],
          "type": "DeviceToken",
          "description": "A token for BlackBerry Push Service @token Token; may be empty to de-register a device",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "deviceTokenTizenPush",
          "properties": [
            {
              "name": "reg_id",
              "type": "string",
              "nilable": false
            }
          ],
          "type": "DeviceToken",
          "description": "A token for Tizen Push Service @reg_id Push service registration identifier; may be empty to de-register a device",
          "children": []
        }
      ]
    },
    {
      "function": false,
      "is_abstract": true,
      "name": "BackgroundType",
      "properties": [],
      "type": "Base",
      "description": "Describes a type of a background",
      "children": [
        {
          "function": false,
          "is_abstract": false,
          "name": "backgroundTypeWallpaper",
          "properties": [
            {
              "name": "is_blurred",
              "type": "Bool",
              "description": "True, if the wallpaper must be downscaled to fit in 450x450 square and then box-blurred with radius 12",
              "nilable": false
            },
            {
              "name": "is_moving",
              "type": "Bool",
              "description": "True, if the background needs to be slightly moved when device is rotated",
              "nilable": false
            }
          ],
          "type": "BackgroundType",
          "description": "A wallpaper in JPEG format",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "backgroundTypePattern",
          "properties": [
            {
              "name": "is_moving",
              "type": "Bool",
              "description": "True, if the background needs to be slightly moved when device is rotated",
              "nilable": false
            },
            {
              "name": "color",
              "type": "int32",
              "description": "Main color of the background in RGB24 format",
              "nilable": false
            },
            {
              "name": "intensity",
              "type": "int32",
              "description": "Intensity of the pattern when it is shown above the main background color, 0-100",
              "nilable": false
            }
          ],
          "type": "BackgroundType",
          "description": "A PNG pattern to be combined with the color chosen by the user",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "backgroundTypeSolid",
          "properties": [
            {
              "name": "color",
              "type": "int32",
              "nilable": false
            }
          ],
          "type": "BackgroundType",
          "description": "A solid background @color A color of the background in RGB24 format",
          "children": []
        }
      ]
    },
    {
      "function": false,
      "is_abstract": true,
      "name": "InputBackground",
      "properties": [],
      "type": "Base",
      "description": "Contains information about background to set",
      "children": [
        {
          "function": false,
          "is_abstract": false,
          "name": "inputBackgroundLocal",
          "properties": [
            {
              "name": "background",
              "type": "InputFile",
              "description": "Background file to use. Only inputFileLocal and inputFileGenerated are supported. The file nust be in JPEG format for wallpapers and in PNG format for patterns",
              "nilable": false
            }
          ],
          "type": "InputBackground",
          "description": "A background from a local file",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "inputBackgroundRemote",
          "properties": [
            {
              "name": "background_id",
              "type": "int64",
              "nilable": false
            }
          ],
          "type": "InputBackground",
          "description": "A background from the server @background_id The background identifier",
          "children": []
        }
      ]
    },
    {
      "function": false,
      "is_abstract": true,
      "name": "CheckChatUsernameResult",
      "properties": [],
      "type": "Base",
      "description": "Represents result of checking whether a username can be set for a chat",
      "children": [
        {
          "function": false,
          "is_abstract": false,
          "name": "checkChatUsernameResultOk",
          "properties": [],
          "type": "CheckChatUsernameResult",
          "description": "The username can be set",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "checkChatUsernameResultUsernameInvalid",
          "properties": [],
          "type": "CheckChatUsernameResult",
          "description": "The username is invalid",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "checkChatUsernameResultUsernameOccupied",
          "properties": [],
          "type": "CheckChatUsernameResult",
          "description": "The username is occupied",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "checkChatUsernameResultPublicChatsTooMuch",
          "properties": [],
          "type": "CheckChatUsernameResult",
          "description": "The user has too much chats with username, one of them should be made private first",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "checkChatUsernameResultPublicGroupsUnavailable",
          "properties": [],
          "type": "CheckChatUsernameResult",
          "description": "The user can't be a member of a public supergroup",
          "children": []
        }
      ]
    },
    {
      "function": false,
      "is_abstract": true,
      "name": "PushMessageContent",
      "properties": [],
      "type": "Base",
      "description": "Contains content of a push message notification",
      "children": [
        {
          "function": false,
          "is_abstract": false,
          "name": "pushMessageContentHidden",
          "properties": [
            {
              "name": "is_pinned",
              "type": "Bool",
              "nilable": false
            }
          ],
          "type": "PushMessageContent",
          "description": "A general message with hidden content @is_pinned True, if the message is a pinned message with the specified content",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "pushMessageContentAnimation",
          "properties": [
            {
              "name": "animation",
              "type": "animation",
              "nilable": false
            },
            {
              "name": "caption",
              "type": "string",
              "nilable": false
            },
            {
              "name": "is_pinned",
              "type": "Bool",
              "nilable": false
            }
          ],
          "type": "PushMessageContent",
          "description": "An animation message (GIF-style). @animation Message content; may be null @caption Animation caption @is_pinned True, if the message is a pinned message with the specified content",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "pushMessageContentAudio",
          "properties": [
            {
              "name": "audio",
              "type": "audio",
              "nilable": false
            },
            {
              "name": "is_pinned",
              "type": "Bool",
              "nilable": false
            }
          ],
          "type": "PushMessageContent",
          "description": "An audio message @audio Message content; may be null @is_pinned True, if the message is a pinned message with the specified content",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "pushMessageContentContact",
          "properties": [
            {
              "name": "name",
              "type": "string",
              "nilable": false
            },
            {
              "name": "is_pinned",
              "type": "Bool",
              "nilable": false
            }
          ],
          "type": "PushMessageContent",
          "description": "A message with a user contact @name Contact's name @is_pinned True, if the message is a pinned message with the specified content",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "pushMessageContentContactRegistered",
          "properties": [],
          "type": "PushMessageContent",
          "description": "A contact has registered with Telegram",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "pushMessageContentDocument",
          "properties": [
            {
              "name": "document",
              "type": "document",
              "nilable": false
            },
            {
              "name": "is_pinned",
              "type": "Bool",
              "nilable": false
            }
          ],
          "type": "PushMessageContent",
          "description": "A document message (a general file) @document Message content; may be null @is_pinned True, if the message is a pinned message with the specified content",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "pushMessageContentGame",
          "properties": [
            {
              "name": "title",
              "type": "string",
              "nilable": false
            },
            {
              "name": "is_pinned",
              "type": "Bool",
              "nilable": false
            }
          ],
          "type": "PushMessageContent",
          "description": "A message with a game @title Game title, empty for pinned game message @is_pinned True, if the message is a pinned message with the specified content",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "pushMessageContentGameScore",
          "properties": [
            {
              "name": "title",
              "type": "string",
              "nilable": false
            },
            {
              "name": "score",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "is_pinned",
              "type": "Bool",
              "nilable": false
            }
          ],
          "type": "PushMessageContent",
          "description": "A new high score was achieved in a game @title Game title, empty for pinned message @score New score, 0 for pinned message @is_pinned True, if the message is a pinned message with the specified content",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "pushMessageContentInvoice",
          "properties": [
            {
              "name": "price",
              "type": "string",
              "nilable": false
            },
            {
              "name": "is_pinned",
              "type": "Bool",
              "nilable": false
            }
          ],
          "type": "PushMessageContent",
          "description": "A message with an invoice from a bot @price Product price @is_pinned True, if the message is a pinned message with the specified content",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "pushMessageContentLocation",
          "properties": [
            {
              "name": "is_live",
              "type": "Bool",
              "nilable": false
            },
            {
              "name": "is_pinned",
              "type": "Bool",
              "nilable": false
            }
          ],
          "type": "PushMessageContent",
          "description": "A message with a location @is_live True, if the location is live @is_pinned True, if the message is a pinned message with the specified content",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "pushMessageContentPhoto",
          "properties": [
            {
              "name": "photo",
              "type": "photo",
              "nilable": false
            },
            {
              "name": "caption",
              "type": "string",
              "nilable": false
            },
            {
              "name": "is_secret",
              "type": "Bool",
              "nilable": false
            },
            {
              "name": "is_pinned",
              "type": "Bool",
              "nilable": false
            }
          ],
          "type": "PushMessageContent",
          "description": "A photo message @photo Message content; may be null @caption Photo caption @is_secret True, if the photo is secret @is_pinned True, if the message is a pinned message with the specified content",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "pushMessageContentPoll",
          "properties": [
            {
              "name": "question",
              "type": "string",
              "nilable": false
            },
            {
              "name": "is_pinned",
              "type": "Bool",
              "nilable": false
            }
          ],
          "type": "PushMessageContent",
          "description": "A message with a poll @question Poll question @is_pinned True, if the message is a pinned message with the specified content",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "pushMessageContentScreenshotTaken",
          "properties": [],
          "type": "PushMessageContent",
          "description": "A screenshot of a message in the chat has been taken",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "pushMessageContentSticker",
          "properties": [
            {
              "name": "sticker",
              "type": "sticker",
              "nilable": false
            },
            {
              "name": "emoji",
              "type": "string",
              "nilable": false
            },
            {
              "name": "is_pinned",
              "type": "Bool",
              "nilable": false
            }
          ],
          "type": "PushMessageContent",
          "description": "A message with a sticker @sticker Message content; may be null @emoji Emoji corresponding to the sticker; may be empty @is_pinned True, if the message is a pinned message with the specified content",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "pushMessageContentText",
          "properties": [
            {
              "name": "text",
              "type": "string",
              "nilable": false
            },
            {
              "name": "is_pinned",
              "type": "Bool",
              "nilable": false
            }
          ],
          "type": "PushMessageContent",
          "description": "A text message @text Message text @is_pinned True, if the message is a pinned message with the specified content",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "pushMessageContentVideo",
          "properties": [
            {
              "name": "video",
              "type": "video",
              "nilable": false
            },
            {
              "name": "caption",
              "type": "string",
              "nilable": false
            },
            {
              "name": "is_secret",
              "type": "Bool",
              "nilable": false
            },
            {
              "name": "is_pinned",
              "type": "Bool",
              "nilable": false
            }
          ],
          "type": "PushMessageContent",
          "description": "A video message @video Message content; may be null @caption Video caption @is_secret True, if the video is secret @is_pinned True, if the message is a pinned message with the specified content",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "pushMessageContentVideoNote",
          "properties": [
            {
              "name": "video_note",
              "type": "videoNote",
              "nilable": false
            },
            {
              "name": "is_pinned",
              "type": "Bool",
              "nilable": false
            }
          ],
          "type": "PushMessageContent",
          "description": "A video note message @video_note Message content; may be null @is_pinned True, if the message is a pinned message with the specified content",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "pushMessageContentVoiceNote",
          "properties": [
            {
              "name": "voice_note",
              "type": "voiceNote",
              "nilable": false
            },
            {
              "name": "is_pinned",
              "type": "Bool",
              "nilable": false
            }
          ],
          "type": "PushMessageContent",
          "description": "A voice note message @voice_note Message content; may be null @is_pinned True, if the message is a pinned message with the specified content",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "pushMessageContentBasicGroupChatCreate",
          "properties": [],
          "type": "PushMessageContent",
          "description": "A newly created basic group",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "pushMessageContentChatAddMembers",
          "properties": [
            {
              "name": "member_name",
              "type": "string",
              "nilable": false
            },
            {
              "name": "is_current_user",
              "type": "Bool",
              "nilable": false
            },
            {
              "name": "is_returned",
              "type": "Bool",
              "description": "True, if the user has returned to the group himself",
              "nilable": false
            }
          ],
          "type": "PushMessageContent",
          "description": "New chat members were invited to a group @member_name Name of the added member @is_current_user True, if the current user was added to the group",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "pushMessageContentChatChangePhoto",
          "properties": [],
          "type": "PushMessageContent",
          "description": "A chat photo was edited",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "pushMessageContentChatChangeTitle",
          "properties": [
            {
              "name": "title",
              "type": "string",
              "nilable": false
            }
          ],
          "type": "PushMessageContent",
          "description": "A chat title was edited @title New chat title",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "pushMessageContentChatDeleteMember",
          "properties": [
            {
              "name": "member_name",
              "type": "string",
              "nilable": false
            },
            {
              "name": "is_current_user",
              "type": "Bool",
              "nilable": false
            },
            {
              "name": "is_left",
              "type": "Bool",
              "description": "True, if the user has left the group himself",
              "nilable": false
            }
          ],
          "type": "PushMessageContent",
          "description": "A chat member was deleted @member_name Name of the deleted member @is_current_user True, if the current user was deleted from the group",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "pushMessageContentChatJoinByLink",
          "properties": [],
          "type": "PushMessageContent",
          "description": "A new member joined the chat by invite link",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "pushMessageContentMessageForwards",
          "properties": [
            {
              "name": "total_count",
              "type": "int32",
              "nilable": false
            }
          ],
          "type": "PushMessageContent",
          "description": "A forwarded messages @total_count Number of forwarded messages",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "pushMessageContentMediaAlbum",
          "properties": [
            {
              "name": "total_count",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "has_photos",
              "type": "Bool",
              "nilable": false
            },
            {
              "name": "has_videos",
              "type": "Bool",
              "nilable": false
            }
          ],
          "type": "PushMessageContent",
          "description": "A media album @total_count Number of messages in the album @has_photos True, if the album has at least one photo @has_videos True, if the album has at least one video",
          "children": []
        }
      ]
    },
    {
      "function": false,
      "is_abstract": true,
      "name": "NotificationType",
      "properties": [],
      "type": "Base",
      "description": "Contains detailed information about a notification",
      "children": [
        {
          "function": false,
          "is_abstract": false,
          "name": "notificationTypeNewMessage",
          "properties": [
            {
              "name": "message",
              "type": "message",
              "nilable": false
            }
          ],
          "type": "NotificationType",
          "description": "New message was received @message The message",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "notificationTypeNewSecretChat",
          "properties": [],
          "type": "NotificationType",
          "description": "New secret chat was created",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "notificationTypeNewCall",
          "properties": [
            {
              "name": "call_id",
              "type": "int32",
              "nilable": false
            }
          ],
          "type": "NotificationType",
          "description": "New call was received @call_id Call identifier",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "notificationTypeNewPushMessage",
          "properties": [
            {
              "name": "message_id",
              "type": "int53",
              "description": "The message identifier. The message will not be available in the chat history, but the ID can be used in viewMessages and as reply_to_message_id",
              "nilable": false
            },
            {
              "name": "sender_user_id",
              "type": "int32",
              "description": "Sender of the message. Corresponding user may be inaccessible @content Push message content",
              "nilable": false
            },
            {
              "name": "content",
              "type": "PushMessageContent",
              "nilable": false
            }
          ],
          "type": "NotificationType",
          "description": "New message was received through a push notification",
          "children": []
        }
      ]
    },
    {
      "function": false,
      "is_abstract": true,
      "name": "NotificationGroupType",
      "properties": [],
      "type": "Base",
      "description": "Describes type of notifications in the group",
      "children": [
        {
          "function": false,
          "is_abstract": false,
          "name": "notificationGroupTypeMessages",
          "properties": [],
          "type": "NotificationGroupType",
          "description": "A group containing notifications of type notificationTypeNewMessage and notificationTypeNewPushMessage with ordinary unread messages",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "notificationGroupTypeMentions",
          "properties": [],
          "type": "NotificationGroupType",
          "description": "A group containing notifications of type notificationTypeNewMessage and notificationTypeNewPushMessage with unread mentions of the current user, replies to their messages, or a pinned message",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "notificationGroupTypeSecretChat",
          "properties": [],
          "type": "NotificationGroupType",
          "description": "A group containing a notification of type notificationTypeNewSecretChat",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "notificationGroupTypeCalls",
          "properties": [],
          "type": "NotificationGroupType",
          "description": "A group containing notifications of type notificationTypeNewCall",
          "children": []
        }
      ]
    },
    {
      "function": false,
      "is_abstract": true,
      "name": "OptionValue",
      "properties": [],
      "type": "Base",
      "description": "Represents the value of an option",
      "children": [
        {
          "function": false,
          "is_abstract": false,
          "name": "optionValueBoolean",
          "properties": [
            {
              "name": "value",
              "type": "Bool",
              "nilable": false
            }
          ],
          "type": "OptionValue",
          "description": "Represents a boolean option @value The value of the option",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "optionValueEmpty",
          "properties": [],
          "type": "OptionValue",
          "description": "Represents an unknown option or an option which has a default value",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "optionValueInteger",
          "properties": [
            {
              "name": "value",
              "type": "int32",
              "nilable": false
            }
          ],
          "type": "OptionValue",
          "description": "Represents an integer option @value The value of the option",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "optionValueString",
          "properties": [
            {
              "name": "value",
              "type": "string",
              "nilable": false
            }
          ],
          "type": "OptionValue",
          "description": "Represents a string option @value The value of the option",
          "children": []
        }
      ]
    },
    {
      "function": false,
      "is_abstract": true,
      "name": "JsonValue",
      "properties": [],
      "type": "Base",
      "description": "Represents a JSON value",
      "children": [
        {
          "function": false,
          "is_abstract": false,
          "name": "jsonValueNull",
          "properties": [],
          "type": "JsonValue",
          "description": "Represents a null JSON value",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "jsonValueBoolean",
          "properties": [
            {
              "name": "value",
              "type": "Bool",
              "nilable": false
            }
          ],
          "type": "JsonValue",
          "description": "Represents a boolean JSON value @value The value",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "jsonValueNumber",
          "properties": [
            {
              "name": "value",
              "type": "double",
              "nilable": false
            }
          ],
          "type": "JsonValue",
          "description": "Represents a numeric JSON value @value The value",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "jsonValueString",
          "properties": [
            {
              "name": "value",
              "type": "string",
              "nilable": false
            }
          ],
          "type": "JsonValue",
          "description": "Represents a string JSON value @value The value",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "jsonValueArray",
          "properties": [
            {
              "name": "values",
              "type": "vector<JsonValue>",
              "nilable": false
            }
          ],
          "type": "JsonValue",
          "description": "Represents a JSON array @values The list of array elements",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "jsonValueObject",
          "properties": [
            {
              "name": "members",
              "type": "vector<jsonObjectMember>",
              "nilable": false
            }
          ],
          "type": "JsonValue",
          "description": "Represents a JSON object @members The list of object members",
          "children": []
        }
      ]
    },
    {
      "function": false,
      "is_abstract": true,
      "name": "UserPrivacySettingRule",
      "properties": [],
      "type": "Base",
      "description": "Represents a single rule for managing privacy settings",
      "children": [
        {
          "function": false,
          "is_abstract": false,
          "name": "userPrivacySettingRuleAllowAll",
          "properties": [],
          "type": "UserPrivacySettingRule",
          "description": "A rule to allow all users to do something",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "userPrivacySettingRuleAllowContacts",
          "properties": [],
          "type": "UserPrivacySettingRule",
          "description": "A rule to allow all of a user's contacts to do something",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "userPrivacySettingRuleAllowUsers",
          "properties": [
            {
              "name": "user_ids",
              "type": "vector<int32>",
              "nilable": false
            }
          ],
          "type": "UserPrivacySettingRule",
          "description": "A rule to allow certain specified users to do something @user_ids The user identifiers",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "userPrivacySettingRuleRestrictAll",
          "properties": [],
          "type": "UserPrivacySettingRule",
          "description": "A rule to restrict all users from doing something",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "userPrivacySettingRuleRestrictContacts",
          "properties": [],
          "type": "UserPrivacySettingRule",
          "description": "A rule to restrict all contacts of a user from doing something",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "userPrivacySettingRuleRestrictUsers",
          "properties": [
            {
              "name": "user_ids",
              "type": "vector<int32>",
              "nilable": false
            }
          ],
          "type": "UserPrivacySettingRule",
          "description": "A rule to restrict all specified users from doing something @user_ids The user identifiers",
          "children": []
        }
      ]
    },
    {
      "function": false,
      "is_abstract": true,
      "name": "UserPrivacySetting",
      "properties": [],
      "type": "Base",
      "description": "Describes available user privacy settings",
      "children": [
        {
          "function": false,
          "is_abstract": false,
          "name": "userPrivacySettingShowStatus",
          "properties": [],
          "type": "UserPrivacySetting",
          "description": "A privacy setting for managing whether the user's online status is visible",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "userPrivacySettingShowProfilePhoto",
          "properties": [],
          "type": "UserPrivacySetting",
          "description": "A privacy setting for managing whether the user's profile photo is visible",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "userPrivacySettingShowLinkInForwardedMessages",
          "properties": [],
          "type": "UserPrivacySetting",
          "description": "A privacy setting for managing whether a link to the user's account is included in forwarded messages",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "userPrivacySettingAllowChatInvites",
          "properties": [],
          "type": "UserPrivacySetting",
          "description": "A privacy setting for managing whether the user can be invited to chats",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "userPrivacySettingAllowCalls",
          "properties": [],
          "type": "UserPrivacySetting",
          "description": "A privacy setting for managing whether the user can be called",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "userPrivacySettingAllowPeerToPeerCalls",
          "properties": [],
          "type": "UserPrivacySetting",
          "description": "A privacy setting for managing whether peer-to-peer connections can be used for calls",
          "children": []
        }
      ]
    },
    {
      "function": false,
      "is_abstract": true,
      "name": "ChatReportReason",
      "properties": [],
      "type": "Base",
      "description": "Describes the reason why a chat is reported",
      "children": [
        {
          "function": false,
          "is_abstract": false,
          "name": "chatReportReasonSpam",
          "properties": [],
          "type": "ChatReportReason",
          "description": "The chat contains spam messages",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "chatReportReasonViolence",
          "properties": [],
          "type": "ChatReportReason",
          "description": "The chat promotes violence",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "chatReportReasonPornography",
          "properties": [],
          "type": "ChatReportReason",
          "description": "The chat contains pornographic messages",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "chatReportReasonChildAbuse",
          "properties": [],
          "type": "ChatReportReason",
          "description": "The chat has child abuse related content",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "chatReportReasonCopyright",
          "properties": [],
          "type": "ChatReportReason",
          "description": "The chat contains copyrighted content",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "chatReportReasonCustom",
          "properties": [
            {
              "name": "text",
              "type": "string",
              "nilable": false
            }
          ],
          "type": "ChatReportReason",
          "description": "A custom reason provided by the user @text Report text",
          "children": []
        }
      ]
    },
    {
      "function": false,
      "is_abstract": true,
      "name": "FileType",
      "properties": [],
      "type": "Base",
      "description": "Represents the type of a file",
      "children": [
        {
          "function": false,
          "is_abstract": false,
          "name": "fileTypeNone",
          "properties": [],
          "type": "FileType",
          "description": "The data is not a file",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "fileTypeAnimation",
          "properties": [],
          "type": "FileType",
          "description": "The file is an animation",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "fileTypeAudio",
          "properties": [],
          "type": "FileType",
          "description": "The file is an audio file",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "fileTypeDocument",
          "properties": [],
          "type": "FileType",
          "description": "The file is a document",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "fileTypePhoto",
          "properties": [],
          "type": "FileType",
          "description": "The file is a photo",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "fileTypeProfilePhoto",
          "properties": [],
          "type": "FileType",
          "description": "The file is a profile photo",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "fileTypeSecret",
          "properties": [],
          "type": "FileType",
          "description": "The file was sent to a secret chat (the file type is not known to the server)",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "fileTypeSecretThumbnail",
          "properties": [],
          "type": "FileType",
          "description": "The file is a thumbnail of a file from a secret chat",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "fileTypeSecure",
          "properties": [],
          "type": "FileType",
          "description": "The file is a file from Secure storage used for storing Telegram Passport files",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "fileTypeSticker",
          "properties": [],
          "type": "FileType",
          "description": "The file is a sticker",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "fileTypeThumbnail",
          "properties": [],
          "type": "FileType",
          "description": "The file is a thumbnail of another file",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "fileTypeUnknown",
          "properties": [],
          "type": "FileType",
          "description": "The file type is not yet known",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "fileTypeVideo",
          "properties": [],
          "type": "FileType",
          "description": "The file is a video",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "fileTypeVideoNote",
          "properties": [],
          "type": "FileType",
          "description": "The file is a video note",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "fileTypeVoiceNote",
          "properties": [],
          "type": "FileType",
          "description": "The file is a voice note",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "fileTypeWallpaper",
          "properties": [],
          "type": "FileType",
          "description": "The file is a wallpaper or a background pattern",
          "children": []
        }
      ]
    },
    {
      "function": false,
      "is_abstract": true,
      "name": "NetworkType",
      "properties": [],
      "type": "Base",
      "description": "Represents the type of a network",
      "children": [
        {
          "function": false,
          "is_abstract": false,
          "name": "networkTypeNone",
          "properties": [],
          "type": "NetworkType",
          "description": "The network is not available",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "networkTypeMobile",
          "properties": [],
          "type": "NetworkType",
          "description": "A mobile network",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "networkTypeMobileRoaming",
          "properties": [],
          "type": "NetworkType",
          "description": "A mobile roaming network",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "networkTypeWiFi",
          "properties": [],
          "type": "NetworkType",
          "description": "A Wi-Fi network",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "networkTypeOther",
          "properties": [],
          "type": "NetworkType",
          "description": "A different network type (e.g., Ethernet network)",
          "children": []
        }
      ]
    },
    {
      "function": false,
      "is_abstract": true,
      "name": "NetworkStatisticsEntry",
      "properties": [],
      "type": "Base",
      "description": "Contains statistics about network usage",
      "children": [
        {
          "function": false,
          "is_abstract": false,
          "name": "networkStatisticsEntryFile",
          "properties": [
            {
              "name": "file_type",
              "type": "FileType",
              "nilable": false
            },
            {
              "name": "network_type",
              "type": "NetworkType",
              "nilable": false
            },
            {
              "name": "sent_bytes",
              "type": "int53",
              "description": "Total number of bytes sent @received_bytes Total number of bytes received",
              "nilable": false
            },
            {
              "name": "received_bytes",
              "type": "int53",
              "nilable": false
            }
          ],
          "type": "NetworkStatisticsEntry",
          "description": "Contains information about the total amount of data that was used to send and receive files @file_type Type of the file the data is part of @network_type Type of the network the data was sent through. Call setNetworkType to maintain the actual network type",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "networkStatisticsEntryCall",
          "properties": [
            {
              "name": "network_type",
              "type": "NetworkType",
              "nilable": false
            },
            {
              "name": "sent_bytes",
              "type": "int53",
              "description": "Total number of bytes sent @received_bytes Total number of bytes received @duration Total call duration, in seconds",
              "nilable": false
            },
            {
              "name": "received_bytes",
              "type": "int53",
              "nilable": false
            },
            {
              "name": "duration",
              "type": "double",
              "nilable": false
            }
          ],
          "type": "NetworkStatisticsEntry",
          "description": "Contains information about the total amount of data that was used for calls @network_type Type of the network the data was sent through. Call setNetworkType to maintain the actual network type",
          "children": []
        }
      ]
    },
    {
      "function": false,
      "is_abstract": true,
      "name": "ConnectionState",
      "properties": [],
      "type": "Base",
      "description": "Describes the current state of the connection to Telegram servers",
      "children": [
        {
          "function": false,
          "is_abstract": false,
          "name": "connectionStateWaitingForNetwork",
          "properties": [],
          "type": "ConnectionState",
          "description": "Currently waiting for the network to become available. Use setNetworkType to change the available network type",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "connectionStateConnectingToProxy",
          "properties": [],
          "type": "ConnectionState",
          "description": "Currently establishing a connection with a proxy server",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "connectionStateConnecting",
          "properties": [],
          "type": "ConnectionState",
          "description": "Currently establishing a connection to the Telegram servers",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "connectionStateUpdating",
          "properties": [],
          "type": "ConnectionState",
          "description": "Downloading data received while the client was offline",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "connectionStateReady",
          "properties": [],
          "type": "ConnectionState",
          "description": "There is a working connection to the Telegram servers",
          "children": []
        }
      ]
    },
    {
      "function": false,
      "is_abstract": true,
      "name": "TopChatCategory",
      "properties": [],
      "type": "Base",
      "description": "Represents the categories of chats for which a list of frequently used chats can be retrieved",
      "children": [
        {
          "function": false,
          "is_abstract": false,
          "name": "topChatCategoryUsers",
          "properties": [],
          "type": "TopChatCategory",
          "description": "A category containing frequently used private chats with non-bot users",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "topChatCategoryBots",
          "properties": [],
          "type": "TopChatCategory",
          "description": "A category containing frequently used private chats with bot users",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "topChatCategoryGroups",
          "properties": [],
          "type": "TopChatCategory",
          "description": "A category containing frequently used basic groups and supergroups",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "topChatCategoryChannels",
          "properties": [],
          "type": "TopChatCategory",
          "description": "A category containing frequently used channels",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "topChatCategoryInlineBots",
          "properties": [],
          "type": "TopChatCategory",
          "description": "A category containing frequently used chats with inline bots sorted by their usage in inline mode",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "topChatCategoryCalls",
          "properties": [],
          "type": "TopChatCategory",
          "description": "A category containing frequently used chats used for calls",
          "children": []
        }
      ]
    },
    {
      "function": false,
      "is_abstract": true,
      "name": "TMeUrlType",
      "properties": [],
      "type": "Base",
      "description": "Describes the type of a URL linking to an internal Telegram entity",
      "children": [
        {
          "function": false,
          "is_abstract": false,
          "name": "tMeUrlTypeUser",
          "properties": [
            {
              "name": "user_id",
              "type": "int32",
              "nilable": false
            }
          ],
          "type": "TMeUrlType",
          "description": "A URL linking to a user @user_id Identifier of the user",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "tMeUrlTypeSupergroup",
          "properties": [
            {
              "name": "supergroup_id",
              "type": "int53",
              "nilable": false
            }
          ],
          "type": "TMeUrlType",
          "description": "A URL linking to a public supergroup or channel @supergroup_id Identifier of the supergroup or channel",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "tMeUrlTypeChatInvite",
          "properties": [
            {
              "name": "info",
              "type": "chatInviteLinkInfo",
              "nilable": false
            }
          ],
          "type": "TMeUrlType",
          "description": "A chat invite link @info Chat invite link info",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "tMeUrlTypeStickerSet",
          "properties": [
            {
              "name": "sticker_set_id",
              "type": "int64",
              "nilable": false
            }
          ],
          "type": "TMeUrlType",
          "description": "A URL linking to a sticker set @sticker_set_id Identifier of the sticker set",
          "children": []
        }
      ]
    },
    {
      "function": false,
      "is_abstract": true,
      "name": "TextParseMode",
      "properties": [],
      "type": "Base",
      "description": "Describes the way the text should be parsed for TextEntities",
      "children": [
        {
          "function": false,
          "is_abstract": false,
          "name": "textParseModeMarkdown",
          "properties": [],
          "type": "TextParseMode",
          "description": "The text should be parsed in markdown-style",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "textParseModeHTML",
          "properties": [],
          "type": "TextParseMode",
          "description": "The text should be parsed in HTML-style",
          "children": []
        }
      ]
    },
    {
      "function": false,
      "is_abstract": true,
      "name": "ProxyType",
      "properties": [],
      "type": "Base",
      "description": "Describes the type of the proxy server",
      "children": [
        {
          "function": false,
          "is_abstract": false,
          "name": "string",
          "properties": [
            {
              "name": "password",
              "type": "string",
              "nilable": false
            }
          ],
          "type": "ProxyType",
          "description": "A SOCKS5 proxy server @username Username for logging in; may be empty @password Password for logging in; may be empty",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "proxyTypeHttp",
          "properties": [
            {
              "name": "username",
              "type": "string",
              "nilable": false
            },
            {
              "name": "password",
              "type": "string",
              "nilable": false
            },
            {
              "name": "http_only",
              "type": "Bool",
              "nilable": false
            }
          ],
          "type": "ProxyType",
          "description": "A HTTP transparent proxy server @username Username for logging in; may be empty @password Password for logging in; may be empty @http_only Pass true, if the proxy supports only HTTP requests and doesn't support transparent TCP connections via HTTP CONNECT method",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "proxyTypeMtproto",
          "properties": [
            {
              "name": "secret",
              "type": "string",
              "nilable": false
            }
          ],
          "type": "ProxyType",
          "description": "An MTProto proxy server @secret The proxy's secret in hexadecimal encoding",
          "children": []
        }
      ]
    },
    {
      "function": false,
      "is_abstract": true,
      "name": "Update",
      "properties": [],
      "type": "Base",
      "description": "Contains notifications about data changes",
      "children": [
        {
          "function": false,
          "is_abstract": false,
          "name": "updateAuthorizationState",
          "properties": [
            {
              "name": "authorization_state",
              "type": "AuthorizationState",
              "nilable": false
            }
          ],
          "type": "Update",
          "description": "The user authorization state has changed @authorization_state New authorization state",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "updateNewMessage",
          "properties": [
            {
              "name": "message",
              "type": "message",
              "nilable": false
            }
          ],
          "type": "Update",
          "description": "A new message was received; can also be an outgoing message @message The new message",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "updateMessageSendAcknowledged",
          "properties": [
            {
              "name": "chat_id",
              "type": "int53",
              "description": "The chat identifier of the sent message @message_id A temporary message identifier",
              "nilable": false
            },
            {
              "name": "message_id",
              "type": "int53",
              "nilable": false
            }
          ],
          "type": "Update",
          "description": "A request to send a message has reached the Telegram server. This doesn't mean that the message will be sent successfully or even that the send message request will be processed. This update will be sent only if the option \"use_quick_ack\" is set to true. This update may be sent multiple times for the same message",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "updateMessageSendSucceeded",
          "properties": [
            {
              "name": "message",
              "type": "message",
              "nilable": false
            },
            {
              "name": "old_message_id",
              "type": "int53",
              "nilable": false
            }
          ],
          "type": "Update",
          "description": "A message has been successfully sent @message Information about the sent message. Usually only the message identifier, date, and content are changed, but almost all other fields can also change @old_message_id The previous temporary message identifier",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "updateMessageSendFailed",
          "properties": [
            {
              "name": "message",
              "type": "message",
              "description": "Contains information about the message which failed to send @old_message_id The previous temporary message identifier @error_code An error code @error_message Error message",
              "nilable": false
            },
            {
              "name": "old_message_id",
              "type": "int53",
              "nilable": false
            },
            {
              "name": "error_code",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "error_message",
              "type": "string",
              "nilable": false
            }
          ],
          "type": "Update",
          "description": "A message failed to send. Be aware that some messages being sent can be irrecoverably deleted, in which case updateDeleteMessages will be received instead of this update",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "updateMessageContent",
          "properties": [
            {
              "name": "chat_id",
              "type": "int53",
              "nilable": false
            },
            {
              "name": "message_id",
              "type": "int53",
              "nilable": false
            },
            {
              "name": "new_content",
              "type": "MessageContent",
              "nilable": false
            }
          ],
          "type": "Update",
          "description": "The message content has changed @chat_id Chat identifier @message_id Message identifier @new_content New message content",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "updateMessageEdited",
          "properties": [
            {
              "name": "chat_id",
              "type": "int53",
              "nilable": false
            },
            {
              "name": "message_id",
              "type": "int53",
              "nilable": false
            },
            {
              "name": "edit_date",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "reply_markup",
              "type": "ReplyMarkup",
              "nilable": false
            }
          ],
          "type": "Update",
          "description": "A message was edited. Changes in the message content will come in a separate updateMessageContent @chat_id Chat identifier @message_id Message identifier @edit_date Point in time (Unix timestamp) when the message was edited @reply_markup New message reply markup; may be null",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "updateMessageViews",
          "properties": [
            {
              "name": "chat_id",
              "type": "int53",
              "nilable": false
            },
            {
              "name": "message_id",
              "type": "int53",
              "nilable": false
            },
            {
              "name": "views",
              "type": "int32",
              "nilable": false
            }
          ],
          "type": "Update",
          "description": "The view count of the message has changed @chat_id Chat identifier @message_id Message identifier @views New value of the view count",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "updateMessageContentOpened",
          "properties": [
            {
              "name": "chat_id",
              "type": "int53",
              "nilable": false
            },
            {
              "name": "message_id",
              "type": "int53",
              "nilable": false
            }
          ],
          "type": "Update",
          "description": "The message content was opened. Updates voice note messages to \"listened\", video note messages to \"viewed\" and starts the TTL timer for self-destructing messages @chat_id Chat identifier @message_id Message identifier",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "updateMessageMentionRead",
          "properties": [
            {
              "name": "chat_id",
              "type": "int53",
              "nilable": false
            },
            {
              "name": "message_id",
              "type": "int53",
              "nilable": false
            },
            {
              "name": "unread_mention_count",
              "type": "int32",
              "nilable": false
            }
          ],
          "type": "Update",
          "description": "A message with an unread mention was read @chat_id Chat identifier @message_id Message identifier @unread_mention_count The new number of unread mention messages left in the chat",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "updateNewChat",
          "properties": [
            {
              "name": "chat",
              "type": "chat",
              "nilable": false
            }
          ],
          "type": "Update",
          "description": "A new chat has been loaded/created. This update is guaranteed to come before the chat identifier is returned to the client. The chat field changes will be reported through separate updates @chat The chat",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "updateChatTitle",
          "properties": [
            {
              "name": "chat_id",
              "type": "int53",
              "nilable": false
            },
            {
              "name": "title",
              "type": "string",
              "nilable": false
            }
          ],
          "type": "Update",
          "description": "The title of a chat was changed @chat_id Chat identifier @title The new chat title",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "updateChatPhoto",
          "properties": [
            {
              "name": "chat_id",
              "type": "int53",
              "nilable": false
            },
            {
              "name": "photo",
              "type": "chatPhoto",
              "nilable": false
            }
          ],
          "type": "Update",
          "description": "A chat photo was changed @chat_id Chat identifier @photo The new chat photo; may be null",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "updateChatPermissions",
          "properties": [
            {
              "name": "chat_id",
              "type": "int53",
              "nilable": false
            },
            {
              "name": "permissions",
              "type": "chatPermissions",
              "nilable": false
            }
          ],
          "type": "Update",
          "description": "Chat permissions was changed @chat_id Chat identifier @permissions The new chat permissions",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "updateChatLastMessage",
          "properties": [
            {
              "name": "chat_id",
              "type": "int53",
              "nilable": false
            },
            {
              "name": "last_message",
              "type": "message",
              "nilable": false
            },
            {
              "name": "order",
              "type": "int64",
              "nilable": false
            }
          ],
          "type": "Update",
          "description": "The last message of a chat was changed. If last_message is null, then the last message in the chat became unknown. Some new unknown messages might be added to the chat in this case @chat_id Chat identifier @last_message The new last message in the chat; may be null @order New value of the chat order",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "updateChatOrder",
          "properties": [
            {
              "name": "chat_id",
              "type": "int53",
              "nilable": false
            },
            {
              "name": "order",
              "type": "int64",
              "nilable": false
            }
          ],
          "type": "Update",
          "description": "The order of the chat in the chat list has changed. Instead of this update updateChatLastMessage, updateChatIsPinned or updateChatDraftMessage might be sent @chat_id Chat identifier @order New value of the order",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "updateChatIsPinned",
          "properties": [
            {
              "name": "chat_id",
              "type": "int53",
              "nilable": false
            },
            {
              "name": "is_pinned",
              "type": "Bool",
              "nilable": false
            },
            {
              "name": "order",
              "type": "int64",
              "nilable": false
            }
          ],
          "type": "Update",
          "description": "A chat was pinned or unpinned @chat_id Chat identifier @is_pinned New value of is_pinned @order New value of the chat order",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "updateChatIsMarkedAsUnread",
          "properties": [
            {
              "name": "chat_id",
              "type": "int53",
              "nilable": false
            },
            {
              "name": "is_marked_as_unread",
              "type": "Bool",
              "nilable": false
            }
          ],
          "type": "Update",
          "description": "A chat was marked as unread or was read @chat_id Chat identifier @is_marked_as_unread New value of is_marked_as_unread",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "updateChatIsSponsored",
          "properties": [
            {
              "name": "chat_id",
              "type": "int53",
              "nilable": false
            },
            {
              "name": "is_sponsored",
              "type": "Bool",
              "nilable": false
            },
            {
              "name": "order",
              "type": "int64",
              "nilable": false
            }
          ],
          "type": "Update",
          "description": "A chat's is_sponsored field has changed @chat_id Chat identifier @is_sponsored New value of is_sponsored @order New value of chat order",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "updateChatDefaultDisableNotification",
          "properties": [
            {
              "name": "chat_id",
              "type": "int53",
              "nilable": false
            },
            {
              "name": "default_disable_notification",
              "type": "Bool",
              "nilable": false
            }
          ],
          "type": "Update",
          "description": "The value of the default disable_notification parameter, used when a message is sent to the chat, was changed @chat_id Chat identifier @default_disable_notification The new default_disable_notification value",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "updateChatReadInbox",
          "properties": [
            {
              "name": "chat_id",
              "type": "int53",
              "nilable": false
            },
            {
              "name": "last_read_inbox_message_id",
              "type": "int53",
              "nilable": false
            },
            {
              "name": "unread_count",
              "type": "int32",
              "nilable": false
            }
          ],
          "type": "Update",
          "description": "Incoming messages were read or number of unread messages has been changed @chat_id Chat identifier @last_read_inbox_message_id Identifier of the last read incoming message @unread_count The number of unread messages left in the chat",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "updateChatReadOutbox",
          "properties": [
            {
              "name": "chat_id",
              "type": "int53",
              "nilable": false
            },
            {
              "name": "last_read_outbox_message_id",
              "type": "int53",
              "nilable": false
            }
          ],
          "type": "Update",
          "description": "Outgoing messages were read @chat_id Chat identifier @last_read_outbox_message_id Identifier of last read outgoing message",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "updateChatUnreadMentionCount",
          "properties": [
            {
              "name": "chat_id",
              "type": "int53",
              "nilable": false
            },
            {
              "name": "unread_mention_count",
              "type": "int32",
              "nilable": false
            }
          ],
          "type": "Update",
          "description": "The chat unread_mention_count has changed @chat_id Chat identifier @unread_mention_count The number of unread mention messages left in the chat",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "updateChatNotificationSettings",
          "properties": [
            {
              "name": "chat_id",
              "type": "int53",
              "nilable": false
            },
            {
              "name": "notification_settings",
              "type": "chatNotificationSettings",
              "nilable": false
            }
          ],
          "type": "Update",
          "description": "Notification settings for a chat were changed @chat_id Chat identifier @notification_settings The new notification settings",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "updateScopeNotificationSettings",
          "properties": [
            {
              "name": "scope",
              "type": "NotificationSettingsScope",
              "nilable": false
            },
            {
              "name": "notification_settings",
              "type": "scopeNotificationSettings",
              "nilable": false
            }
          ],
          "type": "Update",
          "description": "Notification settings for some type of chats were updated @scope Types of chats for which notification settings were updated @notification_settings The new notification settings",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "updateChatPinnedMessage",
          "properties": [
            {
              "name": "chat_id",
              "type": "int53",
              "nilable": false
            },
            {
              "name": "pinned_message_id",
              "type": "int53",
              "nilable": false
            }
          ],
          "type": "Update",
          "description": "The chat pinned message was changed @chat_id Chat identifier @pinned_message_id The new identifier of the pinned message; 0 if there is no pinned message in the chat",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "updateChatReplyMarkup",
          "properties": [
            {
              "name": "chat_id",
              "type": "int53",
              "description": "Chat identifier @reply_markup_message_id Identifier of the message from which reply markup needs to be used; 0 if there is no default custom reply markup in the chat",
              "nilable": false
            },
            {
              "name": "reply_markup_message_id",
              "type": "int53",
              "nilable": false
            }
          ],
          "type": "Update",
          "description": "The default chat reply markup was changed. Can occur because new messages with reply markup were received or because an old reply markup was hidden by the user",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "updateChatDraftMessage",
          "properties": [
            {
              "name": "chat_id",
              "type": "int53",
              "nilable": false
            },
            {
              "name": "draft_message",
              "type": "draftMessage",
              "nilable": false
            },
            {
              "name": "order",
              "type": "int64",
              "nilable": false
            }
          ],
          "type": "Update",
          "description": "A chat draft has changed. Be aware that the update may come in the currently opened chat but with old content of the draft. If the user has changed the content of the draft, this update shouldn't be applied @chat_id Chat identifier @draft_message The new draft message; may be null @order New value of the chat order",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "updateChatOnlineMemberCount",
          "properties": [
            {
              "name": "chat_id",
              "type": "int53",
              "nilable": false
            },
            {
              "name": "online_member_count",
              "type": "int32",
              "nilable": false
            }
          ],
          "type": "Update",
          "description": "The number of online group members has changed. This update with non-zero count is sent only for currently opened chats. There is no guarantee that it will be sent just after the count has changed @chat_id Identifier of the chat @online_member_count New number of online members in the chat, or 0 if unknown",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "updateNotification",
          "properties": [
            {
              "name": "notification_group_id",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "notification",
              "type": "notification",
              "nilable": false
            }
          ],
          "type": "Update",
          "description": "A notification was changed @notification_group_id Unique notification group identifier @notification Changed notification",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "updateNotificationGroup",
          "properties": [
            {
              "name": "notification_group_id",
              "type": "int32",
              "description": "Unique notification group identifier",
              "nilable": false
            },
            {
              "name": "type",
              "type": "NotificationGroupType",
              "description": "New type of the notification group",
              "nilable": false
            },
            {
              "name": "chat_id",
              "type": "int53",
              "description": "Identifier of a chat to which all notifications in the group belong",
              "nilable": false
            },
            {
              "name": "notification_settings_chat_id",
              "type": "int53",
              "description": "Chat identifier, which notification settings must be applied to the added notifications",
              "nilable": false
            },
            {
              "name": "is_silent",
              "type": "Bool",
              "description": "True, if the notifications should be shown without sound",
              "nilable": false
            },
            {
              "name": "total_count",
              "type": "int32",
              "description": "Total number of unread notifications in the group, can be bigger than number of active notifications",
              "nilable": false
            },
            {
              "name": "added_notifications",
              "type": "vector<notification>",
              "description": "List of added group notifications, sorted by notification ID @removed_notification_ids Identifiers of removed group notifications, sorted by notification ID",
              "nilable": false
            },
            {
              "name": "removed_notification_ids",
              "type": "vector<int32>",
              "nilable": false
            }
          ],
          "type": "Update",
          "description": "A list of active notifications in a notification group has changed",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "updateActiveNotifications",
          "properties": [
            {
              "name": "groups",
              "type": "vector<notificationGroup>",
              "nilable": false
            }
          ],
          "type": "Update",
          "description": "Contains active notifications that was shown on previous application launches. This update is sent only if a message database is used. In that case it comes once before any updateNotification and updateNotificationGroup update @groups Lists of active notification groups",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "updateHavePendingNotifications",
          "properties": [
            {
              "name": "have_delayed_notifications",
              "type": "Bool",
              "description": "True, if there are some delayed notification updates, which will be sent soon",
              "nilable": false
            },
            {
              "name": "have_unreceived_notifications",
              "type": "Bool",
              "description": "True, if there can be some yet unreceived notifications, which are being fetched from the server",
              "nilable": false
            }
          ],
          "type": "Update",
          "description": "Describes, whether there are some pending notification updates. Can be used to prevent application from killing, while there are some pending notifications",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "updateDeleteMessages",
          "properties": [
            {
              "name": "chat_id",
              "type": "int53",
              "nilable": false
            },
            {
              "name": "message_ids",
              "type": "vector<int53>",
              "nilable": false
            },
            {
              "name": "is_permanent",
              "type": "Bool",
              "description": "True, if the messages are permanently deleted by a user (as opposed to just becoming inaccessible)",
              "nilable": false
            },
            {
              "name": "from_cache",
              "type": "Bool",
              "description": "True, if the messages are deleted only from the cache and can possibly be retrieved again in the future",
              "nilable": false
            }
          ],
          "type": "Update",
          "description": "Some messages were deleted @chat_id Chat identifier @message_ids Identifiers of the deleted messages",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "updateUserChatAction",
          "properties": [
            {
              "name": "chat_id",
              "type": "int53",
              "nilable": false
            },
            {
              "name": "user_id",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "action",
              "type": "ChatAction",
              "nilable": false
            }
          ],
          "type": "Update",
          "description": "User activity in the chat has changed @chat_id Chat identifier @user_id Identifier of a user performing an action @action The action description",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "updateUserStatus",
          "properties": [
            {
              "name": "user_id",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "status",
              "type": "UserStatus",
              "nilable": false
            }
          ],
          "type": "Update",
          "description": "The user went online or offline @user_id User identifier @status New status of the user",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "updateUser",
          "properties": [
            {
              "name": "user",
              "type": "user",
              "nilable": false
            }
          ],
          "type": "Update",
          "description": "Some data of a user has changed. This update is guaranteed to come before the user identifier is returned to the client @user New data about the user",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "updateBasicGroup",
          "properties": [
            {
              "name": "basic_group",
              "type": "basicGroup",
              "nilable": false
            }
          ],
          "type": "Update",
          "description": "Some data of a basic group has changed. This update is guaranteed to come before the basic group identifier is returned to the client @basic_group New data about the group",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "updateSupergroup",
          "properties": [
            {
              "name": "supergroup",
              "type": "supergroup",
              "nilable": false
            }
          ],
          "type": "Update",
          "description": "Some data of a supergroup or a channel has changed. This update is guaranteed to come before the supergroup identifier is returned to the client @supergroup New data about the supergroup",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "updateSecretChat",
          "properties": [
            {
              "name": "secret_chat",
              "type": "secretChat",
              "nilable": false
            }
          ],
          "type": "Update",
          "description": "Some data of a secret chat has changed. This update is guaranteed to come before the secret chat identifier is returned to the client @secret_chat New data about the secret chat",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "updateUserFullInfo",
          "properties": [
            {
              "name": "user_id",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "user_full_info",
              "type": "userFullInfo",
              "nilable": false
            }
          ],
          "type": "Update",
          "description": "Some data from userFullInfo has been changed @user_id User identifier @user_full_info New full information about the user",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "updateBasicGroupFullInfo",
          "properties": [
            {
              "name": "basic_group_id",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "basic_group_full_info",
              "type": "basicGroupFullInfo",
              "nilable": false
            }
          ],
          "type": "Update",
          "description": "Some data from basicGroupFullInfo has been changed @basic_group_id Identifier of a basic group @basic_group_full_info New full information about the group",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "updateSupergroupFullInfo",
          "properties": [
            {
              "name": "supergroup_id",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "supergroup_full_info",
              "type": "supergroupFullInfo",
              "nilable": false
            }
          ],
          "type": "Update",
          "description": "Some data from supergroupFullInfo has been changed @supergroup_id Identifier of the supergroup or channel @supergroup_full_info New full information about the supergroup",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "updateServiceNotification",
          "properties": [
            {
              "name": "type",
              "type": "string",
              "description": "Notification type. If type begins with \"AUTH_KEY_DROP_\", then two buttons \"Cancel\" and \"Log out\" should be shown under notification; if user presses the second, all local data should be destroyed using Destroy method",
              "nilable": false
            },
            {
              "name": "content",
              "type": "MessageContent",
              "description": "Notification content",
              "nilable": false
            }
          ],
          "type": "Update",
          "description": "Service notification from the server. Upon receiving this the client must show a popup with the content of the notification",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "updateFile",
          "properties": [
            {
              "name": "file",
              "type": "file",
              "nilable": false
            }
          ],
          "type": "Update",
          "description": "Information about a file was updated @file New data about the file",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "updateFileGenerationStart",
          "properties": [
            {
              "name": "generation_id",
              "type": "int64",
              "description": "Unique identifier for the generation process",
              "nilable": false
            },
            {
              "name": "original_path",
              "type": "string",
              "description": "The path to a file from which a new file is generated; may be empty",
              "nilable": true
            },
            {
              "name": "destination_path",
              "type": "string",
              "description": "The path to a file that should be created and where the new file should be generated",
              "nilable": false
            },
            {
              "name": "conversion",
              "type": "string",
              "description": "String specifying the conversion applied to the original file. If conversion is \"#url#\" than original_path contains an HTTP/HTTPS URL of a file, which should be downloaded by the client",
              "nilable": false
            }
          ],
          "type": "Update",
          "description": "The file generation process needs to be started by the client",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "updateFileGenerationStop",
          "properties": [
            {
              "name": "generation_id",
              "type": "int64",
              "nilable": false
            }
          ],
          "type": "Update",
          "description": "File generation is no longer needed @generation_id Unique identifier for the generation process",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "updateCall",
          "properties": [
            {
              "name": "call",
              "type": "call",
              "nilable": false
            }
          ],
          "type": "Update",
          "description": "New call was created or information about a call was updated @call New data about a call",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "updateUserPrivacySettingRules",
          "properties": [
            {
              "name": "setting",
              "type": "UserPrivacySetting",
              "nilable": false
            },
            {
              "name": "rules",
              "type": "userPrivacySettingRules",
              "nilable": false
            }
          ],
          "type": "Update",
          "description": "Some privacy setting rules have been changed @setting The privacy setting @rules New privacy rules",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "updateUnreadMessageCount",
          "properties": [
            {
              "name": "unread_count",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "unread_unmuted_count",
              "type": "int32",
              "nilable": false
            }
          ],
          "type": "Update",
          "description": "Number of unread messages has changed. This update is sent only if a message database is used @unread_count Total number of unread messages @unread_unmuted_count Total number of unread messages in unmuted chats",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "updateUnreadChatCount",
          "properties": [
            {
              "name": "unread_count",
              "type": "int32",
              "description": "Total number of unread chats @unread_unmuted_count Total number of unread unmuted chats",
              "nilable": false
            },
            {
              "name": "unread_unmuted_count",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "marked_as_unread_count",
              "type": "int32",
              "description": "Total number of chats marked as unread @marked_as_unread_unmuted_count Total number of unmuted chats marked as unread",
              "nilable": false
            },
            {
              "name": "marked_as_unread_unmuted_count",
              "type": "int32",
              "nilable": false
            }
          ],
          "type": "Update",
          "description": "Number of unread chats, i.e. with unread messages or marked as unread, has changed. This update is sent only if a message database is used",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "updateOption",
          "properties": [
            {
              "name": "name",
              "type": "string",
              "nilable": false
            },
            {
              "name": "value",
              "type": "OptionValue",
              "nilable": false
            }
          ],
          "type": "Update",
          "description": "An option changed its value @name The option name @value The new option value",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "updateInstalledStickerSets",
          "properties": [
            {
              "name": "is_masks",
              "type": "Bool",
              "nilable": false
            },
            {
              "name": "sticker_set_ids",
              "type": "vector<int64>",
              "nilable": false
            }
          ],
          "type": "Update",
          "description": "The list of installed sticker sets was updated @is_masks True, if the list of installed mask sticker sets was updated @sticker_set_ids The new list of installed ordinary sticker sets",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "updateTrendingStickerSets",
          "properties": [
            {
              "name": "sticker_sets",
              "type": "stickerSets",
              "nilable": false
            }
          ],
          "type": "Update",
          "description": "The list of trending sticker sets was updated or some of them were viewed @sticker_sets The new list of trending sticker sets",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "updateRecentStickers",
          "properties": [
            {
              "name": "is_attached",
              "type": "Bool",
              "nilable": false
            },
            {
              "name": "sticker_ids",
              "type": "vector<int32>",
              "nilable": false
            }
          ],
          "type": "Update",
          "description": "The list of recently used stickers was updated @is_attached True, if the list of stickers attached to photo or video files was updated, otherwise the list of sent stickers is updated @sticker_ids The new list of file identifiers of recently used stickers",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "updateFavoriteStickers",
          "properties": [
            {
              "name": "sticker_ids",
              "type": "vector<int32>",
              "nilable": false
            }
          ],
          "type": "Update",
          "description": "The list of favorite stickers was updated @sticker_ids The new list of file identifiers of favorite stickers",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "updateSavedAnimations",
          "properties": [
            {
              "name": "animation_ids",
              "type": "vector<int32>",
              "nilable": false
            }
          ],
          "type": "Update",
          "description": "The list of saved animations was updated @animation_ids The new list of file identifiers of saved animations",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "updateSelectedBackground",
          "properties": [
            {
              "name": "for_dark_theme",
              "type": "Bool",
              "nilable": false
            },
            {
              "name": "background",
              "type": "background",
              "nilable": false
            }
          ],
          "type": "Update",
          "description": "The selected background has changed @for_dark_theme True, if background for dark theme has changed @background The new selected background; may be null",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "updateLanguagePackStrings",
          "properties": [
            {
              "name": "localization_target",
              "type": "string",
              "nilable": false
            },
            {
              "name": "language_pack_id",
              "type": "string",
              "nilable": false
            },
            {
              "name": "strings",
              "type": "vector<languagePackString>",
              "nilable": false
            }
          ],
          "type": "Update",
          "description": "Some language pack strings have been updated @localization_target Localization target to which the language pack belongs @language_pack_id Identifier of the updated language pack @strings List of changed language pack strings",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "updateConnectionState",
          "properties": [
            {
              "name": "state",
              "type": "ConnectionState",
              "nilable": false
            }
          ],
          "type": "Update",
          "description": "The connection state has changed @state The new connection state",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "updateTermsOfService",
          "properties": [
            {
              "name": "terms_of_service_id",
              "type": "string",
              "nilable": false
            },
            {
              "name": "terms_of_service",
              "type": "termsOfService",
              "nilable": false
            }
          ],
          "type": "Update",
          "description": "New terms of service must be accepted by the user. If the terms of service are declined, then the deleteAccount method should be called with the reason \"Decline ToS update\" @terms_of_service_id Identifier of the terms of service @terms_of_service The new terms of service",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "updateNewInlineQuery",
          "properties": [
            {
              "name": "id",
              "type": "int64",
              "nilable": false
            },
            {
              "name": "sender_user_id",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "user_location",
              "type": "location",
              "nilable": false
            },
            {
              "name": "query",
              "type": "string",
              "nilable": false
            },
            {
              "name": "offset",
              "type": "string",
              "nilable": false
            }
          ],
          "type": "Update",
          "description": "A new incoming inline query; for bots only @id Unique query identifier @sender_user_id Identifier of the user who sent the query @user_location User location, provided by the client; may be null @query Text of the query @offset Offset of the first entry to return",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "updateNewChosenInlineResult",
          "properties": [
            {
              "name": "sender_user_id",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "user_location",
              "type": "location",
              "nilable": false
            },
            {
              "name": "query",
              "type": "string",
              "nilable": false
            },
            {
              "name": "result_id",
              "type": "string",
              "nilable": false
            },
            {
              "name": "inline_message_id",
              "type": "string",
              "nilable": false
            }
          ],
          "type": "Update",
          "description": "The user has chosen a result of an inline query; for bots only @sender_user_id Identifier of the user who sent the query @user_location User location, provided by the client; may be null @query Text of the query @result_id Identifier of the chosen result @inline_message_id Identifier of the sent inline message, if known",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "updateNewCallbackQuery",
          "properties": [
            {
              "name": "id",
              "type": "int64",
              "nilable": false
            },
            {
              "name": "sender_user_id",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "chat_id",
              "type": "int53",
              "nilable": false
            },
            {
              "name": "message_id",
              "type": "int53",
              "description": "Identifier of the message, from which the query originated @chat_instance Identifier that uniquely corresponds to the chat to which the message was sent @payload Query payload",
              "nilable": false
            },
            {
              "name": "chat_instance",
              "type": "int64",
              "nilable": false
            },
            {
              "name": "payload",
              "type": "CallbackQueryPayload",
              "nilable": false
            }
          ],
          "type": "Update",
          "description": "A new incoming callback query; for bots only @id Unique query identifier @sender_user_id Identifier of the user who sent the query @chat_id Identifier of the chat, in which the query was sent",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "updateNewInlineCallbackQuery",
          "properties": [
            {
              "name": "id",
              "type": "int64",
              "nilable": false
            },
            {
              "name": "sender_user_id",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "inline_message_id",
              "type": "string",
              "nilable": false
            },
            {
              "name": "chat_instance",
              "type": "int64",
              "description": "An identifier uniquely corresponding to the chat a message was sent to @payload Query payload",
              "nilable": false
            },
            {
              "name": "payload",
              "type": "CallbackQueryPayload",
              "nilable": false
            }
          ],
          "type": "Update",
          "description": "A new incoming callback query from a message sent via a bot; for bots only @id Unique query identifier @sender_user_id Identifier of the user who sent the query @inline_message_id Identifier of the inline message, from which the query originated",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "updateNewShippingQuery",
          "properties": [
            {
              "name": "id",
              "type": "int64",
              "nilable": false
            },
            {
              "name": "sender_user_id",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "invoice_payload",
              "type": "string",
              "nilable": false
            },
            {
              "name": "shipping_address",
              "type": "address",
              "nilable": false
            }
          ],
          "type": "Update",
          "description": "A new incoming shipping query; for bots only. Only for invoices with flexible price @id Unique query identifier @sender_user_id Identifier of the user who sent the query @invoice_payload Invoice payload @shipping_address User shipping address",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "updateNewPreCheckoutQuery",
          "properties": [
            {
              "name": "id",
              "type": "int64",
              "nilable": false
            },
            {
              "name": "sender_user_id",
              "type": "int32",
              "nilable": false
            },
            {
              "name": "currency",
              "type": "string",
              "nilable": false
            },
            {
              "name": "total_amount",
              "type": "int53",
              "nilable": false
            },
            {
              "name": "invoice_payload",
              "type": "bytes",
              "description": "Invoice payload @shipping_option_id Identifier of a shipping option chosen by the user; may be empty if not applicable @order_info Information about the order; may be null",
              "nilable": true
            },
            {
              "name": "shipping_option_id",
              "type": "string",
              "nilable": false
            },
            {
              "name": "order_info",
              "type": "orderInfo",
              "nilable": false
            }
          ],
          "type": "Update",
          "description": "A new incoming pre-checkout query; for bots only. Contains full information about a checkout @id Unique query identifier @sender_user_id Identifier of the user who sent the query @currency Currency for the product price @total_amount Total price for the product, in the minimal quantity of the currency",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "updateNewCustomEvent",
          "properties": [
            {
              "name": "event",
              "type": "string",
              "nilable": false
            }
          ],
          "type": "Update",
          "description": "A new incoming event; for bots only @event A JSON-serialized event",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "updateNewCustomQuery",
          "properties": [
            {
              "name": "id",
              "type": "int64",
              "nilable": false
            },
            {
              "name": "data",
              "type": "string",
              "nilable": false
            },
            {
              "name": "timeout",
              "type": "int32",
              "nilable": false
            }
          ],
          "type": "Update",
          "description": "A new incoming query; for bots only @id The query identifier @data JSON-serialized query data @timeout Query timeout",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "updatePoll",
          "properties": [
            {
              "name": "poll",
              "type": "poll",
              "nilable": false
            }
          ],
          "type": "Update",
          "description": "Information about a poll was updated; for bots only @poll New data about the poll",
          "children": []
        }
      ]
    },
    {
      "function": false,
      "is_abstract": true,
      "name": "LogStream",
      "properties": [],
      "type": "Base",
      "description": "Describes a stream to which TDLib internal log is written",
      "children": [
        {
          "function": false,
          "is_abstract": false,
          "name": "logStreamDefault",
          "properties": [],
          "type": "LogStream",
          "description": "The log is written to stderr or an OS specific log",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "logStreamFile",
          "properties": [
            {
              "name": "path",
              "type": "string",
              "nilable": false
            },
            {
              "name": "max_file_size",
              "type": "int53",
              "nilable": false
            }
          ],
          "type": "LogStream",
          "description": "The log is written to a file @path Path to the file to where the internal TDLib log will be written @max_file_size Maximum size of the file to where the internal TDLib log is written before the file will be auto-rotated",
          "children": []
        },
        {
          "function": false,
          "is_abstract": false,
          "name": "logStreamEmpty",
          "properties": [],
          "type": "LogStream",
          "description": "The log is written nowhere",
          "children": []
        }
      ]
    }
  ],
  "constructors": [
    {
      "function": false,
      "is_abstract": false,
      "name": "error",
      "properties": [
        {
          "name": "code",
          "type": "int32",
          "description": "Error code; subject to future changes. If the error code is 406, the error message must not be processed in any way and must not be displayed to the user",
          "nilable": false
        },
        {
          "name": "message",
          "type": "string",
          "description": "Error message; subject to future changes",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "An object of this type can be returned on every function call, in case of an error",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "ok",
      "properties": [],
      "type": "Base",
      "description": "An object of this type is returned on a successful function call for certain functions",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "tdlibParameters",
      "properties": [
        {
          "name": "use_test_dc",
          "type": "Bool",
          "description": "If set to true, the Telegram test environment will be used instead of the production environment",
          "nilable": false
        },
        {
          "name": "database_directory",
          "type": "string",
          "description": "The path to the directory for the persistent database; if empty, the current working directory will be used",
          "nilable": true
        },
        {
          "name": "files_directory",
          "type": "string",
          "description": "The path to the directory for storing files; if empty, database_directory will be used",
          "nilable": true
        },
        {
          "name": "use_file_database",
          "type": "Bool",
          "description": "If set to true, information about downloaded and uploaded files will be saved between application restarts",
          "nilable": false
        },
        {
          "name": "use_chat_info_database",
          "type": "Bool",
          "description": "If set to true, the library will maintain a cache of users, basic groups, supergroups, channels and secret chats. Implies use_file_database",
          "nilable": false
        },
        {
          "name": "use_message_database",
          "type": "Bool",
          "description": "If set to true, the library will maintain a cache of chats and messages. Implies use_chat_info_database",
          "nilable": false
        },
        {
          "name": "use_secret_chats",
          "type": "Bool",
          "description": "If set to true, support for secret chats will be enabled",
          "nilable": false
        },
        {
          "name": "api_id",
          "type": "int32",
          "description": "Application identifier for Telegram API access, which can be obtained at https://my.telegram.org",
          "nilable": false
        },
        {
          "name": "api_hash",
          "type": "string",
          "description": "Application identifier hash for Telegram API access, which can be obtained at https://my.telegram.org",
          "nilable": false
        },
        {
          "name": "system_language_code",
          "type": "string",
          "description": "IETF language tag of the user's operating system language; must be non-empty",
          "nilable": false
        },
        {
          "name": "device_model",
          "type": "string",
          "description": "Model of the device the application is being run on; must be non-empty",
          "nilable": false
        },
        {
          "name": "system_version",
          "type": "string",
          "description": "Version of the operating system the application is being run on; must be non-empty",
          "nilable": false
        },
        {
          "name": "application_version",
          "type": "string",
          "description": "Application version; must be non-empty",
          "nilable": false
        },
        {
          "name": "enable_storage_optimizer",
          "type": "Bool",
          "description": "If set to true, old files will automatically be deleted",
          "nilable": false
        },
        {
          "name": "ignore_file_names",
          "type": "Bool",
          "description": "If set to true, original file names will be ignored. Otherwise, downloaded files will be saved under names as close as possible to the original name",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Contains parameters for TDLib initialization",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "authenticationCodeInfo",
      "properties": [
        {
          "name": "phone_number",
          "type": "string",
          "nilable": false
        },
        {
          "name": "type",
          "type": "AuthenticationCodeType",
          "nilable": false
        },
        {
          "name": "next_type",
          "type": "AuthenticationCodeType",
          "nilable": false
        },
        {
          "name": "timeout",
          "type": "int32",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Information about the authentication code that was sent @phone_number A phone number that is being authenticated @type Describes the way the code was sent to the user @next_type Describes the way the next code will be sent to the user; may be null @timeout Timeout before the code should be re-sent, in seconds",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "emailAddressAuthenticationCodeInfo",
      "properties": [
        {
          "name": "email_address_pattern",
          "type": "string",
          "nilable": false
        },
        {
          "name": "length",
          "type": "int32",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Information about the email address authentication code that was sent @email_address_pattern Pattern of the email address to which an authentication code was sent @length Length of the code; 0 if unknown",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "textEntity",
      "properties": [
        {
          "name": "offset",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "length",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "type",
          "type": "TextEntityType",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Represents a part of the text that needs to be formatted in some unusual way @offset Offset of the entity in UTF-16 code points @length Length of the entity, in UTF-16 code points @type Type of the entity",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "textEntities",
      "properties": [
        {
          "name": "entities",
          "type": "vector<textEntity>",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Contains a list of text entities @entities List of text entities",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "formattedText",
      "properties": [
        {
          "name": "text",
          "type": "string",
          "nilable": false
        },
        {
          "name": "entities",
          "type": "vector<textEntity>",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "A text with some entities @text The text @entities Entities contained in the text",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "termsOfService",
      "properties": [
        {
          "name": "text",
          "type": "formattedText",
          "nilable": false
        },
        {
          "name": "min_user_age",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "show_popup",
          "type": "Bool",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Contains Telegram terms of service @text Text of the terms of service @min_user_age Minimum age of a user to be able to accept the terms; 0 if any @show_popup True, if a blocking popup with terms of service must be shown to the user",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "passwordState",
      "properties": [
        {
          "name": "has_password",
          "type": "Bool",
          "nilable": false
        },
        {
          "name": "password_hint",
          "type": "string",
          "nilable": false
        },
        {
          "name": "has_recovery_email_address",
          "type": "Bool",
          "description": "True, if a recovery email is set @has_passport_data True, if some Telegram Passport elements were saved",
          "nilable": false
        },
        {
          "name": "has_passport_data",
          "type": "Bool",
          "nilable": false
        },
        {
          "name": "recovery_email_address_code_info",
          "type": "emailAddressAuthenticationCodeInfo",
          "description": "Information about the recovery email address to which the confirmation email was sent; may be null",
          "nilable": true
        }
      ],
      "type": "Base",
      "description": "Represents the current state of 2-step verification @has_password True, if a 2-step verification password is set @password_hint Hint for the password; may be empty",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "recoveryEmailAddress",
      "properties": [
        {
          "name": "recovery_email_address",
          "type": "string",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Contains information about the current recovery email address @recovery_email_address Recovery email address",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "temporaryPasswordState",
      "properties": [
        {
          "name": "has_password",
          "type": "Bool",
          "nilable": false
        },
        {
          "name": "valid_for",
          "type": "int32",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Returns information about the availability of a temporary password, which can be used for payments @has_password True, if a temporary password is available @valid_for Time left before the temporary password expires, in seconds",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "localFile",
      "properties": [
        {
          "name": "path",
          "type": "string",
          "description": "Local path to the locally available file part; may be empty",
          "nilable": true
        },
        {
          "name": "can_be_downloaded",
          "type": "Bool",
          "description": "True, if it is possible to try to download or generate the file",
          "nilable": false
        },
        {
          "name": "can_be_deleted",
          "type": "Bool",
          "description": "True, if the file can be deleted",
          "nilable": false
        },
        {
          "name": "is_downloading_active",
          "type": "Bool",
          "description": "True, if the file is currently being downloaded (or a local copy is being generated by some other means)",
          "nilable": false
        },
        {
          "name": "is_downloading_completed",
          "type": "Bool",
          "description": "True, if the local copy is fully available",
          "nilable": false
        },
        {
          "name": "download_offset",
          "type": "int32",
          "description": "Download will be started from this offset. downloaded_prefix_size is calculated from this offset",
          "nilable": false
        },
        {
          "name": "downloaded_prefix_size",
          "type": "int32",
          "description": "If is_downloading_completed is false, then only some prefix of the file starting from download_offset is ready to be read. downloaded_prefix_size is the size of that prefix",
          "nilable": false
        },
        {
          "name": "downloaded_size",
          "type": "int32",
          "description": "Total downloaded file bytes. Should be used only for calculating download progress. The actual file size may be bigger, and some parts of it may contain garbage",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Represents a local file",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "remoteFile",
      "properties": [
        {
          "name": "id",
          "type": "string",
          "description": "Remote file identifier; may be empty. Can be used across application restarts or even from other devices for the current user. If the ID starts with \"http://\" or \"https://\", it represents the HTTP URL of the file. TDLib is currently unable to download files if only their URL is known. //-If downloadFile is called on such a file or if it is sent to a secret chat, TDLib starts a file generation process by sending updateFileGenerationStart to the client with the HTTP URL in the original_path and \"#url#\" as the conversion string. Clients should generate the file by downloading it to the specified location",
          "nilable": true
        },
        {
          "name": "is_uploading_active",
          "type": "Bool",
          "description": "True, if the file is currently being uploaded (or a remote copy is being generated by some other means)",
          "nilable": false
        },
        {
          "name": "is_uploading_completed",
          "type": "Bool",
          "description": "True, if a remote copy is fully available",
          "nilable": false
        },
        {
          "name": "uploaded_size",
          "type": "int32",
          "description": "Size of the remote available part of the file; 0 if unknown",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Represents a remote file",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "file",
      "properties": [
        {
          "name": "id",
          "type": "int32",
          "description": "Unique file identifier",
          "nilable": false
        },
        {
          "name": "size",
          "type": "int32",
          "description": "File size; 0 if unknown",
          "nilable": false
        },
        {
          "name": "expected_size",
          "type": "int32",
          "description": "Expected file size in case the exact file size is unknown, but an approximate size is known. Can be used to show download/upload progress",
          "nilable": false
        },
        {
          "name": "local",
          "type": "localFile",
          "description": "Information about the local copy of the file",
          "nilable": false
        },
        {
          "name": "remote",
          "type": "remoteFile",
          "description": "Information about the remote copy of the file",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Represents a file",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "photoSize",
      "properties": [
        {
          "name": "type",
          "type": "string",
          "nilable": false
        },
        {
          "name": "photo",
          "type": "file",
          "nilable": false
        },
        {
          "name": "width",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "height",
          "type": "int32",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Photo description @type Thumbnail type (see https://core.telegram.org/constructor/photoSize) @photo Information about the photo file @width Photo width @height Photo height",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "minithumbnail",
      "properties": [
        {
          "name": "width",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "height",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "data",
          "type": "bytes",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Thumbnail image of a very poor quality and low resolution @width Thumbnail width, usually doesn't exceed 40 @height Thumbnail height, usually doesn't exceed 40 @data The thumbnail in JPEG format",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "maskPosition",
      "properties": [
        {
          "name": "point",
          "type": "MaskPoint",
          "nilable": false
        },
        {
          "name": "x_shift",
          "type": "double",
          "description": "Shift by X-axis measured in widths of the mask scaled to the face size, from left to right. (For example, -1.0 will place the mask just to the left of the default mask position)",
          "nilable": false
        },
        {
          "name": "y_shift",
          "type": "double",
          "description": "Shift by Y-axis measured in heights of the mask scaled to the face size, from top to bottom. (For example, 1.0 will place the mask just below the default mask position)",
          "nilable": false
        },
        {
          "name": "scale",
          "type": "double",
          "description": "Mask scaling coefficient. (For example, 2.0 means a doubled size)",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Position on a photo where a mask should be placed @point Part of the face, relative to which the mask should be placed",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "pollOption",
      "properties": [
        {
          "name": "text",
          "type": "string",
          "nilable": false
        },
        {
          "name": "voter_count",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "vote_percentage",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "is_chosen",
          "type": "Bool",
          "description": "True, if the option was chosen by the user @is_being_chosen True, if the option is being chosen by a pending setPollAnswer request",
          "nilable": false
        },
        {
          "name": "is_being_chosen",
          "type": "Bool",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Describes one answer option of a poll @text Option text, 1-100 characters @voter_count Number of voters for this option, available only for closed or voted polls @vote_percentage The percentage of votes for this option, 0-100",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "animation",
      "properties": [
        {
          "name": "duration",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "width",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "height",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "file_name",
          "type": "string",
          "description": "Original name of the file; as defined by the sender @mime_type MIME type of the file, usually \"image/gif\" or \"video/mp4\"",
          "nilable": false
        },
        {
          "name": "mime_type",
          "type": "string",
          "nilable": false
        },
        {
          "name": "minithumbnail",
          "type": "minithumbnail",
          "description": "Animation minithumbnail; may be null @thumbnail Animation thumbnail; may be null @animation File containing the animation",
          "nilable": true
        },
        {
          "name": "thumbnail",
          "type": "photoSize",
          "nilable": false
        },
        {
          "name": "animation",
          "type": "file",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Describes an animation file. The animation must be encoded in GIF or MPEG4 format @duration Duration of the animation, in seconds; as defined by the sender @width Width of the animation @height Height of the animation",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "audio",
      "properties": [
        {
          "name": "duration",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "title",
          "type": "string",
          "nilable": false
        },
        {
          "name": "performer",
          "type": "string",
          "nilable": false
        },
        {
          "name": "file_name",
          "type": "string",
          "description": "Original name of the file; as defined by the sender @mime_type The MIME type of the file; as defined by the sender @album_cover_minithumbnail The minithumbnail of the album cover; may be null @album_cover_thumbnail The thumbnail of the album cover; as defined by the sender. The full size thumbnail should be extracted from the downloaded file; may be null @audio File containing the audio",
          "nilable": true
        },
        {
          "name": "mime_type",
          "type": "string",
          "nilable": false
        },
        {
          "name": "album_cover_minithumbnail",
          "type": "minithumbnail",
          "nilable": false
        },
        {
          "name": "album_cover_thumbnail",
          "type": "photoSize",
          "nilable": false
        },
        {
          "name": "audio",
          "type": "file",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Describes an audio file. Audio is usually in MP3 or M4A format @duration Duration of the audio, in seconds; as defined by the sender @title Title of the audio; as defined by the sender @performer Performer of the audio; as defined by the sender",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "document",
      "properties": [
        {
          "name": "file_name",
          "type": "string",
          "nilable": false
        },
        {
          "name": "mime_type",
          "type": "string",
          "nilable": false
        },
        {
          "name": "minithumbnail",
          "type": "minithumbnail",
          "description": "Document minithumbnail; may be null @thumbnail Document thumbnail in JPEG or PNG format (PNG will be used only for background patterns); as defined by the sender; may be null @document File containing the document",
          "nilable": true
        },
        {
          "name": "thumbnail",
          "type": "photoSize",
          "nilable": false
        },
        {
          "name": "document",
          "type": "file",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Describes a document of any type @file_name Original name of the file; as defined by the sender @mime_type MIME type of the file; as defined by the sender",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "photo",
      "properties": [
        {
          "name": "has_stickers",
          "type": "Bool",
          "nilable": false
        },
        {
          "name": "minithumbnail",
          "type": "minithumbnail",
          "nilable": false
        },
        {
          "name": "sizes",
          "type": "vector<photoSize>",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Describes a photo @has_stickers True, if stickers were added to the photo @minithumbnail Photo minithumbnail; may be null @sizes Available variants of the photo, in different sizes",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "sticker",
      "properties": [
        {
          "name": "set_id",
          "type": "int64",
          "nilable": false
        },
        {
          "name": "width",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "height",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "emoji",
          "type": "string",
          "description": "Emoji corresponding to the sticker @is_animated True, if the sticker is an animated sticker in TGS format @is_mask True, if the sticker is a mask @mask_position Position where the mask should be placed; may be null @thumbnail Sticker thumbnail in WEBP or JPEG format; may be null @sticker File containing the sticker",
          "nilable": true
        },
        {
          "name": "is_animated",
          "type": "Bool",
          "nilable": false
        },
        {
          "name": "is_mask",
          "type": "Bool",
          "nilable": false
        },
        {
          "name": "mask_position",
          "type": "maskPosition",
          "nilable": false
        },
        {
          "name": "thumbnail",
          "type": "photoSize",
          "nilable": false
        },
        {
          "name": "sticker",
          "type": "file",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Describes a sticker @set_id The identifier of the sticker set to which the sticker belongs; 0 if none @width Sticker width; as defined by the sender @height Sticker height; as defined by the sender",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "video",
      "properties": [
        {
          "name": "duration",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "width",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "height",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "file_name",
          "type": "string",
          "description": "Original name of the file; as defined by the sender @mime_type MIME type of the file; as defined by the sender @has_stickers True, if stickers were added to the video",
          "nilable": false
        },
        {
          "name": "mime_type",
          "type": "string",
          "nilable": false
        },
        {
          "name": "has_stickers",
          "type": "Bool",
          "nilable": false
        },
        {
          "name": "supports_streaming",
          "type": "Bool",
          "description": "True, if the video should be tried to be streamed @minithumbnail Video minithumbnail; may be null @thumbnail Video thumbnail; as defined by the sender; may be null @video File containing the video",
          "nilable": true
        },
        {
          "name": "minithumbnail",
          "type": "minithumbnail",
          "nilable": false
        },
        {
          "name": "thumbnail",
          "type": "photoSize",
          "nilable": false
        },
        {
          "name": "video",
          "type": "file",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Describes a video file @duration Duration of the video, in seconds; as defined by the sender @width Video width; as defined by the sender @height Video height; as defined by the sender",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "videoNote",
      "properties": [
        {
          "name": "duration",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "length",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "minithumbnail",
          "type": "minithumbnail",
          "nilable": false
        },
        {
          "name": "thumbnail",
          "type": "photoSize",
          "nilable": false
        },
        {
          "name": "video",
          "type": "file",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Describes a video note. The video must be equal in width and height, cropped to a circle, and stored in MPEG4 format @duration Duration of the video, in seconds; as defined by the sender @length Video width and height; as defined by the sender @minithumbnail Video minithumbnail; may be null @thumbnail Video thumbnail; as defined by the sender; may be null @video File containing the video",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "voiceNote",
      "properties": [
        {
          "name": "duration",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "waveform",
          "type": "bytes",
          "description": "A waveform representation of the voice note in 5-bit format @mime_type MIME type of the file; as defined by the sender @voice File containing the voice note",
          "nilable": false
        },
        {
          "name": "mime_type",
          "type": "string",
          "nilable": false
        },
        {
          "name": "voice",
          "type": "file",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Describes a voice note. The voice note must be encoded with the Opus codec, and stored inside an OGG container. Voice notes can have only a single audio channel @duration Duration of the voice note, in seconds; as defined by the sender",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "contact",
      "properties": [
        {
          "name": "phone_number",
          "type": "string",
          "nilable": false
        },
        {
          "name": "first_name",
          "type": "string",
          "nilable": false
        },
        {
          "name": "last_name",
          "type": "string",
          "nilable": false
        },
        {
          "name": "vcard",
          "type": "string",
          "nilable": false
        },
        {
          "name": "user_id",
          "type": "int32",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Describes a user contact @phone_number Phone number of the user @first_name First name of the user; 1-255 characters in length @last_name Last name of the user @vcard Additional data about the user in a form of vCard; 0-2048 bytes in length @user_id Identifier of the user, if known; otherwise 0",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "location",
      "properties": [
        {
          "name": "latitude",
          "type": "double",
          "nilable": false
        },
        {
          "name": "longitude",
          "type": "double",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Describes a location on planet Earth @latitude Latitude of the location in degrees; as defined by the sender @longitude Longitude of the location, in degrees; as defined by the sender",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "venue",
      "properties": [
        {
          "name": "location",
          "type": "location",
          "nilable": false
        },
        {
          "name": "title",
          "type": "string",
          "nilable": false
        },
        {
          "name": "address",
          "type": "string",
          "nilable": false
        },
        {
          "name": "provider",
          "type": "string",
          "nilable": false
        },
        {
          "name": "id",
          "type": "string",
          "description": "Identifier of the venue in the provider database; as defined by the sender @type Type of the venue in the provider database; as defined by the sender",
          "nilable": false
        },
        {
          "name": "type",
          "type": "string",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Describes a venue @location Venue location; as defined by the sender @title Venue name; as defined by the sender @address Venue address; as defined by the sender @provider Provider of the venue database; as defined by the sender. Currently only \"foursquare\" needs to be supported",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "game",
      "properties": [
        {
          "name": "id",
          "type": "int64",
          "nilable": false
        },
        {
          "name": "short_name",
          "type": "string",
          "nilable": false
        },
        {
          "name": "title",
          "type": "string",
          "nilable": false
        },
        {
          "name": "text",
          "type": "formattedText",
          "nilable": false
        },
        {
          "name": "description",
          "type": "string",
          "description": "Describes a game @id Game ID @short_name Game short name. To share a game use the URL https://t.me/{bot_username}?game={game_short_name} @title Game title @text Game text, usually containing scoreboards for a game",
          "nilable": false
        },
        {
          "name": "photo",
          "type": "photo",
          "nilable": false
        },
        {
          "name": "animation",
          "type": "animation",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Describes a game @id Game ID @short_name Game short name. To share a game use the URL https://t.me/{bot_username}?game={game_short_name} @title Game title @text Game text, usually containing scoreboards for a game",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "poll",
      "properties": [
        {
          "name": "id",
          "type": "int64",
          "nilable": false
        },
        {
          "name": "question",
          "type": "string",
          "nilable": false
        },
        {
          "name": "options",
          "type": "vector<pollOption>",
          "nilable": false
        },
        {
          "name": "total_voter_count",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "is_closed",
          "type": "Bool",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Describes a poll @id Unique poll identifier @question Poll question, 1-255 characters @options List of poll answer options @total_voter_count Total number of voters, participating in the poll @is_closed True, if the poll is closed",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "profilePhoto",
      "properties": [
        {
          "name": "id",
          "type": "int64",
          "nilable": false
        },
        {
          "name": "small",
          "type": "file",
          "description": "A small (160x160) user profile photo. The file can be downloaded only before the photo is changed @big A big (640x640) user profile photo. The file can be downloaded only before the photo is changed",
          "nilable": false
        },
        {
          "name": "big",
          "type": "file",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Describes a user profile photo @id Photo identifier; 0 for an empty photo. Can be used to find a photo in a list of userProfilePhotos",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "chatPhoto",
      "properties": [
        {
          "name": "small",
          "type": "file",
          "nilable": false
        },
        {
          "name": "big",
          "type": "file",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Describes the photo of a chat @small A small (160x160) chat photo. The file can be downloaded only before the photo is changed @big A big (640x640) chat photo. The file can be downloaded only before the photo is changed",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "botCommand",
      "properties": [
        {
          "name": "command",
          "type": "string",
          "nilable": false
        },
        {
          "name": "description",
          "type": "string",
          "description": "Represents commands supported by a bot @command Text of the bot command @param_description Description of the bot command",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Represents commands supported by a bot @command Text of the bot command @param_description Description of the bot command",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "botInfo",
      "properties": [
        {
          "name": "description",
          "type": "string",
          "description": "Provides information about a bot and its supported commands @param_description Long description shown on the user info page @commands A list of commands supported by the bot",
          "nilable": false
        },
        {
          "name": "commands",
          "type": "vector<botCommand>",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Provides information about a bot and its supported commands @param_description Long description shown on the user info page @commands A list of commands supported by the bot",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "user",
      "properties": [
        {
          "name": "id",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "first_name",
          "type": "string",
          "nilable": false
        },
        {
          "name": "last_name",
          "type": "string",
          "nilable": false
        },
        {
          "name": "username",
          "type": "string",
          "nilable": false
        },
        {
          "name": "phone_number",
          "type": "string",
          "description": "Phone number of the user @status Current online status of the user @profile_photo Profile photo of the user; may be null //-{type} contains the type of the restriction and at least one of the suffixes \"-all\", \"-ios\", \"-android\", or \"-wp\", which describe the platforms on which access should be restricted. (For example, \"terms-ios-android\". {description} contains a human-readable description of the restriction, which can be shown to the user)",
          "nilable": true
        },
        {
          "name": "status",
          "type": "UserStatus",
          "nilable": false
        },
        {
          "name": "profile_photo",
          "type": "profilePhoto",
          "nilable": false
        },
        {
          "name": "outgoing_link",
          "type": "LinkState",
          "description": "Relationship from the current user to the other user @incoming_link Relationship from the other user to the current user //-{type} contains the type of the restriction and at least one of the suffixes \"-all\", \"-ios\", \"-android\", or \"-wp\", which describe the platforms on which access should be restricted. (For example, \"terms-ios-android\". {description} contains a human-readable description of the restriction, which can be shown to the user)",
          "nilable": false
        },
        {
          "name": "incoming_link",
          "type": "LinkState",
          "nilable": false
        },
        {
          "name": "is_verified",
          "type": "Bool",
          "description": "True, if the user is verified @is_support True, if the user is Telegram support account //-{type} contains the type of the restriction and at least one of the suffixes \"-all\", \"-ios\", \"-android\", or \"-wp\", which describe the platforms on which access should be restricted. (For example, \"terms-ios-android\". {description} contains a human-readable description of the restriction, which can be shown to the user)",
          "nilable": false
        },
        {
          "name": "is_support",
          "type": "Bool",
          "nilable": false
        },
        {
          "name": "restriction_reason",
          "type": "string",
          "description": "If non-empty, it contains the reason why access to this user must be restricted. The format of the string is \"{type}: {description}\". //-{type} contains the type of the restriction and at least one of the suffixes \"-all\", \"-ios\", \"-android\", or \"-wp\", which describe the platforms on which access should be restricted. (For example, \"terms-ios-android\". {description} contains a human-readable description of the restriction, which can be shown to the user)",
          "nilable": false
        },
        {
          "name": "is_scam",
          "type": "Bool",
          "description": "True, if many users reported this user as a scam",
          "nilable": false
        },
        {
          "name": "have_access",
          "type": "Bool",
          "description": "If false, the user is inaccessible, and the only information known about the user is inside this class. It can't be passed to any method except GetUser @type Type of the user @language_code IETF language tag of the user's language; only available to bots",
          "nilable": false
        },
        {
          "name": "type",
          "type": "UserType",
          "nilable": false
        },
        {
          "name": "language_code",
          "type": "string",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Represents a user @id User identifier @first_name First name of the user @last_name Last name of the user @username Username of the user",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "userFullInfo",
      "properties": [
        {
          "name": "is_blocked",
          "type": "Bool",
          "nilable": false
        },
        {
          "name": "can_be_called",
          "type": "Bool",
          "nilable": false
        },
        {
          "name": "has_private_calls",
          "type": "Bool",
          "nilable": false
        },
        {
          "name": "bio",
          "type": "string",
          "description": "A short user bio @share_text For bots, the text that is included with the link when users share the bot @group_in_common_count Number of group chats where both the other user and the current user are a member; 0 for the current user @bot_info If the user is a bot, information about the bot; may be null",
          "nilable": true
        },
        {
          "name": "share_text",
          "type": "string",
          "nilable": false
        },
        {
          "name": "group_in_common_count",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "bot_info",
          "type": "botInfo",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Contains full information about a user (except the full list of profile photos) @is_blocked True, if the user is blacklisted by the current user @can_be_called True, if the user can be called @has_private_calls True, if the user can't be called due to their privacy settings",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "userProfilePhoto",
      "properties": [
        {
          "name": "id",
          "type": "int64",
          "nilable": false
        },
        {
          "name": "added_date",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "sizes",
          "type": "vector<photoSize>",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Contains full information about a user profile photo @id Unique user profile photo identifier @added_date Point in time (Unix timestamp) when the photo has been added @sizes Available variants of the user photo, in different sizes",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "userProfilePhotos",
      "properties": [
        {
          "name": "total_count",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "photos",
          "type": "vector<userProfilePhoto>",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Contains part of the list of user photos @total_count Total number of user profile photos @photos A list of photos",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "users",
      "properties": [
        {
          "name": "total_count",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "user_ids",
          "type": "vector<int32>",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Represents a list of users @total_count Approximate total count of users found @user_ids A list of user identifiers",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "chatPermissions",
      "properties": [
        {
          "name": "can_send_messages",
          "type": "Bool",
          "description": "True, if the user can send text messages, contacts, locations, and venues",
          "nilable": false
        },
        {
          "name": "can_send_media_messages",
          "type": "Bool",
          "description": "True, if the user can send audio files, documents, photos, videos, video notes, and voice notes. Implies can_send_messages permissions",
          "nilable": false
        },
        {
          "name": "can_send_polls",
          "type": "Bool",
          "description": "True, if the user can send polls. Implies can_send_messages permissions",
          "nilable": false
        },
        {
          "name": "can_send_other_messages",
          "type": "Bool",
          "description": "True, if the user can send animations, games, and stickers and use inline bots. Implies can_send_messages permissions",
          "nilable": false
        },
        {
          "name": "can_add_web_page_previews",
          "type": "Bool",
          "description": "True, if the user may add a web page preview to their messages. Implies can_send_messages permissions",
          "nilable": false
        },
        {
          "name": "can_change_info",
          "type": "Bool",
          "description": "True, if the user can change the chat title, photo, and other settings",
          "nilable": false
        },
        {
          "name": "can_invite_users",
          "type": "Bool",
          "description": "True, if the user can invite new users to the chat",
          "nilable": false
        },
        {
          "name": "can_pin_messages",
          "type": "Bool",
          "description": "True, if the user can pin messages",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Describes actions that a user is allowed to take in a chat",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "chatMember",
      "properties": [
        {
          "name": "user_id",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "inviter_user_id",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "joined_chat_date",
          "type": "int32",
          "description": "Point in time (Unix timestamp) when the user joined a chat @status Status of the member in the chat @bot_info If the user is a bot, information about the bot; may be null. Can be null even for a bot if the bot is not a chat member",
          "nilable": true
        },
        {
          "name": "status",
          "type": "ChatMemberStatus",
          "nilable": false
        },
        {
          "name": "bot_info",
          "type": "botInfo",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "A user with information about joining/leaving a chat @user_id User identifier of the chat member @inviter_user_id Identifier of a user that invited/promoted/banned this member in the chat; 0 if unknown",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "chatMembers",
      "properties": [
        {
          "name": "total_count",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "members",
          "type": "vector<chatMember>",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Contains a list of chat members @total_count Approximate total count of chat members found @members A list of chat members",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "basicGroup",
      "properties": [
        {
          "name": "id",
          "type": "int32",
          "description": "Group identifier",
          "nilable": false
        },
        {
          "name": "member_count",
          "type": "int32",
          "description": "Number of members in the group",
          "nilable": false
        },
        {
          "name": "status",
          "type": "ChatMemberStatus",
          "description": "Status of the current user in the group",
          "nilable": false
        },
        {
          "name": "is_active",
          "type": "Bool",
          "description": "True, if the group is active",
          "nilable": false
        },
        {
          "name": "upgraded_to_supergroup_id",
          "type": "int32",
          "description": "Identifier of the supergroup to which this group was upgraded; 0 if none",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Represents a basic group of 0-200 users (must be upgraded to a supergroup to accommodate more than 200 users)",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "basicGroupFullInfo",
      "properties": [
        {
          "name": "description",
          "type": "string",
          "description": "Contains full information about a basic group @param_description Group description @creator_user_id User identifier of the creator of the group; 0 if unknown @members Group members @invite_link Invite link for this group; available only for the group creator and only after it has been generated at least once",
          "nilable": false
        },
        {
          "name": "creator_user_id",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "members",
          "type": "vector<chatMember>",
          "nilable": false
        },
        {
          "name": "invite_link",
          "type": "string",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Contains full information about a basic group @param_description Group description @creator_user_id User identifier of the creator of the group; 0 if unknown @members Group members @invite_link Invite link for this group; available only for the group creator and only after it has been generated at least once",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "supergroup",
      "properties": [
        {
          "name": "id",
          "type": "int32",
          "description": "Supergroup or channel identifier //-{type} Contains the type of the restriction and at least one of the suffixes \"-all\", \"-ios\", \"-android\", or \"-wp\", which describe the platforms on which access should be restricted. (For example, \"terms-ios-android\". {description} contains a human-readable description of the restriction, which can be shown to the user)",
          "nilable": false
        },
        {
          "name": "username",
          "type": "string",
          "description": "Username of the supergroup or channel; empty for private supergroups or channels //-{type} Contains the type of the restriction and at least one of the suffixes \"-all\", \"-ios\", \"-android\", or \"-wp\", which describe the platforms on which access should be restricted. (For example, \"terms-ios-android\". {description} contains a human-readable description of the restriction, which can be shown to the user)",
          "nilable": true
        },
        {
          "name": "date",
          "type": "int32",
          "description": "Point in time (Unix timestamp) when the current user joined, or the point in time when the supergroup or channel was created, in case the user is not a member //-{type} Contains the type of the restriction and at least one of the suffixes \"-all\", \"-ios\", \"-android\", or \"-wp\", which describe the platforms on which access should be restricted. (For example, \"terms-ios-android\". {description} contains a human-readable description of the restriction, which can be shown to the user)",
          "nilable": false
        },
        {
          "name": "status",
          "type": "ChatMemberStatus",
          "description": "Status of the current user in the supergroup or channel //-{type} Contains the type of the restriction and at least one of the suffixes \"-all\", \"-ios\", \"-android\", or \"-wp\", which describe the platforms on which access should be restricted. (For example, \"terms-ios-android\". {description} contains a human-readable description of the restriction, which can be shown to the user)",
          "nilable": false
        },
        {
          "name": "member_count",
          "type": "int32",
          "description": "Member count; 0 if unknown. Currently it is guaranteed to be known only if the supergroup or channel was found through SearchPublicChats //-{type} Contains the type of the restriction and at least one of the suffixes \"-all\", \"-ios\", \"-android\", or \"-wp\", which describe the platforms on which access should be restricted. (For example, \"terms-ios-android\". {description} contains a human-readable description of the restriction, which can be shown to the user)",
          "nilable": false
        },
        {
          "name": "sign_messages",
          "type": "Bool",
          "description": "True, if messages sent to the channel should contain information about the sender. This field is only applicable to channels //-{type} Contains the type of the restriction and at least one of the suffixes \"-all\", \"-ios\", \"-android\", or \"-wp\", which describe the platforms on which access should be restricted. (For example, \"terms-ios-android\". {description} contains a human-readable description of the restriction, which can be shown to the user)",
          "nilable": false
        },
        {
          "name": "is_channel",
          "type": "Bool",
          "description": "True, if the supergroup is a channel //-{type} Contains the type of the restriction and at least one of the suffixes \"-all\", \"-ios\", \"-android\", or \"-wp\", which describe the platforms on which access should be restricted. (For example, \"terms-ios-android\". {description} contains a human-readable description of the restriction, which can be shown to the user)",
          "nilable": false
        },
        {
          "name": "is_verified",
          "type": "Bool",
          "description": "True, if the supergroup or channel is verified //-{type} Contains the type of the restriction and at least one of the suffixes \"-all\", \"-ios\", \"-android\", or \"-wp\", which describe the platforms on which access should be restricted. (For example, \"terms-ios-android\". {description} contains a human-readable description of the restriction, which can be shown to the user)",
          "nilable": false
        },
        {
          "name": "restriction_reason",
          "type": "string",
          "description": "If non-empty, contains the reason why access to this supergroup or channel must be restricted. Format of the string is \"{type}: {description}\". //-{type} Contains the type of the restriction and at least one of the suffixes \"-all\", \"-ios\", \"-android\", or \"-wp\", which describe the platforms on which access should be restricted. (For example, \"terms-ios-android\". {description} contains a human-readable description of the restriction, which can be shown to the user)",
          "nilable": false
        },
        {
          "name": "is_scam",
          "type": "Bool",
          "description": "True, if many users reported this supergroup as a scam",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Represents a supergroup or channel with zero or more members (subscribers in the case of channels). From the point of view of the system, a channel is a special kind of a supergroup: only administrators can post and see the list of members, and posts from all administrators use the name and photo of the channel instead of individual names and profile photos. Unlike supergroups, channels can have an unlimited number of subscribers",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "supergroupFullInfo",
      "properties": [
        {
          "name": "description",
          "type": "string",
          "description": "Contains full information about a supergroup or channel",
          "nilable": false
        },
        {
          "name": "member_count",
          "type": "int32",
          "description": "Number of members in the supergroup or channel; 0 if unknown",
          "nilable": false
        },
        {
          "name": "administrator_count",
          "type": "int32",
          "description": "Number of privileged users in the supergroup or channel; 0 if unknown",
          "nilable": false
        },
        {
          "name": "restricted_count",
          "type": "int32",
          "description": "Number of restricted users in the supergroup; 0 if unknown",
          "nilable": false
        },
        {
          "name": "banned_count",
          "type": "int32",
          "description": "Number of users banned from chat; 0 if unknown",
          "nilable": false
        },
        {
          "name": "can_get_members",
          "type": "Bool",
          "description": "True, if members of the chat can be retrieved",
          "nilable": false
        },
        {
          "name": "can_set_username",
          "type": "Bool",
          "description": "True, if the chat can be made public",
          "nilable": false
        },
        {
          "name": "can_set_sticker_set",
          "type": "Bool",
          "description": "True, if the supergroup sticker set can be changed",
          "nilable": false
        },
        {
          "name": "can_view_statistics",
          "type": "Bool",
          "description": "True, if the channel statistics is available through getChatStatisticsUrl",
          "nilable": false
        },
        {
          "name": "is_all_history_available",
          "type": "Bool",
          "description": "True, if new chat members will have access to old messages. In public supergroups and both public and private channels, old messages are always available, so this option affects only private supergroups. The value of this field is only available for chat administrators",
          "nilable": false
        },
        {
          "name": "sticker_set_id",
          "type": "int64",
          "description": "Identifier of the supergroup sticker set; 0 if none",
          "nilable": false
        },
        {
          "name": "invite_link",
          "type": "string",
          "description": "Invite link for this chat",
          "nilable": false
        },
        {
          "name": "upgraded_from_basic_group_id",
          "type": "int32",
          "description": "Identifier of the basic group from which supergroup was upgraded; 0 if none",
          "nilable": false
        },
        {
          "name": "upgraded_from_max_message_id",
          "type": "int53",
          "description": "Identifier of the last message in the basic group from which supergroup was upgraded; 0 if none",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Contains full information about a supergroup or channel",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "secretChat",
      "properties": [
        {
          "name": "id",
          "type": "int32",
          "description": "Secret chat identifier //-Alternatively, the first 32 bytes of the hash can be converted to the hexadecimal format and printed as 32 2-digit hex numbers",
          "nilable": false
        },
        {
          "name": "user_id",
          "type": "int32",
          "description": "Identifier of the chat partner //-Alternatively, the first 32 bytes of the hash can be converted to the hexadecimal format and printed as 32 2-digit hex numbers",
          "nilable": false
        },
        {
          "name": "state",
          "type": "SecretChatState",
          "description": "State of the secret chat //-Alternatively, the first 32 bytes of the hash can be converted to the hexadecimal format and printed as 32 2-digit hex numbers",
          "nilable": false
        },
        {
          "name": "is_outbound",
          "type": "Bool",
          "description": "True, if the chat was created by the current user; otherwise false //-Alternatively, the first 32 bytes of the hash can be converted to the hexadecimal format and printed as 32 2-digit hex numbers",
          "nilable": false
        },
        {
          "name": "ttl",
          "type": "int32",
          "description": "Current message Time To Live setting (self-destruct timer) for the chat, in seconds //-Alternatively, the first 32 bytes of the hash can be converted to the hexadecimal format and printed as 32 2-digit hex numbers",
          "nilable": false
        },
        {
          "name": "key_hash",
          "type": "bytes",
          "description": "Hash of the currently used key for comparison with the hash of the chat partner's key. This is a string of 36 bytes, which must be used to make a 12x12 square image with a color depth of 4. The first 16 bytes should be used to make a central 8x8 square, while the remaining 20 bytes should be used to construct a 2-pixel-wide border around that square. //-Alternatively, the first 32 bytes of the hash can be converted to the hexadecimal format and printed as 32 2-digit hex numbers",
          "nilable": false
        },
        {
          "name": "layer",
          "type": "int32",
          "description": "Secret chat layer; determines features supported by the other client. Video notes are supported if the layer >= 66",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Represents a secret chat",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "messageForwardInfo",
      "properties": [
        {
          "name": "origin",
          "type": "MessageForwardOrigin",
          "description": "Origin of a forwarded message",
          "nilable": false
        },
        {
          "name": "date",
          "type": "int32",
          "description": "Point in time (Unix timestamp) when the message was originally sent",
          "nilable": false
        },
        {
          "name": "from_chat_id",
          "type": "int53",
          "description": "For messages forwarded to the chat with the current user (saved messages) or to the channel discussion supergroup, the identifier of the chat from which the message was forwarded last time; 0 if unknown",
          "nilable": false
        },
        {
          "name": "from_message_id",
          "type": "int53",
          "description": "For messages forwarded to the chat with the current user (saved messages) or to the channel discussion supergroup, the identifier of the original message from which the new message was forwarded last time; 0 if unknown",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Contains information about a forwarded message",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "message",
      "properties": [
        {
          "name": "id",
          "type": "int53",
          "description": "Message identifier, unique for the chat to which the message belongs",
          "nilable": false
        },
        {
          "name": "sender_user_id",
          "type": "int32",
          "description": "Identifier of the user who sent the message; 0 if unknown. Currently, it is unknown for channel posts and for channel posts automatically forwarded to discussion group",
          "nilable": false
        },
        {
          "name": "chat_id",
          "type": "int53",
          "description": "Chat identifier",
          "nilable": false
        },
        {
          "name": "sending_state",
          "type": "MessageSendingState",
          "description": "Information about the sending state of the message; may be null",
          "nilable": true
        },
        {
          "name": "is_outgoing",
          "type": "Bool",
          "description": "True, if the message is outgoing",
          "nilable": false
        },
        {
          "name": "can_be_edited",
          "type": "Bool",
          "description": "True, if the message can be edited. For live location and poll messages this fields shows, whether editMessageLiveLocation or stopPoll can be used with this message by the client",
          "nilable": false
        },
        {
          "name": "can_be_forwarded",
          "type": "Bool",
          "description": "True, if the message can be forwarded",
          "nilable": false
        },
        {
          "name": "can_be_deleted_only_for_self",
          "type": "Bool",
          "description": "True, if the message can be deleted only for the current user while other users will continue to see it",
          "nilable": false
        },
        {
          "name": "can_be_deleted_for_all_users",
          "type": "Bool",
          "description": "True, if the message can be deleted for all users",
          "nilable": false
        },
        {
          "name": "is_channel_post",
          "type": "Bool",
          "description": "True, if the message is a channel post. All messages to channels are channel posts, all other messages are not channel posts",
          "nilable": false
        },
        {
          "name": "contains_unread_mention",
          "type": "Bool",
          "description": "True, if the message contains an unread mention for the current user",
          "nilable": false
        },
        {
          "name": "date",
          "type": "int32",
          "description": "Point in time (Unix timestamp) when the message was sent",
          "nilable": false
        },
        {
          "name": "edit_date",
          "type": "int32",
          "description": "Point in time (Unix timestamp) when the message was last edited",
          "nilable": false
        },
        {
          "name": "forward_info",
          "type": "messageForwardInfo",
          "description": "Information about the initial message sender; may be null",
          "nilable": true
        },
        {
          "name": "reply_to_message_id",
          "type": "int53",
          "description": "If non-zero, the identifier of the message this message is replying to; can be the identifier of a deleted message",
          "nilable": false
        },
        {
          "name": "ttl",
          "type": "int32",
          "description": "For self-destructing messages, the message's TTL (Time To Live), in seconds; 0 if none. TDLib will send updateDeleteMessages or updateMessageContent once the TTL expires",
          "nilable": false
        },
        {
          "name": "ttl_expires_in",
          "type": "double",
          "description": "Time left before the message expires, in seconds",
          "nilable": false
        },
        {
          "name": "via_bot_user_id",
          "type": "int32",
          "description": "If non-zero, the user identifier of the bot through which this message was sent",
          "nilable": false
        },
        {
          "name": "author_signature",
          "type": "string",
          "description": "For channel posts, optional author signature",
          "nilable": true
        },
        {
          "name": "views",
          "type": "int32",
          "description": "Number of times this message was viewed",
          "nilable": false
        },
        {
          "name": "media_album_id",
          "type": "int64",
          "description": "Unique identifier of an album this message belongs to. Only photos and videos can be grouped together in albums",
          "nilable": false
        },
        {
          "name": "content",
          "type": "MessageContent",
          "description": "Content of the message",
          "nilable": false
        },
        {
          "name": "reply_markup",
          "type": "ReplyMarkup",
          "description": "Reply markup for the message; may be null",
          "nilable": true
        }
      ],
      "type": "Base",
      "description": "Describes a message",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "messages",
      "properties": [
        {
          "name": "total_count",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "messages",
          "type": "vector<message>",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Contains a list of messages @total_count Approximate total count of messages found @messages List of messages; messages may be null",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "foundMessages",
      "properties": [
        {
          "name": "messages",
          "type": "vector<message>",
          "nilable": false
        },
        {
          "name": "next_from_search_id",
          "type": "int64",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Contains a list of messages found by a search @messages List of messages @next_from_search_id Value to pass as from_search_id to get more results",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "chatNotificationSettings",
      "properties": [
        {
          "name": "use_default_mute_for",
          "type": "Bool",
          "description": "If true, mute_for is ignored and the value for the relevant type of chat is used instead @mute_for Time left before notifications will be unmuted, in seconds",
          "nilable": false
        },
        {
          "name": "mute_for",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "use_default_sound",
          "type": "Bool",
          "description": "If true, sound is ignored and the value for the relevant type of chat is used instead @sound The name of an audio file to be used for notification sounds; only applies to iOS applications",
          "nilable": false
        },
        {
          "name": "sound",
          "type": "string",
          "nilable": false
        },
        {
          "name": "use_default_show_preview",
          "type": "Bool",
          "description": "If true, show_preview is ignored and the value for the relevant type of chat is used instead @show_preview True, if message content should be displayed in notifications",
          "nilable": false
        },
        {
          "name": "show_preview",
          "type": "Bool",
          "nilable": false
        },
        {
          "name": "use_default_disable_pinned_message_notifications",
          "type": "Bool",
          "description": "If true, disable_pinned_message_notifications is ignored and the value for the relevant type of chat is used instead @disable_pinned_message_notifications If true, notifications for incoming pinned messages will be created as for an ordinary unread message",
          "nilable": false
        },
        {
          "name": "disable_pinned_message_notifications",
          "type": "Bool",
          "nilable": false
        },
        {
          "name": "use_default_disable_mention_notifications",
          "type": "Bool",
          "description": "If true, disable_mention_notifications is ignored and the value for the relevant type of chat is used instead @disable_mention_notifications If true, notifications for messages with mentions will be created as for an ordinary unread message",
          "nilable": false
        },
        {
          "name": "disable_mention_notifications",
          "type": "Bool",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Contains information about notification settings for a chat",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "scopeNotificationSettings",
      "properties": [
        {
          "name": "mute_for",
          "type": "int32",
          "description": "Time left before notifications will be unmuted, in seconds",
          "nilable": false
        },
        {
          "name": "sound",
          "type": "string",
          "description": "The name of an audio file to be used for notification sounds; only applies to iOS applications",
          "nilable": false
        },
        {
          "name": "show_preview",
          "type": "Bool",
          "description": "True, if message content should be displayed in notifications",
          "nilable": false
        },
        {
          "name": "disable_pinned_message_notifications",
          "type": "Bool",
          "description": "True, if notifications for incoming pinned messages will be created as for an ordinary unread message",
          "nilable": false
        },
        {
          "name": "disable_mention_notifications",
          "type": "Bool",
          "description": "True, if notifications for messages with mentions will be created as for an ordinary unread message",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Contains information about notification settings for several chats",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "draftMessage",
      "properties": [
        {
          "name": "reply_to_message_id",
          "type": "int53",
          "nilable": false
        },
        {
          "name": "input_message_text",
          "type": "InputMessageContent",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Contains information about a message draft @reply_to_message_id Identifier of the message to reply to; 0 if none @input_message_text Content of the message draft; this should always be of type inputMessageText",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "chat",
      "properties": [
        {
          "name": "id",
          "type": "int53",
          "description": "Chat unique identifier",
          "nilable": false
        },
        {
          "name": "type",
          "type": "ChatType",
          "description": "Type of the chat",
          "nilable": false
        },
        {
          "name": "title",
          "type": "string",
          "description": "Chat title",
          "nilable": false
        },
        {
          "name": "photo",
          "type": "chatPhoto",
          "description": "Chat photo; may be null",
          "nilable": true
        },
        {
          "name": "permissions",
          "type": "chatPermissions",
          "description": "Actions that non-administrator chat members are allowed to take in the chat",
          "nilable": false
        },
        {
          "name": "last_message",
          "type": "message",
          "description": "Last message in the chat; may be null",
          "nilable": true
        },
        {
          "name": "order",
          "type": "int64",
          "description": "Descending parameter by which chats are sorted in the main chat list. If the order number of two chats is the same, they must be sorted in descending order by ID. If 0, the position of the chat in the list is undetermined",
          "nilable": false
        },
        {
          "name": "is_pinned",
          "type": "Bool",
          "description": "True, if the chat is pinned",
          "nilable": false
        },
        {
          "name": "is_marked_as_unread",
          "type": "Bool",
          "description": "True, if the chat is marked as unread",
          "nilable": false
        },
        {
          "name": "is_sponsored",
          "type": "Bool",
          "description": "True, if the chat is sponsored by the user's MTProxy server",
          "nilable": false
        },
        {
          "name": "can_be_deleted_only_for_self",
          "type": "Bool",
          "description": "True, if the chat messages can be deleted only for the current user while other users will continue to see the messages",
          "nilable": false
        },
        {
          "name": "can_be_deleted_for_all_users",
          "type": "Bool",
          "description": "True, if the chat messages can be deleted for all users",
          "nilable": false
        },
        {
          "name": "can_be_reported",
          "type": "Bool",
          "description": "True, if the chat can be reported to Telegram moderators through reportChat",
          "nilable": false
        },
        {
          "name": "default_disable_notification",
          "type": "Bool",
          "description": "Default value of the disable_notification parameter, used when a message is sent to the chat",
          "nilable": false
        },
        {
          "name": "unread_count",
          "type": "int32",
          "description": "Number of unread messages in the chat",
          "nilable": false
        },
        {
          "name": "last_read_inbox_message_id",
          "type": "int53",
          "description": "Identifier of the last read incoming message",
          "nilable": false
        },
        {
          "name": "last_read_outbox_message_id",
          "type": "int53",
          "description": "Identifier of the last read outgoing message",
          "nilable": false
        },
        {
          "name": "unread_mention_count",
          "type": "int32",
          "description": "Number of unread messages with a mention/reply in the chat",
          "nilable": false
        },
        {
          "name": "notification_settings",
          "type": "chatNotificationSettings",
          "description": "Notification settings for this chat",
          "nilable": false
        },
        {
          "name": "pinned_message_id",
          "type": "int53",
          "description": "Identifier of the pinned message in the chat; 0 if none",
          "nilable": false
        },
        {
          "name": "reply_markup_message_id",
          "type": "int53",
          "description": "Identifier of the message from which reply markup needs to be used; 0 if there is no default custom reply markup in the chat",
          "nilable": false
        },
        {
          "name": "draft_message",
          "type": "draftMessage",
          "description": "A draft of a message in the chat; may be null",
          "nilable": true
        },
        {
          "name": "client_data",
          "type": "string",
          "description": "Contains client-specific data associated with the chat. (For example, the chat position or local chat notification settings can be stored here.) Persistent if a message database is used",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "A chat. (Can be a private chat, basic group, supergroup, or secret chat)",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "chats",
      "properties": [
        {
          "name": "chat_ids",
          "type": "vector<int53>",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Represents a list of chats @chat_ids List of chat identifiers",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "chatInviteLink",
      "properties": [
        {
          "name": "invite_link",
          "type": "string",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Contains a chat invite link @invite_link Chat invite link",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "chatInviteLinkInfo",
      "properties": [
        {
          "name": "chat_id",
          "type": "int53",
          "description": "Chat identifier of the invite link; 0 if the user is not a member of this chat",
          "nilable": false
        },
        {
          "name": "type",
          "type": "ChatType",
          "description": "Contains information about the type of the chat",
          "nilable": false
        },
        {
          "name": "title",
          "type": "string",
          "description": "Title of the chat",
          "nilable": false
        },
        {
          "name": "photo",
          "type": "chatPhoto",
          "description": "Chat photo; may be null",
          "nilable": true
        },
        {
          "name": "member_count",
          "type": "int32",
          "description": "Number of members",
          "nilable": false
        },
        {
          "name": "member_user_ids",
          "type": "vector<int32>",
          "description": "User identifiers of some chat members that may be known to the current user",
          "nilable": false
        },
        {
          "name": "is_public",
          "type": "Bool",
          "description": "True, if the chat is a public supergroup or a channel with a username",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Contains information about a chat invite link",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "keyboardButton",
      "properties": [
        {
          "name": "text",
          "type": "string",
          "nilable": false
        },
        {
          "name": "type",
          "type": "KeyboardButtonType",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Represents a single button in a bot keyboard @text Text of the button @type Type of the button",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "inlineKeyboardButton",
      "properties": [
        {
          "name": "text",
          "type": "string",
          "nilable": false
        },
        {
          "name": "type",
          "type": "InlineKeyboardButtonType",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Represents a single button in an inline keyboard @text Text of the button @type Type of the button",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "pageBlockCaption",
      "properties": [
        {
          "name": "text",
          "type": "RichText",
          "nilable": false
        },
        {
          "name": "credit",
          "type": "RichText",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Contains a caption of an instant view web page block, consisting of a text and a trailing credit @text Content of the caption @credit Block credit (like HTML tag <cite>)",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "pageBlockListItem",
      "properties": [
        {
          "name": "label",
          "type": "string",
          "nilable": false
        },
        {
          "name": "page_blocks",
          "type": "vector<PageBlock>",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Describes an item of a list page block @label Item label @page_blocks Item blocks",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "pageBlockTableCell",
      "properties": [
        {
          "name": "text",
          "type": "RichText",
          "nilable": false
        },
        {
          "name": "is_header",
          "type": "Bool",
          "nilable": false
        },
        {
          "name": "colspan",
          "type": "int32",
          "description": "The number of columns the cell should span @rowspan The number of rows the cell should span",
          "nilable": false
        },
        {
          "name": "rowspan",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "align",
          "type": "PageBlockHorizontalAlignment",
          "description": "Horizontal cell content alignment @valign Vertical cell content alignment",
          "nilable": false
        },
        {
          "name": "valign",
          "type": "PageBlockVerticalAlignment",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Represents a cell of a table @text Cell text; may be null. If the text is null, then the cell should be invisible @is_header True, if it is a header cell",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "pageBlockRelatedArticle",
      "properties": [
        {
          "name": "url",
          "type": "string",
          "nilable": false
        },
        {
          "name": "title",
          "type": "string",
          "nilable": false
        },
        {
          "name": "description",
          "type": "string",
          "description": "Contains information about a related article @url Related article URL @title Article title; may be empty @param_description Article description; may be empty",
          "nilable": true
        },
        {
          "name": "photo",
          "type": "photo",
          "description": "Article photo; may be null @author Article author; may be empty @publish_date Point in time (Unix timestamp) when the article was published; 0 if unknown",
          "nilable": true
        },
        {
          "name": "author",
          "type": "string",
          "nilable": false
        },
        {
          "name": "publish_date",
          "type": "int32",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Contains information about a related article @url Related article URL @title Article title; may be empty @param_description Article description; may be empty",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "webPageInstantView",
      "properties": [
        {
          "name": "page_blocks",
          "type": "vector<PageBlock>",
          "nilable": false
        },
        {
          "name": "version",
          "type": "int32",
          "description": "Version of the instant view, currently can be 1 or 2",
          "nilable": false
        },
        {
          "name": "url",
          "type": "string",
          "description": "Instant view URL; may be different from WebPage.url and must be used for the correct anchors handling",
          "nilable": false
        },
        {
          "name": "is_rtl",
          "type": "Bool",
          "description": "True, if the instant view must be shown from right to left",
          "nilable": false
        },
        {
          "name": "is_full",
          "type": "Bool",
          "description": "True, if the instant view contains the full page. A network request might be needed to get the full web page instant view",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Describes an instant view page for a web page @page_blocks Content of the web page",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "webPage",
      "properties": [
        {
          "name": "url",
          "type": "string",
          "nilable": false
        },
        {
          "name": "display_url",
          "type": "string",
          "nilable": false
        },
        {
          "name": "type",
          "type": "string",
          "description": "Type of the web page. Can be: article, photo, audio, video, document, profile, app, or something else",
          "nilable": false
        },
        {
          "name": "site_name",
          "type": "string",
          "description": "Short name of the site (e.g., Google Docs, App Store) @title Title of the content @param_description Description of the content",
          "nilable": false
        },
        {
          "name": "title",
          "type": "string",
          "nilable": false
        },
        {
          "name": "description",
          "type": "string",
          "description": "Describes a web page preview @url Original URL of the link @display_url URL to display",
          "nilable": false
        },
        {
          "name": "photo",
          "type": "photo",
          "description": "Image representing the content; may be null",
          "nilable": true
        },
        {
          "name": "embed_url",
          "type": "string",
          "description": "URL to show in the embedded preview",
          "nilable": false
        },
        {
          "name": "embed_type",
          "type": "string",
          "description": "MIME type of the embedded preview, (e.g., text/html or video/mp4)",
          "nilable": false
        },
        {
          "name": "embed_width",
          "type": "int32",
          "description": "Width of the embedded preview",
          "nilable": false
        },
        {
          "name": "embed_height",
          "type": "int32",
          "description": "Height of the embedded preview",
          "nilable": false
        },
        {
          "name": "duration",
          "type": "int32",
          "description": "Duration of the content, in seconds",
          "nilable": false
        },
        {
          "name": "author",
          "type": "string",
          "description": "Author of the content",
          "nilable": false
        },
        {
          "name": "animation",
          "type": "animation",
          "description": "Preview of the content as an animation, if available; may be null",
          "nilable": true
        },
        {
          "name": "audio",
          "type": "audio",
          "description": "Preview of the content as an audio file, if available; may be null",
          "nilable": true
        },
        {
          "name": "document",
          "type": "document",
          "description": "Preview of the content as a document, if available (currently only available for small PDF files and ZIP archives); may be null",
          "nilable": true
        },
        {
          "name": "sticker",
          "type": "sticker",
          "description": "Preview of the content as a sticker for small WEBP files, if available; may be null",
          "nilable": true
        },
        {
          "name": "video",
          "type": "video",
          "description": "Preview of the content as a video, if available; may be null",
          "nilable": true
        },
        {
          "name": "video_note",
          "type": "videoNote",
          "description": "Preview of the content as a video note, if available; may be null",
          "nilable": true
        },
        {
          "name": "voice_note",
          "type": "voiceNote",
          "description": "Preview of the content as a voice note, if available; may be null",
          "nilable": true
        },
        {
          "name": "instant_view_version",
          "type": "int32",
          "description": "Version of instant view, available for the web page (currently can be 1 or 2), 0 if none",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Describes a web page preview @url Original URL of the link @display_url URL to display",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "address",
      "properties": [
        {
          "name": "country_code",
          "type": "string",
          "nilable": false
        },
        {
          "name": "state",
          "type": "string",
          "nilable": false
        },
        {
          "name": "city",
          "type": "string",
          "nilable": false
        },
        {
          "name": "street_line1",
          "type": "string",
          "nilable": false
        },
        {
          "name": "street_line2",
          "type": "string",
          "nilable": false
        },
        {
          "name": "postal_code",
          "type": "string",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Describes an address @country_code A two-letter ISO 3166-1 alpha-2 country code @state State, if applicable @city City @street_line1 First line of the address @street_line2 Second line of the address @postal_code Address postal code",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "labeledPricePart",
      "properties": [
        {
          "name": "label",
          "type": "string",
          "nilable": false
        },
        {
          "name": "amount",
          "type": "int53",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Portion of the price of a product (e.g., \"delivery cost\", \"tax amount\") @label Label for this portion of the product price @amount Currency amount in minimal quantity of the currency",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "invoice",
      "properties": [
        {
          "name": "currency",
          "type": "string",
          "nilable": false
        },
        {
          "name": "price_parts",
          "type": "vector<labeledPricePart>",
          "nilable": false
        },
        {
          "name": "is_test",
          "type": "Bool",
          "nilable": false
        },
        {
          "name": "need_name",
          "type": "Bool",
          "description": "True, if the user's name is needed for payment @need_phone_number True, if the user's phone number is needed for payment @need_email_address True, if the user's email address is needed for payment",
          "nilable": false
        },
        {
          "name": "need_phone_number",
          "type": "Bool",
          "nilable": false
        },
        {
          "name": "need_email_address",
          "type": "Bool",
          "nilable": false
        },
        {
          "name": "need_shipping_address",
          "type": "Bool",
          "description": "True, if the user's shipping address is needed for payment @send_phone_number_to_provider True, if the user's phone number will be sent to the provider",
          "nilable": false
        },
        {
          "name": "send_phone_number_to_provider",
          "type": "Bool",
          "nilable": false
        },
        {
          "name": "send_email_address_to_provider",
          "type": "Bool",
          "description": "True, if the user's email address will be sent to the provider @is_flexible True, if the total price depends on the shipping method",
          "nilable": false
        },
        {
          "name": "is_flexible",
          "type": "Bool",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Product invoice @currency ISO 4217 currency code @price_parts A list of objects used to calculate the total price of the product @is_test True, if the payment is a test payment",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "orderInfo",
      "properties": [
        {
          "name": "name",
          "type": "string",
          "nilable": false
        },
        {
          "name": "phone_number",
          "type": "string",
          "nilable": false
        },
        {
          "name": "email_address",
          "type": "string",
          "nilable": false
        },
        {
          "name": "shipping_address",
          "type": "address",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Order information @name Name of the user @phone_number Phone number of the user @email_address Email address of the user @shipping_address Shipping address for this order; may be null",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "shippingOption",
      "properties": [
        {
          "name": "id",
          "type": "string",
          "nilable": false
        },
        {
          "name": "title",
          "type": "string",
          "nilable": false
        },
        {
          "name": "price_parts",
          "type": "vector<labeledPricePart>",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "One shipping option @id Shipping option identifier @title Option title @price_parts A list of objects used to calculate the total shipping costs",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "savedCredentials",
      "properties": [
        {
          "name": "id",
          "type": "string",
          "nilable": false
        },
        {
          "name": "title",
          "type": "string",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Contains information about saved card credentials @id Unique identifier of the saved credentials @title Title of the saved credentials",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "paymentsProviderStripe",
      "properties": [
        {
          "name": "publishable_key",
          "type": "string",
          "nilable": false
        },
        {
          "name": "need_country",
          "type": "Bool",
          "nilable": false
        },
        {
          "name": "need_postal_code",
          "type": "Bool",
          "nilable": false
        },
        {
          "name": "need_cardholder_name",
          "type": "Bool",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Stripe payment provider @publishable_key Stripe API publishable key @need_country True, if the user country must be provided @need_postal_code True, if the user ZIP/postal code must be provided @need_cardholder_name True, if the cardholder name must be provided",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "paymentForm",
      "properties": [
        {
          "name": "invoice",
          "type": "invoice",
          "nilable": false
        },
        {
          "name": "url",
          "type": "string",
          "nilable": false
        },
        {
          "name": "payments_provider",
          "type": "paymentsProviderStripe",
          "nilable": false
        },
        {
          "name": "saved_order_info",
          "type": "orderInfo",
          "description": "Saved server-side order information; may be null @saved_credentials Contains information about saved card credentials; may be null @can_save_credentials True, if the user can choose to save credentials @need_password True, if the user will be able to save credentials protected by a password they set up",
          "nilable": true
        },
        {
          "name": "saved_credentials",
          "type": "savedCredentials",
          "nilable": false
        },
        {
          "name": "can_save_credentials",
          "type": "Bool",
          "nilable": false
        },
        {
          "name": "need_password",
          "type": "Bool",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Contains information about an invoice payment form @invoice Full information of the invoice @url Payment form URL @payments_provider Contains information about the payment provider, if available, to support it natively without the need for opening the URL; may be null",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "validatedOrderInfo",
      "properties": [
        {
          "name": "order_info_id",
          "type": "string",
          "nilable": false
        },
        {
          "name": "shipping_options",
          "type": "vector<shippingOption>",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Contains a temporary identifier of validated order information, which is stored for one hour. Also contains the available shipping options @order_info_id Temporary identifier of the order information @shipping_options Available shipping options",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "paymentResult",
      "properties": [
        {
          "name": "success",
          "type": "Bool",
          "nilable": false
        },
        {
          "name": "verification_url",
          "type": "string",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Contains the result of a payment request @success True, if the payment request was successful; otherwise the verification_url will be not empty @verification_url URL for additional payment credentials verification",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "paymentReceipt",
      "properties": [
        {
          "name": "date",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "payments_provider_user_id",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "invoice",
          "type": "invoice",
          "nilable": false
        },
        {
          "name": "order_info",
          "type": "orderInfo",
          "description": "Contains order information; may be null @shipping_option Chosen shipping option; may be null @credentials_title Title of the saved credentials",
          "nilable": true
        },
        {
          "name": "shipping_option",
          "type": "shippingOption",
          "nilable": false
        },
        {
          "name": "credentials_title",
          "type": "string",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Contains information about a successful payment @date Point in time (Unix timestamp) when the payment was made @payments_provider_user_id User identifier of the payment provider bot @invoice Contains information about the invoice",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "datedFile",
      "properties": [
        {
          "name": "file",
          "type": "file",
          "nilable": false
        },
        {
          "name": "date",
          "type": "int32",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "File with the date it was uploaded @file The file @date Point in time (Unix timestamp) when the file was uploaded",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "date",
      "properties": [
        {
          "name": "day",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "month",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "year",
          "type": "int32",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Represents a date according to the Gregorian calendar @day Day of the month, 1-31 @month Month, 1-12 @year Year, 1-9999",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "personalDetails",
      "properties": [
        {
          "name": "first_name",
          "type": "string",
          "description": "First name of the user written in English; 1-255 characters @middle_name Middle name of the user written in English; 0-255 characters @last_name Last name of the user written in English; 1-255 characters",
          "nilable": false
        },
        {
          "name": "middle_name",
          "type": "string",
          "nilable": false
        },
        {
          "name": "last_name",
          "type": "string",
          "nilable": false
        },
        {
          "name": "native_first_name",
          "type": "string",
          "description": "Native first name of the user; 1-255 characters @native_middle_name Native middle name of the user; 0-255 characters @native_last_name Native last name of the user; 1-255 characters",
          "nilable": false
        },
        {
          "name": "native_middle_name",
          "type": "string",
          "nilable": false
        },
        {
          "name": "native_last_name",
          "type": "string",
          "nilable": false
        },
        {
          "name": "birthdate",
          "type": "date",
          "description": "Birthdate of the user @gender Gender of the user, \"male\" or \"female\" @country_code A two-letter ISO 3166-1 alpha-2 country code of the user's country @residence_country_code A two-letter ISO 3166-1 alpha-2 country code of the user's residence country",
          "nilable": false
        },
        {
          "name": "gender",
          "type": "string",
          "nilable": false
        },
        {
          "name": "country_code",
          "type": "string",
          "nilable": false
        },
        {
          "name": "residence_country_code",
          "type": "string",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Contains the user's personal details",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "identityDocument",
      "properties": [
        {
          "name": "number",
          "type": "string",
          "nilable": false
        },
        {
          "name": "expiry_date",
          "type": "date",
          "nilable": false
        },
        {
          "name": "front_side",
          "type": "datedFile",
          "nilable": false
        },
        {
          "name": "reverse_side",
          "type": "datedFile",
          "description": "Reverse side of the document; only for driver license and identity card @selfie Selfie with the document; may be null @translation List of files containing a certified English translation of the document",
          "nilable": true
        },
        {
          "name": "selfie",
          "type": "datedFile",
          "nilable": false
        },
        {
          "name": "translation",
          "type": "vector<datedFile>",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "An identity document @number Document number; 1-24 characters @expiry_date Document expiry date; may be null @front_side Front side of the document",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "inputIdentityDocument",
      "properties": [
        {
          "name": "number",
          "type": "string",
          "nilable": false
        },
        {
          "name": "expiry_date",
          "type": "date",
          "nilable": false
        },
        {
          "name": "front_side",
          "type": "InputFile",
          "nilable": false
        },
        {
          "name": "reverse_side",
          "type": "InputFile",
          "description": "Reverse side of the document; only for driver license and identity card @selfie Selfie with the document, if available @translation List of files containing a certified English translation of the document",
          "nilable": true
        },
        {
          "name": "selfie",
          "type": "InputFile",
          "nilable": false
        },
        {
          "name": "translation",
          "type": "vector<InputFile>",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "An identity document to be saved to Telegram Passport @number Document number; 1-24 characters @expiry_date Document expiry date, if available @front_side Front side of the document",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "personalDocument",
      "properties": [
        {
          "name": "files",
          "type": "vector<datedFile>",
          "nilable": false
        },
        {
          "name": "translation",
          "type": "vector<datedFile>",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "A personal document, containing some information about a user @files List of files containing the pages of the document @translation List of files containing a certified English translation of the document",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "inputPersonalDocument",
      "properties": [
        {
          "name": "files",
          "type": "vector<InputFile>",
          "nilable": false
        },
        {
          "name": "translation",
          "type": "vector<InputFile>",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "A personal document to be saved to Telegram Passport @files List of files containing the pages of the document @translation List of files containing a certified English translation of the document",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "passportElements",
      "properties": [
        {
          "name": "elements",
          "type": "vector<PassportElement>",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Contains information about saved Telegram Passport elements @elements Telegram Passport elements",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "passportElementError",
      "properties": [
        {
          "name": "type",
          "type": "PassportElementType",
          "nilable": false
        },
        {
          "name": "message",
          "type": "string",
          "nilable": false
        },
        {
          "name": "source",
          "type": "PassportElementErrorSource",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Contains the description of an error in a Telegram Passport element @type Type of the Telegram Passport element which has the error @message Error message @source Error source",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "passportSuitableElement",
      "properties": [
        {
          "name": "type",
          "type": "PassportElementType",
          "nilable": false
        },
        {
          "name": "is_selfie_required",
          "type": "Bool",
          "nilable": false
        },
        {
          "name": "is_translation_required",
          "type": "Bool",
          "description": "True, if a certified English translation is required with the document @is_native_name_required True, if personal details must include the user's name in the language of their country of residence",
          "nilable": false
        },
        {
          "name": "is_native_name_required",
          "type": "Bool",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Contains information about a Telegram Passport element that was requested by a service @type Type of the element @is_selfie_required True, if a selfie is required with the identity document",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "passportRequiredElement",
      "properties": [
        {
          "name": "suitable_elements",
          "type": "vector<passportSuitableElement>",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Contains a description of the required Telegram Passport element that was requested by a service @suitable_elements List of Telegram Passport elements any of which is enough to provide",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "passportAuthorizationForm",
      "properties": [
        {
          "name": "id",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "required_elements",
          "type": "vector<passportRequiredElement>",
          "description": "Information about the Telegram Passport elements that need to be provided to complete the form",
          "nilable": false
        },
        {
          "name": "privacy_policy_url",
          "type": "string",
          "description": "URL for the privacy policy of the service; may be empty",
          "nilable": true
        }
      ],
      "type": "Base",
      "description": "Contains information about a Telegram Passport authorization form that was requested @id Unique identifier of the authorization form",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "passportElementsWithErrors",
      "properties": [
        {
          "name": "elements",
          "type": "vector<PassportElement>",
          "nilable": false
        },
        {
          "name": "errors",
          "type": "vector<passportElementError>",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Contains information about a Telegram Passport elements and corresponding errors @elements Telegram Passport elements @errors Errors in the elements that are already available",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "encryptedCredentials",
      "properties": [
        {
          "name": "data",
          "type": "bytes",
          "nilable": false
        },
        {
          "name": "hash",
          "type": "bytes",
          "nilable": false
        },
        {
          "name": "secret",
          "type": "bytes",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Contains encrypted Telegram Passport data credentials @data The encrypted credentials @hash The decrypted data hash @secret Secret for data decryption, encrypted with the service's public key",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "encryptedPassportElement",
      "properties": [
        {
          "name": "type",
          "type": "PassportElementType",
          "nilable": false
        },
        {
          "name": "data",
          "type": "bytes",
          "nilable": false
        },
        {
          "name": "front_side",
          "type": "datedFile",
          "nilable": false
        },
        {
          "name": "reverse_side",
          "type": "datedFile",
          "nilable": false
        },
        {
          "name": "selfie",
          "type": "datedFile",
          "nilable": false
        },
        {
          "name": "translation",
          "type": "vector<datedFile>",
          "nilable": false
        },
        {
          "name": "files",
          "type": "vector<datedFile>",
          "nilable": false
        },
        {
          "name": "value",
          "type": "string",
          "nilable": false
        },
        {
          "name": "hash",
          "type": "string",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Contains information about an encrypted Telegram Passport element; for bots only @type Type of Telegram Passport element @data Encrypted JSON-encoded data about the user @front_side The front side of an identity document @reverse_side The reverse side of an identity document; may be null @selfie Selfie with the document; may be null @translation List of files containing a certified English translation of the document @files List of attached files @value Unencrypted data, phone number or email address @hash Hash of the entire element",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "inputPassportElementError",
      "properties": [
        {
          "name": "type",
          "type": "PassportElementType",
          "nilable": false
        },
        {
          "name": "message",
          "type": "string",
          "nilable": false
        },
        {
          "name": "source",
          "type": "InputPassportElementErrorSource",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Contains the description of an error in a Telegram Passport element; for bots only @type Type of Telegram Passport element that has the error @message Error message @source Error source",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "inputThumbnail",
      "properties": [
        {
          "name": "thumbnail",
          "type": "InputFile",
          "nilable": false
        },
        {
          "name": "width",
          "type": "int32",
          "description": "Thumbnail width, usually shouldn't exceed 320. Use 0 if unknown @height Thumbnail height, usually shouldn't exceed 320. Use 0 if unknown",
          "nilable": false
        },
        {
          "name": "height",
          "type": "int32",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "A thumbnail to be sent along with a file; should be in JPEG or WEBP format for stickers, and less than 200 kB in size @thumbnail Thumbnail file to send. Sending thumbnails by file_id is currently not supported",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "stickers",
      "properties": [
        {
          "name": "stickers",
          "type": "vector<sticker>",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Represents a list of stickers @stickers List of stickers",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "emojis",
      "properties": [
        {
          "name": "emojis",
          "type": "vector<string>",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Represents a list of emoji @emojis List of emojis",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "stickerSet",
      "properties": [
        {
          "name": "id",
          "type": "int64",
          "description": "Identifier of the sticker set @title Title of the sticker set @name Name of the sticker set @thumbnail Sticker set thumbnail in WEBP format with width and height 100; may be null. The file can be downloaded only before the thumbnail is changed",
          "nilable": true
        },
        {
          "name": "title",
          "type": "string",
          "nilable": false
        },
        {
          "name": "name",
          "type": "string",
          "nilable": false
        },
        {
          "name": "thumbnail",
          "type": "photoSize",
          "nilable": false
        },
        {
          "name": "is_installed",
          "type": "Bool",
          "description": "True, if the sticker set has been installed by the current user @is_archived True, if the sticker set has been archived. A sticker set can't be installed and archived simultaneously",
          "nilable": false
        },
        {
          "name": "is_archived",
          "type": "Bool",
          "nilable": false
        },
        {
          "name": "is_official",
          "type": "Bool",
          "description": "True, if the sticker set is official @is_animated True, is the stickers in the set are animated @is_masks True, if the stickers in the set are masks @is_viewed True for already viewed trending sticker sets",
          "nilable": false
        },
        {
          "name": "is_animated",
          "type": "Bool",
          "nilable": false
        },
        {
          "name": "is_masks",
          "type": "Bool",
          "nilable": false
        },
        {
          "name": "is_viewed",
          "type": "Bool",
          "nilable": false
        },
        {
          "name": "stickers",
          "type": "vector<sticker>",
          "description": "List of stickers in this set @emojis A list of emoji corresponding to the stickers in the same order. The list is only for informational purposes, because a sticker is always sent with a fixed emoji from the corresponding Sticker object",
          "nilable": false
        },
        {
          "name": "emojis",
          "type": "vector<emojis>",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Represents a sticker set",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "stickerSetInfo",
      "properties": [
        {
          "name": "id",
          "type": "int64",
          "description": "Identifier of the sticker set @title Title of the sticker set @name Name of the sticker set @thumbnail Sticker set thumbnail in WEBP format with width and height 100; may be null",
          "nilable": true
        },
        {
          "name": "title",
          "type": "string",
          "nilable": false
        },
        {
          "name": "name",
          "type": "string",
          "nilable": false
        },
        {
          "name": "thumbnail",
          "type": "photoSize",
          "nilable": false
        },
        {
          "name": "is_installed",
          "type": "Bool",
          "description": "True, if the sticker set has been installed by current user @is_archived True, if the sticker set has been archived. A sticker set can't be installed and archived simultaneously",
          "nilable": false
        },
        {
          "name": "is_archived",
          "type": "Bool",
          "nilable": false
        },
        {
          "name": "is_official",
          "type": "Bool",
          "description": "True, if the sticker set is official @is_animated True, is the stickers in the set are animated @is_masks True, if the stickers in the set are masks @is_viewed True for already viewed trending sticker sets",
          "nilable": false
        },
        {
          "name": "is_animated",
          "type": "Bool",
          "nilable": false
        },
        {
          "name": "is_masks",
          "type": "Bool",
          "nilable": false
        },
        {
          "name": "is_viewed",
          "type": "Bool",
          "nilable": false
        },
        {
          "name": "size",
          "type": "int32",
          "description": "Total number of stickers in the set @covers Contains up to the first 5 stickers from the set, depending on the context. If the client needs more stickers the full set should be requested",
          "nilable": false
        },
        {
          "name": "covers",
          "type": "vector<sticker>",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Represents short information about a sticker set",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "stickerSets",
      "properties": [
        {
          "name": "total_count",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "sets",
          "type": "vector<stickerSetInfo>",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Represents a list of sticker sets @total_count Approximate total number of sticker sets found @sets List of sticker sets",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "callProtocol",
      "properties": [
        {
          "name": "udp_p2p",
          "type": "Bool",
          "nilable": false
        },
        {
          "name": "udp_reflector",
          "type": "Bool",
          "nilable": false
        },
        {
          "name": "min_layer",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "max_layer",
          "type": "int32",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Specifies the supported call protocols @udp_p2p True, if UDP peer-to-peer connections are supported @udp_reflector True, if connection through UDP reflectors is supported @min_layer Minimum supported API layer; use 65 @max_layer Maximum supported API layer; use 65",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "callConnection",
      "properties": [
        {
          "name": "id",
          "type": "int64",
          "nilable": false
        },
        {
          "name": "ip",
          "type": "string",
          "nilable": false
        },
        {
          "name": "ipv6",
          "type": "string",
          "nilable": false
        },
        {
          "name": "port",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "peer_tag",
          "type": "bytes",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Describes the address of UDP reflectors @id Reflector identifier @ip IPv4 reflector address @ipv6 IPv6 reflector address @port Reflector port number @peer_tag Connection peer tag",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "callId",
      "properties": [
        {
          "name": "id",
          "type": "int32",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Contains the call identifier @id Call identifier",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "call",
      "properties": [
        {
          "name": "id",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "user_id",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "is_outgoing",
          "type": "Bool",
          "nilable": false
        },
        {
          "name": "state",
          "type": "CallState",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Describes a call @id Call identifier, not persistent @user_id Peer user identifier @is_outgoing True, if the call is outgoing @state Call state",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "phoneNumberAuthenticationSettings",
      "properties": [
        {
          "name": "allow_flash_call",
          "type": "Bool",
          "description": "Pass true if the authentication code may be sent via flash call to the specified phone number",
          "nilable": false
        },
        {
          "name": "is_current_phone_number",
          "type": "Bool",
          "description": "Pass true if the authenticated phone number is used on the current device",
          "nilable": false
        },
        {
          "name": "allow_sms_retriever_api",
          "type": "Bool",
          "description": "For official applications only. True, if the app can use Android SMS Retriever API (requires Google Play Services >= 10.2) to automatically receive the authentication code from the SMS. See https://developers.google.com/identity/sms-retriever/ for more details",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Contains settings for the authentication of the user's phone number",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "animations",
      "properties": [
        {
          "name": "animations",
          "type": "vector<animation>",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Represents a list of animations @animations List of animations",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "importedContacts",
      "properties": [
        {
          "name": "user_ids",
          "type": "vector<int32>",
          "nilable": false
        },
        {
          "name": "importer_count",
          "type": "vector<int32>",
          "description": "The number of users that imported the corresponding contact; 0 for already registered users or if unavailable",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Represents the result of an ImportContacts request @user_ids User identifiers of the imported contacts in the same order as they were specified in the request; 0 if the contact is not yet a registered user",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "httpUrl",
      "properties": [
        {
          "name": "url",
          "type": "string",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Contains an HTTP URL @url The URL",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "inlineQueryResults",
      "properties": [
        {
          "name": "inline_query_id",
          "type": "int64",
          "nilable": false
        },
        {
          "name": "next_offset",
          "type": "string",
          "nilable": false
        },
        {
          "name": "results",
          "type": "vector<InlineQueryResult>",
          "nilable": false
        },
        {
          "name": "switch_pm_text",
          "type": "string",
          "description": "If non-empty, this text should be shown on the button, which opens a private chat with the bot and sends the bot a start message with the switch_pm_parameter @switch_pm_parameter Parameter for the bot start message",
          "nilable": false
        },
        {
          "name": "switch_pm_parameter",
          "type": "string",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Represents the results of the inline query. Use sendInlineQueryResultMessage to send the result of the query @inline_query_id Unique identifier of the inline query @next_offset The offset for the next request. If empty, there are no more results @results Results of the query",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "callbackQueryAnswer",
      "properties": [
        {
          "name": "text",
          "type": "string",
          "nilable": false
        },
        {
          "name": "show_alert",
          "type": "Bool",
          "nilable": false
        },
        {
          "name": "url",
          "type": "string",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Contains a bot's answer to a callback query @text Text of the answer @show_alert True, if an alert should be shown to the user instead of a toast notification @url URL to be opened",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "customRequestResult",
      "properties": [
        {
          "name": "result",
          "type": "string",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Contains the result of a custom request @result A JSON-serialized result",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "gameHighScore",
      "properties": [
        {
          "name": "position",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "user_id",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "score",
          "type": "int32",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Contains one row of the game high score table @position Position in the high score table @user_id User identifier @score User score",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "gameHighScores",
      "properties": [
        {
          "name": "scores",
          "type": "vector<gameHighScore>",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Contains a list of game high scores @scores A list of game high scores",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "tonLiteServerResponse",
      "properties": [
        {
          "name": "response",
          "type": "bytes",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Contains the response of a request to TON lite server @response The response",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "tonWalletPasswordSalt",
      "properties": [
        {
          "name": "salt",
          "type": "bytes",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Contains the salt to be used with locally stored password to access a local TON-based wallet @salt The salt",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "chatEvent",
      "properties": [
        {
          "name": "id",
          "type": "int64",
          "nilable": false
        },
        {
          "name": "date",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "user_id",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "action",
          "type": "ChatEventAction",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Represents a chat event @id Chat event identifier @date Point in time (Unix timestamp) when the event happened @user_id Identifier of the user who performed the action that triggered the event @action Action performed by the user",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "chatEvents",
      "properties": [
        {
          "name": "events",
          "type": "vector<chatEvent>",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Contains a list of chat events @events List of events",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "chatEventLogFilters",
      "properties": [
        {
          "name": "message_edits",
          "type": "Bool",
          "description": "True, if message edits should be returned",
          "nilable": false
        },
        {
          "name": "message_deletions",
          "type": "Bool",
          "description": "True, if message deletions should be returned",
          "nilable": false
        },
        {
          "name": "message_pins",
          "type": "Bool",
          "description": "True, if pin/unpin events should be returned",
          "nilable": false
        },
        {
          "name": "member_joins",
          "type": "Bool",
          "description": "True, if members joining events should be returned",
          "nilable": false
        },
        {
          "name": "member_leaves",
          "type": "Bool",
          "description": "True, if members leaving events should be returned",
          "nilable": false
        },
        {
          "name": "member_invites",
          "type": "Bool",
          "description": "True, if invited member events should be returned",
          "nilable": false
        },
        {
          "name": "member_promotions",
          "type": "Bool",
          "description": "True, if member promotion/demotion events should be returned",
          "nilable": false
        },
        {
          "name": "member_restrictions",
          "type": "Bool",
          "description": "True, if member restricted/unrestricted/banned/unbanned events should be returned",
          "nilable": false
        },
        {
          "name": "info_changes",
          "type": "Bool",
          "description": "True, if changes in chat information should be returned",
          "nilable": false
        },
        {
          "name": "setting_changes",
          "type": "Bool",
          "description": "True, if changes in chat settings should be returned",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Represents a set of filters used to obtain a chat event log",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "languagePackString",
      "properties": [
        {
          "name": "key",
          "type": "string",
          "nilable": false
        },
        {
          "name": "value",
          "type": "LanguagePackStringValue",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Represents one language pack string @key String key @value String value",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "languagePackStrings",
      "properties": [
        {
          "name": "strings",
          "type": "vector<languagePackString>",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Contains a list of language pack strings @strings A list of language pack strings",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "languagePackInfo",
      "properties": [
        {
          "name": "id",
          "type": "string",
          "nilable": false
        },
        {
          "name": "base_language_pack_id",
          "type": "string",
          "description": "Identifier of a base language pack; may be empty. If a string is missed in the language pack, then it should be fetched from base language pack. Unsupported in custom language packs",
          "nilable": true
        },
        {
          "name": "name",
          "type": "string",
          "description": "Language name @native_name Name of the language in that language",
          "nilable": false
        },
        {
          "name": "native_name",
          "type": "string",
          "nilable": false
        },
        {
          "name": "plural_code",
          "type": "string",
          "description": "A language code to be used to apply plural forms. See https://www.unicode.org/cldr/charts/latest/supplemental/language_plural_rules.html for more info",
          "nilable": false
        },
        {
          "name": "is_official",
          "type": "Bool",
          "description": "True, if the language pack is official @is_rtl True, if the language pack strings are RTL @is_beta True, if the language pack is a beta language pack",
          "nilable": false
        },
        {
          "name": "is_rtl",
          "type": "Bool",
          "nilable": false
        },
        {
          "name": "is_beta",
          "type": "Bool",
          "nilable": false
        },
        {
          "name": "is_installed",
          "type": "Bool",
          "description": "True, if the language pack is installed by the current user",
          "nilable": false
        },
        {
          "name": "total_string_count",
          "type": "int32",
          "description": "Total number of non-deleted strings from the language pack @translated_string_count Total number of translated strings from the language pack",
          "nilable": false
        },
        {
          "name": "translated_string_count",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "local_string_count",
          "type": "int32",
          "description": "Total number of non-deleted strings from the language pack available locally @translation_url Link to language translation interface; empty for custom local language packs",
          "nilable": true
        },
        {
          "name": "translation_url",
          "type": "string",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Contains information about a language pack @id Unique language pack identifier",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "localizationTargetInfo",
      "properties": [
        {
          "name": "language_packs",
          "type": "vector<languagePackInfo>",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Contains information about the current localization target @language_packs List of available language packs for this application",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "pushReceiverId",
      "properties": [
        {
          "name": "id",
          "type": "int64",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Contains a globally unique push receiver identifier, which can be used to identify which account has received a push notification @id The globally unique identifier of push notification subscription",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "background",
      "properties": [
        {
          "name": "id",
          "type": "int64",
          "description": "Unique background identifier",
          "nilable": false
        },
        {
          "name": "is_default",
          "type": "Bool",
          "description": "True, if this is one of default backgrounds",
          "nilable": false
        },
        {
          "name": "is_dark",
          "type": "Bool",
          "description": "True, if the background is dark and is recommended to be used with dark theme",
          "nilable": false
        },
        {
          "name": "name",
          "type": "string",
          "description": "Unique background name",
          "nilable": false
        },
        {
          "name": "document",
          "type": "document",
          "description": "Document with the background; may be null. Null only for solid backgrounds",
          "nilable": true
        },
        {
          "name": "type",
          "type": "BackgroundType",
          "description": "Type of the background",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Describes a chat background",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "backgrounds",
      "properties": [
        {
          "name": "backgrounds",
          "type": "vector<background>",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Contains a list of backgrounds @backgrounds A list of backgrounds",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "hashtags",
      "properties": [
        {
          "name": "hashtags",
          "type": "vector<string>",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Contains a list of hashtags @hashtags A list of hashtags",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "notification",
      "properties": [
        {
          "name": "id",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "date",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "is_silent",
          "type": "Bool",
          "description": "True, if the notification was initially silent @type Notification type",
          "nilable": false
        },
        {
          "name": "type",
          "type": "NotificationType",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Contains information about a notification @id Unique persistent identifier of this notification @date Notification date",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "notificationGroup",
      "properties": [
        {
          "name": "id",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "type",
          "type": "NotificationGroupType",
          "nilable": false
        },
        {
          "name": "chat_id",
          "type": "int53",
          "description": "Identifier of a chat to which all notifications in the group belong",
          "nilable": false
        },
        {
          "name": "total_count",
          "type": "int32",
          "description": "Total number of active notifications in the group @notifications The list of active notifications",
          "nilable": false
        },
        {
          "name": "notifications",
          "type": "vector<notification>",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Describes a group of notifications @id Unique persistent auto-incremented from 1 identifier of the notification group @type Type of the group",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "jsonObjectMember",
      "properties": [
        {
          "name": "key",
          "type": "string",
          "nilable": false
        },
        {
          "name": "value",
          "type": "JsonValue",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Represents one member of a JSON object @key Member's key @value Member's value",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "userPrivacySettingRules",
      "properties": [
        {
          "name": "rules",
          "type": "vector<UserPrivacySettingRule>",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "A list of privacy rules. Rules are matched in the specified order. The first matched rule defines the privacy setting for a given user. If no rule matches, the action is not allowed @rules A list of rules",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "accountTtl",
      "properties": [
        {
          "name": "days",
          "type": "int32",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Contains information about the period of inactivity after which the current user's account will automatically be deleted @days Number of days of inactivity before the account will be flagged for deletion; should range from 30-366 days",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "session",
      "properties": [
        {
          "name": "id",
          "type": "int64",
          "description": "Session identifier @is_current True, if this session is the current session",
          "nilable": false
        },
        {
          "name": "is_current",
          "type": "Bool",
          "nilable": false
        },
        {
          "name": "is_password_pending",
          "type": "Bool",
          "description": "True, if a password is needed to complete authorization of the session",
          "nilable": false
        },
        {
          "name": "api_id",
          "type": "int32",
          "description": "Telegram API identifier, as provided by the application @application_name Name of the application, as provided by the application",
          "nilable": false
        },
        {
          "name": "application_name",
          "type": "string",
          "nilable": false
        },
        {
          "name": "application_version",
          "type": "string",
          "description": "The version of the application, as provided by the application @is_official_application True, if the application is an official application or uses the api_id of an official application",
          "nilable": false
        },
        {
          "name": "is_official_application",
          "type": "Bool",
          "nilable": false
        },
        {
          "name": "device_model",
          "type": "string",
          "description": "Model of the device the application has been run or is running on, as provided by the application @platform Operating system the application has been run or is running on, as provided by the application",
          "nilable": false
        },
        {
          "name": "platform",
          "type": "string",
          "nilable": false
        },
        {
          "name": "system_version",
          "type": "string",
          "description": "Version of the operating system the application has been run or is running on, as provided by the application @log_in_date Point in time (Unix timestamp) when the user has logged in",
          "nilable": false
        },
        {
          "name": "log_in_date",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "last_active_date",
          "type": "int32",
          "description": "Point in time (Unix timestamp) when the session was last used @ip IP address from which the session was created, in human-readable format",
          "nilable": false
        },
        {
          "name": "ip",
          "type": "string",
          "nilable": false
        },
        {
          "name": "country",
          "type": "string",
          "description": "A two-letter country code for the country from which the session was created, based on the IP address @region Region code from which the session was created, based on the IP address",
          "nilable": false
        },
        {
          "name": "region",
          "type": "string",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Contains information about one session in a Telegram application used by the current user. Sessions should be shown to the user in the returned order",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "sessions",
      "properties": [
        {
          "name": "sessions",
          "type": "vector<session>",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Contains a list of sessions @sessions List of sessions",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "connectedWebsite",
      "properties": [
        {
          "name": "id",
          "type": "int64",
          "description": "Website identifier",
          "nilable": false
        },
        {
          "name": "domain_name",
          "type": "string",
          "description": "The domain name of the website",
          "nilable": false
        },
        {
          "name": "bot_user_id",
          "type": "int32",
          "description": "User identifier of a bot linked with the website",
          "nilable": false
        },
        {
          "name": "browser",
          "type": "string",
          "description": "The version of a browser used to log in",
          "nilable": false
        },
        {
          "name": "platform",
          "type": "string",
          "description": "Operating system the browser is running on",
          "nilable": false
        },
        {
          "name": "log_in_date",
          "type": "int32",
          "description": "Point in time (Unix timestamp) when the user was logged in",
          "nilable": false
        },
        {
          "name": "last_active_date",
          "type": "int32",
          "description": "Point in time (Unix timestamp) when obtained authorization was last used",
          "nilable": false
        },
        {
          "name": "ip",
          "type": "string",
          "description": "IP address from which the user was logged in, in human-readable format",
          "nilable": false
        },
        {
          "name": "location",
          "type": "string",
          "description": "Human-readable description of a country and a region, from which the user was logged in, based on the IP address",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Contains information about one website the current user is logged in with Telegram",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "connectedWebsites",
      "properties": [
        {
          "name": "websites",
          "type": "vector<connectedWebsite>",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Contains a list of websites the current user is logged in with Telegram @websites List of connected websites",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "chatReportSpamState",
      "properties": [
        {
          "name": "can_report_spam",
          "type": "Bool",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Contains information about the availability of the \"Report spam\" action for a chat @can_report_spam True, if a prompt with the \"Report spam\" action should be shown to the user",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "publicMessageLink",
      "properties": [
        {
          "name": "link",
          "type": "string",
          "nilable": false
        },
        {
          "name": "html",
          "type": "string",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Contains a public HTTPS link to a message in a public supergroup or channel with a username @link Message link @html HTML-code for embedding the message",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "messageLinkInfo",
      "properties": [
        {
          "name": "is_public",
          "type": "Bool",
          "description": "True, if the link is a public link for a message in a chat",
          "nilable": false
        },
        {
          "name": "chat_id",
          "type": "int53",
          "description": "If found, identifier of the chat to which the message belongs, 0 otherwise",
          "nilable": false
        },
        {
          "name": "message",
          "type": "message",
          "description": "If found, the linked message; may be null",
          "nilable": true
        },
        {
          "name": "for_album",
          "type": "Bool",
          "description": "True, if the whole media album to which the message belongs is linked",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Contains information about a link to a message in a chat",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "filePart",
      "properties": [
        {
          "name": "data",
          "type": "bytes",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Contains a part of a file @data File bytes",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "storageStatisticsByFileType",
      "properties": [
        {
          "name": "file_type",
          "type": "FileType",
          "nilable": false
        },
        {
          "name": "size",
          "type": "int53",
          "nilable": false
        },
        {
          "name": "count",
          "type": "int32",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Contains the storage usage statistics for a specific file type @file_type File type @size Total size of the files @count Total number of files",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "storageStatisticsByChat",
      "properties": [
        {
          "name": "chat_id",
          "type": "int53",
          "nilable": false
        },
        {
          "name": "size",
          "type": "int53",
          "nilable": false
        },
        {
          "name": "count",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "by_file_type",
          "type": "vector<storageStatisticsByFileType>",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Contains the storage usage statistics for a specific chat @chat_id Chat identifier; 0 if none @size Total size of the files in the chat @count Total number of files in the chat @by_file_type Statistics split by file types",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "storageStatistics",
      "properties": [
        {
          "name": "size",
          "type": "int53",
          "nilable": false
        },
        {
          "name": "count",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "by_chat",
          "type": "vector<storageStatisticsByChat>",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Contains the exact storage usage statistics split by chats and file type @size Total size of files @count Total number of files @by_chat Statistics split by chats",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "storageStatisticsFast",
      "properties": [
        {
          "name": "files_size",
          "type": "int53",
          "nilable": false
        },
        {
          "name": "file_count",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "database_size",
          "type": "int53",
          "description": "Size of the database @language_pack_database_size Size of the language pack database @log_size Size of the TDLib internal log",
          "nilable": false
        },
        {
          "name": "language_pack_database_size",
          "type": "int53",
          "nilable": false
        },
        {
          "name": "log_size",
          "type": "int53",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Contains approximate storage usage statistics, excluding files of unknown file type @files_size Approximate total size of files @file_count Approximate number of files",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "databaseStatistics",
      "properties": [
        {
          "name": "statistics",
          "type": "string",
          "description": "Database statistics in an unspecified human-readable format",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Contains database statistics",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "networkStatistics",
      "properties": [
        {
          "name": "since_date",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "entries",
          "type": "vector<NetworkStatisticsEntry>",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "A full list of available network statistic entries @since_date Point in time (Unix timestamp) when the app began collecting statistics @entries Network statistics entries",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "autoDownloadSettings",
      "properties": [
        {
          "name": "is_auto_download_enabled",
          "type": "Bool",
          "description": "True, if the auto-download is enabled",
          "nilable": false
        },
        {
          "name": "max_photo_file_size",
          "type": "int32",
          "description": "Maximum size of a photo file to be auto-downloaded",
          "nilable": false
        },
        {
          "name": "max_video_file_size",
          "type": "int32",
          "description": "Maximum size of a video file to be auto-downloaded",
          "nilable": false
        },
        {
          "name": "max_other_file_size",
          "type": "int32",
          "description": "Maximum size of other file types to be auto-downloaded",
          "nilable": false
        },
        {
          "name": "preload_large_videos",
          "type": "Bool",
          "description": "True, if the beginning of videos needs to be preloaded for instant playback",
          "nilable": false
        },
        {
          "name": "preload_next_audio",
          "type": "Bool",
          "description": "True, if the next audio track needs to be preloaded while the user is listening to an audio file",
          "nilable": false
        },
        {
          "name": "use_less_data_for_calls",
          "type": "Bool",
          "description": "True, if \"use less data for calls\" option needs to be enabled",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Contains auto-download settings",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "autoDownloadSettingsPresets",
      "properties": [
        {
          "name": "low",
          "type": "autoDownloadSettings",
          "description": "Preset with lowest settings; supposed to be used by default when roaming",
          "nilable": false
        },
        {
          "name": "medium",
          "type": "autoDownloadSettings",
          "description": "Preset with medium settings; supposed to be used by default when using mobile data",
          "nilable": false
        },
        {
          "name": "high",
          "type": "autoDownloadSettings",
          "description": "Preset with highest settings; supposed to be used by default when connected on Wi-Fi",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Contains auto-download settings presets for the user",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "tMeUrl",
      "properties": [
        {
          "name": "url",
          "type": "string",
          "nilable": false
        },
        {
          "name": "type",
          "type": "TMeUrlType",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Represents a URL linking to an internal Telegram entity @url URL @type Type of the URL",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "tMeUrls",
      "properties": [
        {
          "name": "urls",
          "type": "vector<tMeUrl>",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Contains a list of t.me URLs @urls List of URLs",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "count",
      "properties": [
        {
          "name": "count",
          "type": "int32",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Contains a counter @count Count",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "text",
      "properties": [
        {
          "name": "text",
          "type": "string",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Contains some text @text Text",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "seconds",
      "properties": [
        {
          "name": "seconds",
          "type": "double",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Contains a value representing a number of seconds @seconds Number of seconds",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "deepLinkInfo",
      "properties": [
        {
          "name": "text",
          "type": "formattedText",
          "nilable": false
        },
        {
          "name": "need_update_application",
          "type": "Bool",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Contains information about a tg:// deep link @text Text to be shown to the user @need_update_application True, if user should be asked to update the application",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "proxy",
      "properties": [
        {
          "name": "id",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "server",
          "type": "string",
          "nilable": false
        },
        {
          "name": "port",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "last_used_date",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "is_enabled",
          "type": "Bool",
          "nilable": false
        },
        {
          "name": "type",
          "type": "ProxyType",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Contains information about a proxy server @id Unique identifier of the proxy @server Proxy server IP address @port Proxy server port @last_used_date Point in time (Unix timestamp) when the proxy was last used; 0 if never @is_enabled True, if the proxy is enabled now @type Type of the proxy",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "proxies",
      "properties": [
        {
          "name": "proxies",
          "type": "vector<proxy>",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Represents a list of proxy servers @proxies List of proxy servers",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "inputSticker",
      "properties": [
        {
          "name": "png_sticker",
          "type": "InputFile",
          "nilable": false
        },
        {
          "name": "emojis",
          "type": "string",
          "nilable": false
        },
        {
          "name": "mask_position",
          "type": "maskPosition",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Describes a sticker that should be added to a sticker set @png_sticker PNG image with the sticker; must be up to 512 kB in size and fit in a 512x512 square @emojis Emoji corresponding to the sticker @mask_position For masks, position where the mask should be placed; may be null",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "updates",
      "properties": [
        {
          "name": "updates",
          "type": "vector<Update>",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Contains a list of updates @updates List of updates",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "logVerbosityLevel",
      "properties": [
        {
          "name": "verbosity_level",
          "type": "int32",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Contains a TDLib internal log verbosity level @verbosity_level Log verbosity level",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "logTags",
      "properties": [
        {
          "name": "tags",
          "type": "vector<string>",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "Contains a list of available TDLib internal log tags @tags List of log tags",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "testInt",
      "properties": [
        {
          "name": "value",
          "type": "int32",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "A simple object containing a number; for testing only @value Number",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "testString",
      "properties": [
        {
          "name": "value",
          "type": "string",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "A simple object containing a string; for testing only @value String",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "testBytes",
      "properties": [
        {
          "name": "value",
          "type": "bytes",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "A simple object containing a sequence of bytes; for testing only @value Bytes",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "testVectorInt",
      "properties": [
        {
          "name": "value",
          "type": "vector<int32>",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "A simple object containing a vector of numbers; for testing only @value Vector of numbers",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "testVectorIntObject",
      "properties": [
        {
          "name": "value",
          "type": "vector<testInt>",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "A simple object containing a vector of objects that hold a number; for testing only @value Vector of objects",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "testVectorString",
      "properties": [
        {
          "name": "value",
          "type": "vector<string>",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "A simple object containing a vector of strings; for testing only @value Vector of strings",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "testVectorStringObject",
      "properties": [
        {
          "name": "value",
          "type": "vector<testString>",
          "nilable": false
        }
      ],
      "type": "Base",
      "description": "A simple object containing a vector of objects that hold a string; for testing only @value Vector of objects",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "authenticationCodeTypeTelegramMessage",
      "properties": [
        {
          "name": "length",
          "type": "int32",
          "nilable": false
        }
      ],
      "type": "AuthenticationCodeType",
      "description": "An authentication code is delivered via a private Telegram message, which can be viewed in another client @length Length of the code",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "authenticationCodeTypeSms",
      "properties": [
        {
          "name": "length",
          "type": "int32",
          "nilable": false
        }
      ],
      "type": "AuthenticationCodeType",
      "description": "An authentication code is delivered via an SMS message to the specified phone number @length Length of the code",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "authenticationCodeTypeCall",
      "properties": [
        {
          "name": "length",
          "type": "int32",
          "nilable": false
        }
      ],
      "type": "AuthenticationCodeType",
      "description": "An authentication code is delivered via a phone call to the specified phone number @length Length of the code",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "authenticationCodeTypeFlashCall",
      "properties": [
        {
          "name": "pattern",
          "type": "string",
          "nilable": false
        }
      ],
      "type": "AuthenticationCodeType",
      "description": "An authentication code is delivered by an immediately cancelled call to the specified phone number. The number from which the call was made is the code @pattern Pattern of the phone number from which the call will be made",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "authorizationStateWaitTdlibParameters",
      "properties": [],
      "type": "AuthorizationState",
      "description": "TDLib needs TdlibParameters for initialization",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "authorizationStateWaitEncryptionKey",
      "properties": [
        {
          "name": "is_encrypted",
          "type": "Bool",
          "nilable": false
        }
      ],
      "type": "AuthorizationState",
      "description": "TDLib needs an encryption key to decrypt the local database @is_encrypted True, if the database is currently encrypted",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "authorizationStateWaitPhoneNumber",
      "properties": [],
      "type": "AuthorizationState",
      "description": "TDLib needs the user's phone number to authorize",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "authorizationStateWaitCode",
      "properties": [
        {
          "name": "code_info",
          "type": "authenticationCodeInfo",
          "nilable": false
        }
      ],
      "type": "AuthorizationState",
      "description": "TDLib needs the user's authentication code to authorize @code_info Information about the authorization code that was sent",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "authorizationStateWaitRegistration",
      "properties": [
        {
          "name": "terms_of_service",
          "type": "termsOfService",
          "nilable": false
        }
      ],
      "type": "AuthorizationState",
      "description": "The user is unregistered and need to accept terms of service and enter their first name and last name to finish registration @terms_of_service Telegram terms of service",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "authorizationStateWaitPassword",
      "properties": [
        {
          "name": "password_hint",
          "type": "string",
          "nilable": false
        },
        {
          "name": "has_recovery_email_address",
          "type": "Bool",
          "nilable": false
        },
        {
          "name": "recovery_email_address_pattern",
          "type": "string",
          "description": "Pattern of the email address to which the recovery email was sent; empty until a recovery email has been sent",
          "nilable": true
        }
      ],
      "type": "AuthorizationState",
      "description": "The user has been authorized, but needs to enter a password to start using the application @password_hint Hint for the password; may be empty @has_recovery_email_address True, if a recovery email address has been set up",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "authorizationStateReady",
      "properties": [],
      "type": "AuthorizationState",
      "description": "The user has been successfully authorized. TDLib is now ready to answer queries",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "authorizationStateLoggingOut",
      "properties": [],
      "type": "AuthorizationState",
      "description": "The user is currently logging out",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "authorizationStateClosing",
      "properties": [],
      "type": "AuthorizationState",
      "description": "TDLib is closing, all subsequent queries will be answered with the error 500. Note that closing TDLib can take a while. All resources will be freed only after authorizationStateClosed has been received",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "authorizationStateClosed",
      "properties": [],
      "type": "AuthorizationState",
      "description": "TDLib client is in its final state. All databases are closed and all resources are released. No other updates will be received after this. All queries will be responded to",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "inputFileId",
      "properties": [
        {
          "name": "id",
          "type": "int32",
          "nilable": false
        }
      ],
      "type": "InputFile",
      "description": "A file defined by its unique ID @id Unique file identifier",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "inputFileRemote",
      "properties": [
        {
          "name": "id",
          "type": "string",
          "description": "Remote file identifier",
          "nilable": false
        }
      ],
      "type": "InputFile",
      "description": "A file defined by its remote ID. The remote ID is guaranteed to work only if it was received after TDLib launch and the corresponding file is still accessible to the user.",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "inputFileLocal",
      "properties": [
        {
          "name": "path",
          "type": "string",
          "nilable": false
        }
      ],
      "type": "InputFile",
      "description": "A file defined by a local path @path Local path to the file",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "inputFileGenerated",
      "properties": [
        {
          "name": "original_path",
          "type": "string",
          "nilable": false
        },
        {
          "name": "conversion",
          "type": "string",
          "description": "String specifying the conversion applied to the original file; should be persistent across application restarts. Conversions beginning with '#' are reserved for internal TDLib usage",
          "nilable": false
        },
        {
          "name": "expected_size",
          "type": "int32",
          "description": "Expected size of the generated file; 0 if unknown",
          "nilable": false
        }
      ],
      "type": "InputFile",
      "description": "A file generated by the client @original_path Local path to a file from which the file is generated; may be empty if there is no such file",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "maskPointForehead",
      "properties": [],
      "type": "MaskPoint",
      "description": "A mask should be placed relatively to the forehead",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "maskPointEyes",
      "properties": [],
      "type": "MaskPoint",
      "description": "A mask should be placed relatively to the eyes",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "maskPointMouth",
      "properties": [],
      "type": "MaskPoint",
      "description": "A mask should be placed relatively to the mouth",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "maskPointChin",
      "properties": [],
      "type": "MaskPoint",
      "description": "A mask should be placed relatively to the chin",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "linkStateNone",
      "properties": [],
      "type": "LinkState",
      "description": "The phone number of user A is not known to user B",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "linkStateKnowsPhoneNumber",
      "properties": [],
      "type": "LinkState",
      "description": "The phone number of user A is known but that number has not been saved to the contact list of user B",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "linkStateIsContact",
      "properties": [],
      "type": "LinkState",
      "description": "The phone number of user A has been saved to the contact list of user B",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "userTypeRegular",
      "properties": [],
      "type": "UserType",
      "description": "A regular user",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "userTypeDeleted",
      "properties": [],
      "type": "UserType",
      "description": "A deleted user or deleted bot. No information on the user besides the user_id is available. It is not possible to perform any active actions on this type of user",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "userTypeBot",
      "properties": [
        {
          "name": "can_join_groups",
          "type": "Bool",
          "nilable": false
        },
        {
          "name": "can_read_all_group_messages",
          "type": "Bool",
          "description": "True, if the bot can read all messages in basic group or supergroup chats and not just those addressed to the bot. In private and channel chats a bot can always read all messages",
          "nilable": false
        },
        {
          "name": "is_inline",
          "type": "Bool",
          "description": "True, if the bot supports inline queries @inline_query_placeholder Placeholder for inline queries (displayed on the client input field) @need_location True, if the location of the user should be sent with every inline query to this bot",
          "nilable": false
        },
        {
          "name": "inline_query_placeholder",
          "type": "string",
          "nilable": false
        },
        {
          "name": "need_location",
          "type": "Bool",
          "nilable": false
        }
      ],
      "type": "UserType",
      "description": "A bot (see https://core.telegram.org/bots) @can_join_groups True, if the bot can be invited to basic group and supergroup chats",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "userTypeUnknown",
      "properties": [],
      "type": "UserType",
      "description": "No information on the user besides the user_id is available, yet this user has not been deleted. This object is extremely rare and must be handled like a deleted user. It is not possible to perform any actions on users of this type",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "chatMemberStatusCreator",
      "properties": [
        {
          "name": "is_member",
          "type": "Bool",
          "nilable": false
        }
      ],
      "type": "ChatMemberStatus",
      "description": "The user is the creator of a chat and has all the administrator privileges @is_member True, if the user is a member of the chat",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "chatMemberStatusAdministrator",
      "properties": [
        {
          "name": "can_be_edited",
          "type": "Bool",
          "description": "True, if the current user can edit the administrator privileges for the called user",
          "nilable": false
        },
        {
          "name": "can_change_info",
          "type": "Bool",
          "description": "True, if the administrator can change the chat title, photo, and other settings",
          "nilable": false
        },
        {
          "name": "can_post_messages",
          "type": "Bool",
          "description": "True, if the administrator can create channel posts; applicable to channels only",
          "nilable": false
        },
        {
          "name": "can_edit_messages",
          "type": "Bool",
          "description": "True, if the administrator can edit messages of other users and pin messages; applicable to channels only",
          "nilable": false
        },
        {
          "name": "can_delete_messages",
          "type": "Bool",
          "description": "True, if the administrator can delete messages of other users",
          "nilable": false
        },
        {
          "name": "can_invite_users",
          "type": "Bool",
          "description": "True, if the administrator can invite new users to the chat",
          "nilable": false
        },
        {
          "name": "can_restrict_members",
          "type": "Bool",
          "description": "True, if the administrator can restrict, ban, or unban chat members",
          "nilable": false
        },
        {
          "name": "can_pin_messages",
          "type": "Bool",
          "description": "True, if the administrator can pin messages; applicable to groups only",
          "nilable": false
        },
        {
          "name": "can_promote_members",
          "type": "Bool",
          "description": "True, if the administrator can add new administrators with a subset of their own privileges or demote administrators that were directly or indirectly promoted by him",
          "nilable": false
        }
      ],
      "type": "ChatMemberStatus",
      "description": "The user is a member of a chat and has some additional privileges. In basic groups, administrators can edit and delete messages sent by others, add new members, and ban unprivileged members. In supergroups and channels, there are more detailed options for administrator privileges",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "chatMemberStatusMember",
      "properties": [],
      "type": "ChatMemberStatus",
      "description": "The user is a member of a chat, without any additional privileges or restrictions",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "chatMemberStatusRestricted",
      "properties": [
        {
          "name": "is_member",
          "type": "Bool",
          "description": "True, if the user is a member of the chat",
          "nilable": false
        },
        {
          "name": "restricted_until_date",
          "type": "int32",
          "description": "Point in time (Unix timestamp) when restrictions will be lifted from the user; 0 if never. If the user is restricted for more than 366 days or for less than 30 seconds from the current time, the user is considered to be restricted forever",
          "nilable": false
        },
        {
          "name": "permissions",
          "type": "chatPermissions",
          "description": "User permissions in the chat",
          "nilable": false
        }
      ],
      "type": "ChatMemberStatus",
      "description": "The user is under certain restrictions in the chat. Not supported in basic groups and channels",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "chatMemberStatusLeft",
      "properties": [],
      "type": "ChatMemberStatus",
      "description": "The user is not a chat member",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "chatMemberStatusBanned",
      "properties": [
        {
          "name": "banned_until_date",
          "type": "int32",
          "description": "Point in time (Unix timestamp) when the user will be unbanned; 0 if never. If the user is banned for more than 366 days or for less than 30 seconds from the current time, the user is considered to be banned forever",
          "nilable": false
        }
      ],
      "type": "ChatMemberStatus",
      "description": "The user was banned (and hence is not a member of the chat). Implies the user can't return to the chat or view messages",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "chatMembersFilterContacts",
      "properties": [],
      "type": "ChatMembersFilter",
      "description": "Returns contacts of the user",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "chatMembersFilterAdministrators",
      "properties": [],
      "type": "ChatMembersFilter",
      "description": "Returns the creator and administrators",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "chatMembersFilterMembers",
      "properties": [],
      "type": "ChatMembersFilter",
      "description": "Returns all chat members, including restricted chat members",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "chatMembersFilterRestricted",
      "properties": [],
      "type": "ChatMembersFilter",
      "description": "Returns users under certain restrictions in the chat; can be used only by administrators in a supergroup",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "chatMembersFilterBanned",
      "properties": [],
      "type": "ChatMembersFilter",
      "description": "Returns users banned from the chat; can be used only by administrators in a supergroup or in a channel",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "chatMembersFilterBots",
      "properties": [],
      "type": "ChatMembersFilter",
      "description": "Returns bot members of the chat",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "supergroupMembersFilterRecent",
      "properties": [],
      "type": "SupergroupMembersFilter",
      "description": "Returns recently active users in reverse chronological order",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "supergroupMembersFilterContacts",
      "properties": [
        {
          "name": "query",
          "type": "string",
          "nilable": false
        }
      ],
      "type": "SupergroupMembersFilter",
      "description": "Returns contacts of the user, which are members of the supergroup or channel @query Query to search for",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "supergroupMembersFilterAdministrators",
      "properties": [],
      "type": "SupergroupMembersFilter",
      "description": "Returns the creator and administrators",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "supergroupMembersFilterSearch",
      "properties": [
        {
          "name": "query",
          "type": "string",
          "nilable": false
        }
      ],
      "type": "SupergroupMembersFilter",
      "description": "Used to search for supergroup or channel members via a (string) query @query Query to search for",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "supergroupMembersFilterRestricted",
      "properties": [
        {
          "name": "query",
          "type": "string",
          "nilable": false
        }
      ],
      "type": "SupergroupMembersFilter",
      "description": "Returns restricted supergroup members; can be used only by administrators @query Query to search for",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "supergroupMembersFilterBanned",
      "properties": [
        {
          "name": "query",
          "type": "string",
          "nilable": false
        }
      ],
      "type": "SupergroupMembersFilter",
      "description": "Returns users banned from the supergroup or channel; can be used only by administrators @query Query to search for",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "supergroupMembersFilterBots",
      "properties": [],
      "type": "SupergroupMembersFilter",
      "description": "Returns bot members of the supergroup or channel",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "secretChatStatePending",
      "properties": [],
      "type": "SecretChatState",
      "description": "The secret chat is not yet created; waiting for the other user to get online",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "secretChatStateReady",
      "properties": [],
      "type": "SecretChatState",
      "description": "The secret chat is ready to use",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "secretChatStateClosed",
      "properties": [],
      "type": "SecretChatState",
      "description": "The secret chat is closed",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "messageForwardOriginUser",
      "properties": [
        {
          "name": "sender_user_id",
          "type": "int32",
          "nilable": false
        }
      ],
      "type": "MessageForwardOrigin",
      "description": "The message was originally written by a known user @sender_user_id Identifier of the user that originally sent the message",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "messageForwardOriginHiddenUser",
      "properties": [
        {
          "name": "sender_name",
          "type": "string",
          "nilable": false
        }
      ],
      "type": "MessageForwardOrigin",
      "description": "The message was originally written by a user, which is hidden by their privacy settings @sender_name Name of the sender",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "messageForwardOriginChannel",
      "properties": [
        {
          "name": "chat_id",
          "type": "int53",
          "description": "Identifier of the chat from which the message was originally forwarded",
          "nilable": false
        },
        {
          "name": "message_id",
          "type": "int53",
          "description": "Message identifier of the original message; 0 if unknown",
          "nilable": false
        },
        {
          "name": "author_signature",
          "type": "string",
          "description": "Original post author signature",
          "nilable": false
        }
      ],
      "type": "MessageForwardOrigin",
      "description": "The message was originally a post in a channel",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "messageSendingStatePending",
      "properties": [],
      "type": "MessageSendingState",
      "description": "The message is being sent now, but has not yet been delivered to the server",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "messageSendingStateFailed",
      "properties": [
        {
          "name": "error_code",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "error_message",
          "type": "string",
          "nilable": false
        },
        {
          "name": "can_retry",
          "type": "Bool",
          "description": "True, if the message can be re-sent @retry_after Time left before the message can be re-sent, in seconds. No update is sent when this field changes",
          "nilable": false
        },
        {
          "name": "retry_after",
          "type": "double",
          "nilable": false
        }
      ],
      "type": "MessageSendingState",
      "description": "The message failed to be sent @error_code An error code; 0 if unknown @error_message Error message",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "notificationSettingsScopePrivateChats",
      "properties": [],
      "type": "NotificationSettingsScope",
      "description": "Notification settings applied to all private and secret chats when the corresponding chat setting has a default value",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "notificationSettingsScopeGroupChats",
      "properties": [],
      "type": "NotificationSettingsScope",
      "description": "Notification settings applied to all basic groups and supergroups when the corresponding chat setting has a default value",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "notificationSettingsScopeChannelChats",
      "properties": [],
      "type": "NotificationSettingsScope",
      "description": "Notification settings applied to all channels when the corresponding chat setting has a default value",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "chatTypePrivate",
      "properties": [
        {
          "name": "user_id",
          "type": "int32",
          "nilable": false
        }
      ],
      "type": "ChatType",
      "description": "An ordinary chat with a user @user_id User identifier",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "chatTypeBasicGroup",
      "properties": [
        {
          "name": "basic_group_id",
          "type": "int32",
          "nilable": false
        }
      ],
      "type": "ChatType",
      "description": "A basic group (i.e., a chat with 0-200 other users) @basic_group_id Basic group identifier",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "chatTypeSupergroup",
      "properties": [
        {
          "name": "supergroup_id",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "is_channel",
          "type": "Bool",
          "nilable": false
        }
      ],
      "type": "ChatType",
      "description": "A supergroup (i.e. a chat with up to GetOption(\"supergroup_max_size\") other users), or channel (with unlimited members) @supergroup_id Supergroup or channel identifier @is_channel True, if the supergroup is a channel",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "chatTypeSecret",
      "properties": [
        {
          "name": "secret_chat_id",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "user_id",
          "type": "int32",
          "nilable": false
        }
      ],
      "type": "ChatType",
      "description": "A secret chat with a user @secret_chat_id Secret chat identifier @user_id User identifier of the secret chat peer",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "keyboardButtonTypeText",
      "properties": [],
      "type": "KeyboardButtonType",
      "description": "A simple button, with text that should be sent when the button is pressed",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "keyboardButtonTypeRequestPhoneNumber",
      "properties": [],
      "type": "KeyboardButtonType",
      "description": "A button that sends the user's phone number when pressed; available only in private chats",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "keyboardButtonTypeRequestLocation",
      "properties": [],
      "type": "KeyboardButtonType",
      "description": "A button that sends the user's location when pressed; available only in private chats",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "inlineKeyboardButtonTypeUrl",
      "properties": [
        {
          "name": "url",
          "type": "string",
          "nilable": false
        }
      ],
      "type": "InlineKeyboardButtonType",
      "description": "A button that opens a specified URL @url HTTP or tg:// URL to open",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "inlineKeyboardButtonTypeLoginUrl",
      "properties": [
        {
          "name": "url",
          "type": "string",
          "nilable": false
        },
        {
          "name": "id",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "forward_text",
          "type": "string",
          "nilable": false
        }
      ],
      "type": "InlineKeyboardButtonType",
      "description": "A button that opens a specified URL and automatically logs in in current user if they allowed to do that @url HTTP URL to open @id Unique button identifier @forward_text If non-empty, new text of the button in forwarded messages",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "inlineKeyboardButtonTypeCallback",
      "properties": [
        {
          "name": "data",
          "type": "bytes",
          "nilable": false
        }
      ],
      "type": "InlineKeyboardButtonType",
      "description": "A button that sends a special callback query to a bot @data Data to be sent to the bot via a callback query",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "inlineKeyboardButtonTypeCallbackGame",
      "properties": [],
      "type": "InlineKeyboardButtonType",
      "description": "A button with a game that sends a special callback query to a bot. This button must be in the first column and row of the keyboard and can be attached only to a message with content of the type messageGame",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "inlineKeyboardButtonTypeSwitchInline",
      "properties": [
        {
          "name": "query",
          "type": "string",
          "nilable": false
        },
        {
          "name": "in_current_chat",
          "type": "Bool",
          "nilable": false
        }
      ],
      "type": "InlineKeyboardButtonType",
      "description": "A button that forces an inline query to the bot to be inserted in the input field @query Inline query to be sent to the bot @in_current_chat True, if the inline query should be sent from the current chat",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "inlineKeyboardButtonTypeBuy",
      "properties": [],
      "type": "InlineKeyboardButtonType",
      "description": "A button to buy something. This button must be in the first column and row of the keyboard and can be attached only to a message with content of the type messageInvoice",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "replyMarkupRemoveKeyboard",
      "properties": [
        {
          "name": "is_personal",
          "type": "Bool",
          "description": "True, if the keyboard is removed only for the mentioned users or the target user of a reply",
          "nilable": false
        }
      ],
      "type": "ReplyMarkup",
      "description": "Instructs clients to remove the keyboard once this message has been received. This kind of keyboard can't be received in an incoming message; instead, UpdateChatReplyMarkup with message_id == 0 will be sent",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "replyMarkupForceReply",
      "properties": [
        {
          "name": "is_personal",
          "type": "Bool",
          "description": "True, if a forced reply must automatically be shown to the current user. For outgoing messages, specify true to show the forced reply only for the mentioned users and for the target user of a reply",
          "nilable": false
        }
      ],
      "type": "ReplyMarkup",
      "description": "Instructs clients to force a reply to this message",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "replyMarkupShowKeyboard",
      "properties": [
        {
          "name": "rows",
          "type": "vector<vector<keyboardButton>>",
          "description": "A list of rows of bot keyboard buttons",
          "nilable": false
        },
        {
          "name": "resize_keyboard",
          "type": "Bool",
          "description": "True, if the client needs to resize the keyboard vertically",
          "nilable": false
        },
        {
          "name": "one_time",
          "type": "Bool",
          "description": "True, if the client needs to hide the keyboard after use",
          "nilable": false
        },
        {
          "name": "is_personal",
          "type": "Bool",
          "description": "True, if the keyboard must automatically be shown to the current user. For outgoing messages, specify true to show the keyboard only for the mentioned users and for the target user of a reply",
          "nilable": false
        }
      ],
      "type": "ReplyMarkup",
      "description": "Contains a custom keyboard layout to quickly reply to bots",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "replyMarkupInlineKeyboard",
      "properties": [
        {
          "name": "rows",
          "type": "vector<vector<inlineKeyboardButton>>",
          "description": "A list of rows of inline keyboard buttons",
          "nilable": false
        }
      ],
      "type": "ReplyMarkup",
      "description": "Contains an inline keyboard layout",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "richTextPlain",
      "properties": [
        {
          "name": "text",
          "type": "string",
          "nilable": false
        }
      ],
      "type": "RichText",
      "description": "A plain text @text Text",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "richTextBold",
      "properties": [
        {
          "name": "text",
          "type": "RichText",
          "nilable": false
        }
      ],
      "type": "RichText",
      "description": "A bold rich text @text Text",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "richTextItalic",
      "properties": [
        {
          "name": "text",
          "type": "RichText",
          "nilable": false
        }
      ],
      "type": "RichText",
      "description": "An italicized rich text @text Text",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "richTextUnderline",
      "properties": [
        {
          "name": "text",
          "type": "RichText",
          "nilable": false
        }
      ],
      "type": "RichText",
      "description": "An underlined rich text @text Text",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "richTextStrikethrough",
      "properties": [
        {
          "name": "text",
          "type": "RichText",
          "nilable": false
        }
      ],
      "type": "RichText",
      "description": "A strike-through rich text @text Text",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "richTextFixed",
      "properties": [
        {
          "name": "text",
          "type": "RichText",
          "nilable": false
        }
      ],
      "type": "RichText",
      "description": "A fixed-width rich text @text Text",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "richTextUrl",
      "properties": [
        {
          "name": "text",
          "type": "RichText",
          "nilable": false
        },
        {
          "name": "url",
          "type": "string",
          "nilable": false
        },
        {
          "name": "is_cached",
          "type": "Bool",
          "nilable": false
        }
      ],
      "type": "RichText",
      "description": "A rich text URL link @text Text @url URL @is_cached True, if the URL has cached instant view server-side",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "richTextEmailAddress",
      "properties": [
        {
          "name": "text",
          "type": "RichText",
          "nilable": false
        },
        {
          "name": "email_address",
          "type": "string",
          "nilable": false
        }
      ],
      "type": "RichText",
      "description": "A rich text email link @text Text @email_address Email address",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "richTextSubscript",
      "properties": [
        {
          "name": "text",
          "type": "RichText",
          "nilable": false
        }
      ],
      "type": "RichText",
      "description": "A subscript rich text @text Text",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "richTextSuperscript",
      "properties": [
        {
          "name": "text",
          "type": "RichText",
          "nilable": false
        }
      ],
      "type": "RichText",
      "description": "A superscript rich text @text Text",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "richTextMarked",
      "properties": [
        {
          "name": "text",
          "type": "RichText",
          "nilable": false
        }
      ],
      "type": "RichText",
      "description": "A marked rich text @text Text",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "richTextPhoneNumber",
      "properties": [
        {
          "name": "text",
          "type": "RichText",
          "nilable": false
        },
        {
          "name": "phone_number",
          "type": "string",
          "nilable": false
        }
      ],
      "type": "RichText",
      "description": "A rich text phone number @text Text @phone_number Phone number",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "richTextIcon",
      "properties": [
        {
          "name": "document",
          "type": "document",
          "nilable": false
        },
        {
          "name": "width",
          "type": "int32",
          "description": "Width of a bounding box in which the image should be shown; 0 if unknown",
          "nilable": false
        },
        {
          "name": "height",
          "type": "int32",
          "description": "Height of a bounding box in which the image should be shown; 0 if unknown",
          "nilable": false
        }
      ],
      "type": "RichText",
      "description": "A small image inside the text @document The image represented as a document. The image can be in GIF, JPEG or PNG format",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "richTextAnchor",
      "properties": [
        {
          "name": "text",
          "type": "RichText",
          "nilable": false
        },
        {
          "name": "name",
          "type": "string",
          "nilable": false
        }
      ],
      "type": "RichText",
      "description": "A rich text anchor @text Text @name Anchor name",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "richTexts",
      "properties": [
        {
          "name": "texts",
          "type": "vector<RichText>",
          "nilable": false
        }
      ],
      "type": "RichText",
      "description": "A concatenation of rich texts @texts Texts",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "pageBlockHorizontalAlignmentLeft",
      "properties": [],
      "type": "PageBlockHorizontalAlignment",
      "description": "The content should be left-aligned",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "pageBlockHorizontalAlignmentCenter",
      "properties": [],
      "type": "PageBlockHorizontalAlignment",
      "description": "The content should be center-aligned",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "pageBlockHorizontalAlignmentRight",
      "properties": [],
      "type": "PageBlockHorizontalAlignment",
      "description": "The content should be right-aligned",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "pageBlockVerticalAlignmentTop",
      "properties": [],
      "type": "PageBlockVerticalAlignment",
      "description": "The content should be top-aligned",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "pageBlockVerticalAlignmentMiddle",
      "properties": [],
      "type": "PageBlockVerticalAlignment",
      "description": "The content should be middle-aligned",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "pageBlockVerticalAlignmentBottom",
      "properties": [],
      "type": "PageBlockVerticalAlignment",
      "description": "The content should be bottom-aligned",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "pageBlockTitle",
      "properties": [
        {
          "name": "title",
          "type": "RichText",
          "nilable": false
        }
      ],
      "type": "PageBlock",
      "description": "The title of a page @title Title",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "pageBlockSubtitle",
      "properties": [
        {
          "name": "subtitle",
          "type": "RichText",
          "nilable": false
        }
      ],
      "type": "PageBlock",
      "description": "The subtitle of a page @subtitle Subtitle",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "pageBlockAuthorDate",
      "properties": [
        {
          "name": "author",
          "type": "RichText",
          "nilable": false
        },
        {
          "name": "publish_date",
          "type": "int32",
          "nilable": false
        }
      ],
      "type": "PageBlock",
      "description": "The author and publishing date of a page @author Author @publish_date Point in time (Unix timestamp) when the article was published; 0 if unknown",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "pageBlockHeader",
      "properties": [
        {
          "name": "header",
          "type": "RichText",
          "nilable": false
        }
      ],
      "type": "PageBlock",
      "description": "A header @header Header",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "pageBlockSubheader",
      "properties": [
        {
          "name": "subheader",
          "type": "RichText",
          "nilable": false
        }
      ],
      "type": "PageBlock",
      "description": "A subheader @subheader Subheader",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "pageBlockKicker",
      "properties": [
        {
          "name": "kicker",
          "type": "RichText",
          "nilable": false
        }
      ],
      "type": "PageBlock",
      "description": "A kicker @kicker Kicker",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "pageBlockParagraph",
      "properties": [
        {
          "name": "text",
          "type": "RichText",
          "nilable": false
        }
      ],
      "type": "PageBlock",
      "description": "A text paragraph @text Paragraph text",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "pageBlockPreformatted",
      "properties": [
        {
          "name": "text",
          "type": "RichText",
          "nilable": false
        },
        {
          "name": "language",
          "type": "string",
          "nilable": false
        }
      ],
      "type": "PageBlock",
      "description": "A preformatted text paragraph @text Paragraph text @language Programming language for which the text should be formatted",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "pageBlockFooter",
      "properties": [
        {
          "name": "footer",
          "type": "RichText",
          "nilable": false
        }
      ],
      "type": "PageBlock",
      "description": "The footer of a page @footer Footer",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "pageBlockDivider",
      "properties": [],
      "type": "PageBlock",
      "description": "An empty block separating a page",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "pageBlockAnchor",
      "properties": [
        {
          "name": "name",
          "type": "string",
          "nilable": false
        }
      ],
      "type": "PageBlock",
      "description": "An invisible anchor on a page, which can be used in a URL to open the page from the specified anchor @name Name of the anchor",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "pageBlockList",
      "properties": [
        {
          "name": "items",
          "type": "vector<pageBlockListItem>",
          "nilable": false
        }
      ],
      "type": "PageBlock",
      "description": "A list of data blocks @items The items of the list",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "pageBlockBlockQuote",
      "properties": [
        {
          "name": "text",
          "type": "RichText",
          "nilable": false
        },
        {
          "name": "credit",
          "type": "RichText",
          "nilable": false
        }
      ],
      "type": "PageBlock",
      "description": "A block quote @text Quote text @credit Quote credit",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "pageBlockPullQuote",
      "properties": [
        {
          "name": "text",
          "type": "RichText",
          "nilable": false
        },
        {
          "name": "credit",
          "type": "RichText",
          "nilable": false
        }
      ],
      "type": "PageBlock",
      "description": "A pull quote @text Quote text @credit Quote credit",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "pageBlockAnimation",
      "properties": [
        {
          "name": "animation",
          "type": "animation",
          "nilable": false
        },
        {
          "name": "caption",
          "type": "pageBlockCaption",
          "nilable": false
        },
        {
          "name": "need_autoplay",
          "type": "Bool",
          "nilable": false
        }
      ],
      "type": "PageBlock",
      "description": "An animation @animation Animation file; may be null @caption Animation caption @need_autoplay True, if the animation should be played automatically",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "pageBlockAudio",
      "properties": [
        {
          "name": "audio",
          "type": "audio",
          "nilable": false
        },
        {
          "name": "caption",
          "type": "pageBlockCaption",
          "nilable": false
        }
      ],
      "type": "PageBlock",
      "description": "An audio file @audio Audio file; may be null @caption Audio file caption",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "pageBlockPhoto",
      "properties": [
        {
          "name": "photo",
          "type": "photo",
          "nilable": false
        },
        {
          "name": "caption",
          "type": "pageBlockCaption",
          "nilable": false
        },
        {
          "name": "url",
          "type": "string",
          "nilable": false
        }
      ],
      "type": "PageBlock",
      "description": "A photo @photo Photo file; may be null @caption Photo caption @url URL that needs to be opened when the photo is clicked",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "pageBlockVideo",
      "properties": [
        {
          "name": "video",
          "type": "video",
          "nilable": false
        },
        {
          "name": "caption",
          "type": "pageBlockCaption",
          "nilable": false
        },
        {
          "name": "need_autoplay",
          "type": "Bool",
          "nilable": false
        },
        {
          "name": "is_looped",
          "type": "Bool",
          "nilable": false
        }
      ],
      "type": "PageBlock",
      "description": "A video @video Video file; may be null @caption Video caption @need_autoplay True, if the video should be played automatically @is_looped True, if the video should be looped",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "pageBlockVoiceNote",
      "properties": [
        {
          "name": "voice_note",
          "type": "voiceNote",
          "nilable": false
        },
        {
          "name": "caption",
          "type": "pageBlockCaption",
          "nilable": false
        }
      ],
      "type": "PageBlock",
      "description": "A voice note @voice_note Voice note; may be null @caption Voice note caption",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "pageBlockCover",
      "properties": [
        {
          "name": "cover",
          "type": "PageBlock",
          "nilable": false
        }
      ],
      "type": "PageBlock",
      "description": "A page cover @cover Cover",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "pageBlockEmbedded",
      "properties": [
        {
          "name": "url",
          "type": "string",
          "nilable": false
        },
        {
          "name": "html",
          "type": "string",
          "nilable": false
        },
        {
          "name": "poster_photo",
          "type": "photo",
          "nilable": false
        },
        {
          "name": "width",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "height",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "caption",
          "type": "pageBlockCaption",
          "nilable": false
        },
        {
          "name": "is_full_width",
          "type": "Bool",
          "nilable": false
        },
        {
          "name": "allow_scrolling",
          "type": "Bool",
          "nilable": false
        }
      ],
      "type": "PageBlock",
      "description": "An embedded web page @url Web page URL, if available @html HTML-markup of the embedded page @poster_photo Poster photo, if available; may be null @width Block width; 0 if unknown @height Block height; 0 if unknown @caption Block caption @is_full_width True, if the block should be full width @allow_scrolling True, if scrolling should be allowed",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "pageBlockEmbeddedPost",
      "properties": [
        {
          "name": "url",
          "type": "string",
          "nilable": false
        },
        {
          "name": "author",
          "type": "string",
          "nilable": false
        },
        {
          "name": "author_photo",
          "type": "photo",
          "nilable": false
        },
        {
          "name": "date",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "page_blocks",
          "type": "vector<PageBlock>",
          "nilable": false
        },
        {
          "name": "caption",
          "type": "pageBlockCaption",
          "nilable": false
        }
      ],
      "type": "PageBlock",
      "description": "An embedded post @url Web page URL @author Post author @author_photo Post author photo; may be null @date Point in time (Unix timestamp) when the post was created; 0 if unknown @page_blocks Post content @caption Post caption",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "pageBlockCollage",
      "properties": [
        {
          "name": "page_blocks",
          "type": "vector<PageBlock>",
          "nilable": false
        },
        {
          "name": "caption",
          "type": "pageBlockCaption",
          "nilable": false
        }
      ],
      "type": "PageBlock",
      "description": "A collage @page_blocks Collage item contents @caption Block caption",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "pageBlockSlideshow",
      "properties": [
        {
          "name": "page_blocks",
          "type": "vector<PageBlock>",
          "nilable": false
        },
        {
          "name": "caption",
          "type": "pageBlockCaption",
          "nilable": false
        }
      ],
      "type": "PageBlock",
      "description": "A slideshow @page_blocks Slideshow item contents @caption Block caption",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "pageBlockChatLink",
      "properties": [
        {
          "name": "title",
          "type": "string",
          "nilable": false
        },
        {
          "name": "photo",
          "type": "chatPhoto",
          "nilable": false
        },
        {
          "name": "username",
          "type": "string",
          "nilable": false
        }
      ],
      "type": "PageBlock",
      "description": "A link to a chat @title Chat title @photo Chat photo; may be null @username Chat username, by which all other information about the chat should be resolved",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "pageBlockTable",
      "properties": [
        {
          "name": "caption",
          "type": "RichText",
          "nilable": false
        },
        {
          "name": "cells",
          "type": "vector<vector<pageBlockTableCell>>",
          "nilable": false
        },
        {
          "name": "is_bordered",
          "type": "Bool",
          "nilable": false
        },
        {
          "name": "is_striped",
          "type": "Bool",
          "nilable": false
        }
      ],
      "type": "PageBlock",
      "description": "A table @caption Table caption @cells Table cells @is_bordered True, if the table is bordered @is_striped True, if the table is striped",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "pageBlockDetails",
      "properties": [
        {
          "name": "header",
          "type": "RichText",
          "nilable": false
        },
        {
          "name": "page_blocks",
          "type": "vector<PageBlock>",
          "nilable": false
        },
        {
          "name": "is_open",
          "type": "Bool",
          "nilable": false
        }
      ],
      "type": "PageBlock",
      "description": "A collapsible block @header Always visible heading for the block @page_blocks Block contents @is_open True, if the block is open by default",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "pageBlockRelatedArticles",
      "properties": [
        {
          "name": "header",
          "type": "RichText",
          "nilable": false
        },
        {
          "name": "articles",
          "type": "vector<pageBlockRelatedArticle>",
          "nilable": false
        }
      ],
      "type": "PageBlock",
      "description": "Related articles @header Block header @articles List of related articles",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "pageBlockMap",
      "properties": [
        {
          "name": "location",
          "type": "location",
          "nilable": false
        },
        {
          "name": "zoom",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "width",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "height",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "caption",
          "type": "pageBlockCaption",
          "nilable": false
        }
      ],
      "type": "PageBlock",
      "description": "A map @location Location of the map center @zoom Map zoom level @width Map width @height Map height @caption Block caption",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "inputCredentialsSaved",
      "properties": [
        {
          "name": "saved_credentials_id",
          "type": "string",
          "nilable": false
        }
      ],
      "type": "InputCredentials",
      "description": "Applies if a user chooses some previously saved payment credentials. To use their previously saved credentials, the user must have a valid temporary password @saved_credentials_id Identifier of the saved credentials",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "inputCredentialsNew",
      "properties": [
        {
          "name": "data",
          "type": "string",
          "nilable": false
        },
        {
          "name": "allow_save",
          "type": "Bool",
          "nilable": false
        }
      ],
      "type": "InputCredentials",
      "description": "Applies if a user enters new credentials on a payment provider website @data Contains JSON-encoded data with a credential identifier from the payment provider @allow_save True, if the credential identifier can be saved on the server side",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "inputCredentialsAndroidPay",
      "properties": [
        {
          "name": "data",
          "type": "string",
          "nilable": false
        }
      ],
      "type": "InputCredentials",
      "description": "Applies if a user enters new credentials using Android Pay @data JSON-encoded data with the credential identifier",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "inputCredentialsApplePay",
      "properties": [
        {
          "name": "data",
          "type": "string",
          "nilable": false
        }
      ],
      "type": "InputCredentials",
      "description": "Applies if a user enters new credentials using Apple Pay @data JSON-encoded data with the credential identifier",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "passportElementTypePersonalDetails",
      "properties": [],
      "type": "PassportElementType",
      "description": "A Telegram Passport element containing the user's personal details",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "passportElementTypePassport",
      "properties": [],
      "type": "PassportElementType",
      "description": "A Telegram Passport element containing the user's passport",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "passportElementTypeDriverLicense",
      "properties": [],
      "type": "PassportElementType",
      "description": "A Telegram Passport element containing the user's driver license",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "passportElementTypeIdentityCard",
      "properties": [],
      "type": "PassportElementType",
      "description": "A Telegram Passport element containing the user's identity card",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "passportElementTypeInternalPassport",
      "properties": [],
      "type": "PassportElementType",
      "description": "A Telegram Passport element containing the user's internal passport",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "passportElementTypeAddress",
      "properties": [],
      "type": "PassportElementType",
      "description": "A Telegram Passport element containing the user's address",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "passportElementTypeUtilityBill",
      "properties": [],
      "type": "PassportElementType",
      "description": "A Telegram Passport element containing the user's utility bill",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "passportElementTypeBankStatement",
      "properties": [],
      "type": "PassportElementType",
      "description": "A Telegram Passport element containing the user's bank statement",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "passportElementTypeRentalAgreement",
      "properties": [],
      "type": "PassportElementType",
      "description": "A Telegram Passport element containing the user's rental agreement",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "passportElementTypePassportRegistration",
      "properties": [],
      "type": "PassportElementType",
      "description": "A Telegram Passport element containing the registration page of the user's passport",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "passportElementTypeTemporaryRegistration",
      "properties": [],
      "type": "PassportElementType",
      "description": "A Telegram Passport element containing the user's temporary registration",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "passportElementTypePhoneNumber",
      "properties": [],
      "type": "PassportElementType",
      "description": "A Telegram Passport element containing the user's phone number",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "passportElementTypeEmailAddress",
      "properties": [],
      "type": "PassportElementType",
      "description": "A Telegram Passport element containing the user's email address",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "passportElementPersonalDetails",
      "properties": [
        {
          "name": "personal_details",
          "type": "personalDetails",
          "nilable": false
        }
      ],
      "type": "PassportElement",
      "description": "A Telegram Passport element containing the user's personal details @personal_details Personal details of the user",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "passportElementPassport",
      "properties": [
        {
          "name": "passport",
          "type": "identityDocument",
          "nilable": false
        }
      ],
      "type": "PassportElement",
      "description": "A Telegram Passport element containing the user's passport @passport Passport",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "passportElementDriverLicense",
      "properties": [
        {
          "name": "driver_license",
          "type": "identityDocument",
          "nilable": false
        }
      ],
      "type": "PassportElement",
      "description": "A Telegram Passport element containing the user's driver license @driver_license Driver license",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "passportElementIdentityCard",
      "properties": [
        {
          "name": "identity_card",
          "type": "identityDocument",
          "nilable": false
        }
      ],
      "type": "PassportElement",
      "description": "A Telegram Passport element containing the user's identity card @identity_card Identity card",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "passportElementInternalPassport",
      "properties": [
        {
          "name": "internal_passport",
          "type": "identityDocument",
          "nilable": false
        }
      ],
      "type": "PassportElement",
      "description": "A Telegram Passport element containing the user's internal passport @internal_passport Internal passport",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "passportElementAddress",
      "properties": [
        {
          "name": "address",
          "type": "address",
          "nilable": false
        }
      ],
      "type": "PassportElement",
      "description": "A Telegram Passport element containing the user's address @address Address",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "passportElementUtilityBill",
      "properties": [
        {
          "name": "utility_bill",
          "type": "personalDocument",
          "nilable": false
        }
      ],
      "type": "PassportElement",
      "description": "A Telegram Passport element containing the user's utility bill @utility_bill Utility bill",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "passportElementBankStatement",
      "properties": [
        {
          "name": "bank_statement",
          "type": "personalDocument",
          "nilable": false
        }
      ],
      "type": "PassportElement",
      "description": "A Telegram Passport element containing the user's bank statement @bank_statement Bank statement",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "passportElementRentalAgreement",
      "properties": [
        {
          "name": "rental_agreement",
          "type": "personalDocument",
          "nilable": false
        }
      ],
      "type": "PassportElement",
      "description": "A Telegram Passport element containing the user's rental agreement @rental_agreement Rental agreement",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "passportElementPassportRegistration",
      "properties": [
        {
          "name": "passport_registration",
          "type": "personalDocument",
          "nilable": false
        }
      ],
      "type": "PassportElement",
      "description": "A Telegram Passport element containing the user's passport registration pages @passport_registration Passport registration pages",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "passportElementTemporaryRegistration",
      "properties": [
        {
          "name": "temporary_registration",
          "type": "personalDocument",
          "nilable": false
        }
      ],
      "type": "PassportElement",
      "description": "A Telegram Passport element containing the user's temporary registration @temporary_registration Temporary registration",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "passportElementPhoneNumber",
      "properties": [
        {
          "name": "phone_number",
          "type": "string",
          "nilable": false
        }
      ],
      "type": "PassportElement",
      "description": "A Telegram Passport element containing the user's phone number @phone_number Phone number",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "passportElementEmailAddress",
      "properties": [
        {
          "name": "email_address",
          "type": "string",
          "nilable": false
        }
      ],
      "type": "PassportElement",
      "description": "A Telegram Passport element containing the user's email address @email_address Email address",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "inputPassportElementPersonalDetails",
      "properties": [
        {
          "name": "personal_details",
          "type": "personalDetails",
          "nilable": false
        }
      ],
      "type": "InputPassportElement",
      "description": "A Telegram Passport element to be saved containing the user's personal details @personal_details Personal details of the user",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "inputPassportElementPassport",
      "properties": [
        {
          "name": "passport",
          "type": "inputIdentityDocument",
          "nilable": false
        }
      ],
      "type": "InputPassportElement",
      "description": "A Telegram Passport element to be saved containing the user's passport @passport The passport to be saved",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "inputPassportElementDriverLicense",
      "properties": [
        {
          "name": "driver_license",
          "type": "inputIdentityDocument",
          "nilable": false
        }
      ],
      "type": "InputPassportElement",
      "description": "A Telegram Passport element to be saved containing the user's driver license @driver_license The driver license to be saved",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "inputPassportElementIdentityCard",
      "properties": [
        {
          "name": "identity_card",
          "type": "inputIdentityDocument",
          "nilable": false
        }
      ],
      "type": "InputPassportElement",
      "description": "A Telegram Passport element to be saved containing the user's identity card @identity_card The identity card to be saved",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "inputPassportElementInternalPassport",
      "properties": [
        {
          "name": "internal_passport",
          "type": "inputIdentityDocument",
          "nilable": false
        }
      ],
      "type": "InputPassportElement",
      "description": "A Telegram Passport element to be saved containing the user's internal passport @internal_passport The internal passport to be saved",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "inputPassportElementAddress",
      "properties": [
        {
          "name": "address",
          "type": "address",
          "nilable": false
        }
      ],
      "type": "InputPassportElement",
      "description": "A Telegram Passport element to be saved containing the user's address @address The address to be saved",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "inputPassportElementUtilityBill",
      "properties": [
        {
          "name": "utility_bill",
          "type": "inputPersonalDocument",
          "nilable": false
        }
      ],
      "type": "InputPassportElement",
      "description": "A Telegram Passport element to be saved containing the user's utility bill @utility_bill The utility bill to be saved",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "inputPassportElementBankStatement",
      "properties": [
        {
          "name": "bank_statement",
          "type": "inputPersonalDocument",
          "nilable": false
        }
      ],
      "type": "InputPassportElement",
      "description": "A Telegram Passport element to be saved containing the user's bank statement @bank_statement The bank statement to be saved",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "inputPassportElementRentalAgreement",
      "properties": [
        {
          "name": "rental_agreement",
          "type": "inputPersonalDocument",
          "nilable": false
        }
      ],
      "type": "InputPassportElement",
      "description": "A Telegram Passport element to be saved containing the user's rental agreement @rental_agreement The rental agreement to be saved",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "inputPassportElementPassportRegistration",
      "properties": [
        {
          "name": "passport_registration",
          "type": "inputPersonalDocument",
          "nilable": false
        }
      ],
      "type": "InputPassportElement",
      "description": "A Telegram Passport element to be saved containing the user's passport registration @passport_registration The passport registration page to be saved",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "inputPassportElementTemporaryRegistration",
      "properties": [
        {
          "name": "temporary_registration",
          "type": "inputPersonalDocument",
          "nilable": false
        }
      ],
      "type": "InputPassportElement",
      "description": "A Telegram Passport element to be saved containing the user's temporary registration @temporary_registration The temporary registration document to be saved",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "inputPassportElementPhoneNumber",
      "properties": [
        {
          "name": "phone_number",
          "type": "string",
          "nilable": false
        }
      ],
      "type": "InputPassportElement",
      "description": "A Telegram Passport element to be saved containing the user's phone number @phone_number The phone number to be saved",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "inputPassportElementEmailAddress",
      "properties": [
        {
          "name": "email_address",
          "type": "string",
          "nilable": false
        }
      ],
      "type": "InputPassportElement",
      "description": "A Telegram Passport element to be saved containing the user's email address @email_address The email address to be saved",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "passportElementErrorSourceUnspecified",
      "properties": [],
      "type": "PassportElementErrorSource",
      "description": "The element contains an error in an unspecified place. The error will be considered resolved when new data is added",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "passportElementErrorSourceDataField",
      "properties": [
        {
          "name": "field_name",
          "type": "string",
          "nilable": false
        }
      ],
      "type": "PassportElementErrorSource",
      "description": "One of the data fields contains an error. The error will be considered resolved when the value of the field changes @field_name Field name",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "passportElementErrorSourceFrontSide",
      "properties": [],
      "type": "PassportElementErrorSource",
      "description": "The front side of the document contains an error. The error will be considered resolved when the file with the front side changes",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "passportElementErrorSourceReverseSide",
      "properties": [],
      "type": "PassportElementErrorSource",
      "description": "The reverse side of the document contains an error. The error will be considered resolved when the file with the reverse side changes",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "passportElementErrorSourceSelfie",
      "properties": [],
      "type": "PassportElementErrorSource",
      "description": "The selfie with the document contains an error. The error will be considered resolved when the file with the selfie changes",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "passportElementErrorSourceTranslationFile",
      "properties": [
        {
          "name": "file_index",
          "type": "int32",
          "nilable": false
        }
      ],
      "type": "PassportElementErrorSource",
      "description": "One of files with the translation of the document contains an error. The error will be considered resolved when the file changes @file_index Index of a file with the error",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "passportElementErrorSourceTranslationFiles",
      "properties": [],
      "type": "PassportElementErrorSource",
      "description": "The translation of the document contains an error. The error will be considered resolved when the list of translation files changes",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "passportElementErrorSourceFile",
      "properties": [
        {
          "name": "file_index",
          "type": "int32",
          "nilable": false
        }
      ],
      "type": "PassportElementErrorSource",
      "description": "The file contains an error. The error will be considered resolved when the file changes @file_index Index of a file with the error",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "passportElementErrorSourceFiles",
      "properties": [],
      "type": "PassportElementErrorSource",
      "description": "The list of attached files contains an error. The error will be considered resolved when the list of files changes",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "inputPassportElementErrorSourceUnspecified",
      "properties": [
        {
          "name": "element_hash",
          "type": "bytes",
          "nilable": false
        }
      ],
      "type": "InputPassportElementErrorSource",
      "description": "The element contains an error in an unspecified place. The error will be considered resolved when new data is added @element_hash Current hash of the entire element",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "inputPassportElementErrorSourceDataField",
      "properties": [
        {
          "name": "field_name",
          "type": "string",
          "nilable": false
        },
        {
          "name": "data_hash",
          "type": "bytes",
          "nilable": false
        }
      ],
      "type": "InputPassportElementErrorSource",
      "description": "A data field contains an error. The error is considered resolved when the field's value changes @field_name Field name @data_hash Current data hash",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "inputPassportElementErrorSourceFrontSide",
      "properties": [
        {
          "name": "file_hash",
          "type": "bytes",
          "nilable": false
        }
      ],
      "type": "InputPassportElementErrorSource",
      "description": "The front side of the document contains an error. The error is considered resolved when the file with the front side of the document changes @file_hash Current hash of the file containing the front side",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "inputPassportElementErrorSourceReverseSide",
      "properties": [
        {
          "name": "file_hash",
          "type": "bytes",
          "nilable": false
        }
      ],
      "type": "InputPassportElementErrorSource",
      "description": "The reverse side of the document contains an error. The error is considered resolved when the file with the reverse side of the document changes @file_hash Current hash of the file containing the reverse side",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "inputPassportElementErrorSourceSelfie",
      "properties": [
        {
          "name": "file_hash",
          "type": "bytes",
          "nilable": false
        }
      ],
      "type": "InputPassportElementErrorSource",
      "description": "The selfie contains an error. The error is considered resolved when the file with the selfie changes @file_hash Current hash of the file containing the selfie",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "inputPassportElementErrorSourceTranslationFile",
      "properties": [
        {
          "name": "file_hash",
          "type": "bytes",
          "nilable": false
        }
      ],
      "type": "InputPassportElementErrorSource",
      "description": "One of the files containing the translation of the document contains an error. The error is considered resolved when the file with the translation changes @file_hash Current hash of the file containing the translation",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "inputPassportElementErrorSourceTranslationFiles",
      "properties": [
        {
          "name": "file_hashes",
          "type": "vector<bytes>",
          "nilable": false
        }
      ],
      "type": "InputPassportElementErrorSource",
      "description": "The translation of the document contains an error. The error is considered resolved when the list of files changes @file_hashes Current hashes of all files with the translation",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "inputPassportElementErrorSourceFile",
      "properties": [
        {
          "name": "file_hash",
          "type": "bytes",
          "nilable": false
        }
      ],
      "type": "InputPassportElementErrorSource",
      "description": "The file contains an error. The error is considered resolved when the file changes @file_hash Current hash of the file which has the error",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "inputPassportElementErrorSourceFiles",
      "properties": [
        {
          "name": "file_hashes",
          "type": "vector<bytes>",
          "nilable": false
        }
      ],
      "type": "InputPassportElementErrorSource",
      "description": "The list of attached files contains an error. The error is considered resolved when the file list changes @file_hashes Current hashes of all attached files",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "messageText",
      "properties": [
        {
          "name": "text",
          "type": "formattedText",
          "nilable": false
        },
        {
          "name": "web_page",
          "type": "webPage",
          "nilable": false
        }
      ],
      "type": "MessageContent",
      "description": "A text message @text Text of the message @web_page A preview of the web page that's mentioned in the text; may be null",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "messageAnimation",
      "properties": [
        {
          "name": "animation",
          "type": "animation",
          "nilable": false
        },
        {
          "name": "caption",
          "type": "formattedText",
          "nilable": false
        },
        {
          "name": "is_secret",
          "type": "Bool",
          "nilable": false
        }
      ],
      "type": "MessageContent",
      "description": "An animation message (GIF-style). @animation Message content @caption Animation caption @is_secret True, if the animation thumbnail must be blurred and the animation must be shown only while tapped",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "messageAudio",
      "properties": [
        {
          "name": "audio",
          "type": "audio",
          "nilable": false
        },
        {
          "name": "caption",
          "type": "formattedText",
          "nilable": false
        }
      ],
      "type": "MessageContent",
      "description": "An audio message @audio Message content @caption Audio caption",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "messageDocument",
      "properties": [
        {
          "name": "document",
          "type": "document",
          "nilable": false
        },
        {
          "name": "caption",
          "type": "formattedText",
          "nilable": false
        }
      ],
      "type": "MessageContent",
      "description": "A document message (general file) @document Message content @caption Document caption",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "messagePhoto",
      "properties": [
        {
          "name": "photo",
          "type": "photo",
          "nilable": false
        },
        {
          "name": "caption",
          "type": "formattedText",
          "nilable": false
        },
        {
          "name": "is_secret",
          "type": "Bool",
          "nilable": false
        }
      ],
      "type": "MessageContent",
      "description": "A photo message @photo Message content @caption Photo caption @is_secret True, if the photo must be blurred and must be shown only while tapped",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "messageExpiredPhoto",
      "properties": [],
      "type": "MessageContent",
      "description": "An expired photo message (self-destructed after TTL has elapsed)",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "messageSticker",
      "properties": [
        {
          "name": "sticker",
          "type": "sticker",
          "nilable": false
        }
      ],
      "type": "MessageContent",
      "description": "A sticker message @sticker Message content",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "messageVideo",
      "properties": [
        {
          "name": "video",
          "type": "video",
          "nilable": false
        },
        {
          "name": "caption",
          "type": "formattedText",
          "nilable": false
        },
        {
          "name": "is_secret",
          "type": "Bool",
          "nilable": false
        }
      ],
      "type": "MessageContent",
      "description": "A video message @video Message content @caption Video caption @is_secret True, if the video thumbnail must be blurred and the video must be shown only while tapped",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "messageExpiredVideo",
      "properties": [],
      "type": "MessageContent",
      "description": "An expired video message (self-destructed after TTL has elapsed)",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "messageVideoNote",
      "properties": [
        {
          "name": "video_note",
          "type": "videoNote",
          "nilable": false
        },
        {
          "name": "is_viewed",
          "type": "Bool",
          "nilable": false
        },
        {
          "name": "is_secret",
          "type": "Bool",
          "nilable": false
        }
      ],
      "type": "MessageContent",
      "description": "A video note message @video_note Message content @is_viewed True, if at least one of the recipients has viewed the video note @is_secret True, if the video note thumbnail must be blurred and the video note must be shown only while tapped",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "messageVoiceNote",
      "properties": [
        {
          "name": "voice_note",
          "type": "voiceNote",
          "nilable": false
        },
        {
          "name": "caption",
          "type": "formattedText",
          "nilable": false
        },
        {
          "name": "is_listened",
          "type": "Bool",
          "nilable": false
        }
      ],
      "type": "MessageContent",
      "description": "A voice note message @voice_note Message content @caption Voice note caption @is_listened True, if at least one of the recipients has listened to the voice note",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "messageLocation",
      "properties": [
        {
          "name": "location",
          "type": "location",
          "nilable": false
        },
        {
          "name": "live_period",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "expires_in",
          "type": "int32",
          "description": "Left time for which the location can be updated, in seconds. updateMessageContent is not sent when this field changes",
          "nilable": false
        }
      ],
      "type": "MessageContent",
      "description": "A message with a location @location Message content @live_period Time relative to the message sent date until which the location can be updated, in seconds",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "messageVenue",
      "properties": [
        {
          "name": "venue",
          "type": "venue",
          "nilable": false
        }
      ],
      "type": "MessageContent",
      "description": "A message with information about a venue @venue Message content",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "messageContact",
      "properties": [
        {
          "name": "contact",
          "type": "contact",
          "nilable": false
        }
      ],
      "type": "MessageContent",
      "description": "A message with a user contact @contact Message content",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "messageGame",
      "properties": [
        {
          "name": "game",
          "type": "game",
          "nilable": false
        }
      ],
      "type": "MessageContent",
      "description": "A message with a game @game Game",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "messagePoll",
      "properties": [
        {
          "name": "poll",
          "type": "poll",
          "nilable": false
        }
      ],
      "type": "MessageContent",
      "description": "A message with a poll @poll Poll",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "messageInvoice",
      "properties": [
        {
          "name": "title",
          "type": "string",
          "nilable": false
        },
        {
          "name": "description",
          "type": "string",
          "description": "A message with an invoice from a bot @title Product title @param_description Product description @photo Product photo; may be null @currency Currency for the product price @total_amount Product total price in the minimal quantity of the currency",
          "nilable": true
        },
        {
          "name": "photo",
          "type": "photo",
          "nilable": false
        },
        {
          "name": "currency",
          "type": "string",
          "nilable": false
        },
        {
          "name": "total_amount",
          "type": "int53",
          "nilable": false
        },
        {
          "name": "start_parameter",
          "type": "string",
          "description": "Unique invoice bot start_parameter. To share an invoice use the URL https://t.me/{bot_username}?start={start_parameter} @is_test True, if the invoice is a test invoice",
          "nilable": false
        },
        {
          "name": "is_test",
          "type": "Bool",
          "nilable": false
        },
        {
          "name": "need_shipping_address",
          "type": "Bool",
          "description": "True, if the shipping address should be specified @receipt_message_id The identifier of the message with the receipt, after the product has been purchased",
          "nilable": false
        },
        {
          "name": "receipt_message_id",
          "type": "int53",
          "nilable": false
        }
      ],
      "type": "MessageContent",
      "description": "A message with an invoice from a bot @title Product title @param_description Product description @photo Product photo; may be null @currency Currency for the product price @total_amount Product total price in the minimal quantity of the currency",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "messageCall",
      "properties": [
        {
          "name": "discard_reason",
          "type": "CallDiscardReason",
          "nilable": false
        },
        {
          "name": "duration",
          "type": "int32",
          "nilable": false
        }
      ],
      "type": "MessageContent",
      "description": "A message with information about an ended call @discard_reason Reason why the call was discarded @duration Call duration, in seconds",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "messageBasicGroupChatCreate",
      "properties": [
        {
          "name": "title",
          "type": "string",
          "nilable": false
        },
        {
          "name": "member_user_ids",
          "type": "vector<int32>",
          "nilable": false
        }
      ],
      "type": "MessageContent",
      "description": "A newly created basic group @title Title of the basic group @member_user_ids User identifiers of members in the basic group",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "messageSupergroupChatCreate",
      "properties": [
        {
          "name": "title",
          "type": "string",
          "nilable": false
        }
      ],
      "type": "MessageContent",
      "description": "A newly created supergroup or channel @title Title of the supergroup or channel",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "messageChatChangeTitle",
      "properties": [
        {
          "name": "title",
          "type": "string",
          "nilable": false
        }
      ],
      "type": "MessageContent",
      "description": "An updated chat title @title New chat title",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "messageChatChangePhoto",
      "properties": [
        {
          "name": "photo",
          "type": "photo",
          "nilable": false
        }
      ],
      "type": "MessageContent",
      "description": "An updated chat photo @photo New chat photo",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "messageChatDeletePhoto",
      "properties": [],
      "type": "MessageContent",
      "description": "A deleted chat photo",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "messageChatAddMembers",
      "properties": [
        {
          "name": "member_user_ids",
          "type": "vector<int32>",
          "nilable": false
        }
      ],
      "type": "MessageContent",
      "description": "New chat members were added @member_user_ids User identifiers of the new members",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "messageChatJoinByLink",
      "properties": [],
      "type": "MessageContent",
      "description": "A new member joined the chat by invite link",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "messageChatDeleteMember",
      "properties": [
        {
          "name": "user_id",
          "type": "int32",
          "nilable": false
        }
      ],
      "type": "MessageContent",
      "description": "A chat member was deleted @user_id User identifier of the deleted chat member",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "messageChatUpgradeTo",
      "properties": [
        {
          "name": "supergroup_id",
          "type": "int32",
          "nilable": false
        }
      ],
      "type": "MessageContent",
      "description": "A basic group was upgraded to a supergroup and was deactivated as the result @supergroup_id Identifier of the supergroup to which the basic group was upgraded",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "messageChatUpgradeFrom",
      "properties": [
        {
          "name": "title",
          "type": "string",
          "nilable": false
        },
        {
          "name": "basic_group_id",
          "type": "int32",
          "nilable": false
        }
      ],
      "type": "MessageContent",
      "description": "A supergroup has been created from a basic group @title Title of the newly created supergroup @basic_group_id The identifier of the original basic group",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "messagePinMessage",
      "properties": [
        {
          "name": "message_id",
          "type": "int53",
          "nilable": false
        }
      ],
      "type": "MessageContent",
      "description": "A message has been pinned @message_id Identifier of the pinned message, can be an identifier of a deleted message or 0",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "messageScreenshotTaken",
      "properties": [],
      "type": "MessageContent",
      "description": "A screenshot of a message in the chat has been taken",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "messageChatSetTtl",
      "properties": [
        {
          "name": "ttl",
          "type": "int32",
          "nilable": false
        }
      ],
      "type": "MessageContent",
      "description": "The TTL (Time To Live) setting messages in a secret chat has been changed @ttl New TTL",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "messageCustomServiceAction",
      "properties": [
        {
          "name": "text",
          "type": "string",
          "nilable": false
        }
      ],
      "type": "MessageContent",
      "description": "A non-standard action has happened in the chat @text Message text to be shown in the chat",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "messageGameScore",
      "properties": [
        {
          "name": "game_message_id",
          "type": "int53",
          "nilable": false
        },
        {
          "name": "game_id",
          "type": "int64",
          "nilable": false
        },
        {
          "name": "score",
          "type": "int32",
          "nilable": false
        }
      ],
      "type": "MessageContent",
      "description": "A new high score was achieved in a game @game_message_id Identifier of the message with the game, can be an identifier of a deleted message @game_id Identifier of the game; may be different from the games presented in the message with the game @score New score",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "messagePaymentSuccessful",
      "properties": [
        {
          "name": "invoice_message_id",
          "type": "int53",
          "nilable": false
        },
        {
          "name": "currency",
          "type": "string",
          "nilable": false
        },
        {
          "name": "total_amount",
          "type": "int53",
          "nilable": false
        }
      ],
      "type": "MessageContent",
      "description": "A payment has been completed @invoice_message_id Identifier of the message with the corresponding invoice; can be an identifier of a deleted message @currency Currency for the price of the product @total_amount Total price for the product, in the minimal quantity of the currency",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "messagePaymentSuccessfulBot",
      "properties": [
        {
          "name": "invoice_message_id",
          "type": "int53",
          "nilable": false
        },
        {
          "name": "currency",
          "type": "string",
          "nilable": false
        },
        {
          "name": "total_amount",
          "type": "int53",
          "description": "Total price for the product, in the minimal quantity of the currency @invoice_payload Invoice payload @shipping_option_id Identifier of the shipping option chosen by the user; may be empty if not applicable @order_info Information about the order; may be null",
          "nilable": true
        },
        {
          "name": "invoice_payload",
          "type": "bytes",
          "nilable": false
        },
        {
          "name": "shipping_option_id",
          "type": "string",
          "nilable": false
        },
        {
          "name": "order_info",
          "type": "orderInfo",
          "nilable": false
        },
        {
          "name": "telegram_payment_charge_id",
          "type": "string",
          "description": "Telegram payment identifier @provider_payment_charge_id Provider payment identifier",
          "nilable": false
        },
        {
          "name": "provider_payment_charge_id",
          "type": "string",
          "nilable": false
        }
      ],
      "type": "MessageContent",
      "description": "A payment has been completed; for bots only @invoice_message_id Identifier of the message with the corresponding invoice; can be an identifier of a deleted message @currency Currency for price of the product",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "messageContactRegistered",
      "properties": [],
      "type": "MessageContent",
      "description": "A contact has registered with Telegram",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "messageWebsiteConnected",
      "properties": [
        {
          "name": "domain_name",
          "type": "string",
          "nilable": false
        }
      ],
      "type": "MessageContent",
      "description": "The current user has connected a website by logging in using Telegram Login Widget on it @domain_name Domain name of the connected website",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "messagePassportDataSent",
      "properties": [
        {
          "name": "types",
          "type": "vector<PassportElementType>",
          "nilable": false
        }
      ],
      "type": "MessageContent",
      "description": "Telegram Passport data has been sent @types List of Telegram Passport element types sent",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "messagePassportDataReceived",
      "properties": [
        {
          "name": "elements",
          "type": "vector<encryptedPassportElement>",
          "nilable": false
        },
        {
          "name": "credentials",
          "type": "encryptedCredentials",
          "nilable": false
        }
      ],
      "type": "MessageContent",
      "description": "Telegram Passport data has been received; for bots only @elements List of received Telegram Passport elements @credentials Encrypted data credentials",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "messageUnsupported",
      "properties": [],
      "type": "MessageContent",
      "description": "Message content that is not supported by the client",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "textEntityTypeMention",
      "properties": [],
      "type": "TextEntityType",
      "description": "A mention of a user by their username",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "textEntityTypeHashtag",
      "properties": [],
      "type": "TextEntityType",
      "description": "A hashtag text, beginning with \"#\"",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "textEntityTypeCashtag",
      "properties": [],
      "type": "TextEntityType",
      "description": "A cashtag text, beginning with \"$\" and consisting of capital english letters (i.e. \"$USD\")",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "textEntityTypeBotCommand",
      "properties": [],
      "type": "TextEntityType",
      "description": "A bot command, beginning with \"/\". This shouldn't be highlighted if there are no bots in the chat",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "textEntityTypeUrl",
      "properties": [],
      "type": "TextEntityType",
      "description": "An HTTP URL",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "textEntityTypeEmailAddress",
      "properties": [],
      "type": "TextEntityType",
      "description": "An email address",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "textEntityTypeBold",
      "properties": [],
      "type": "TextEntityType",
      "description": "A bold text",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "textEntityTypeItalic",
      "properties": [],
      "type": "TextEntityType",
      "description": "An italic text",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "textEntityTypeCode",
      "properties": [],
      "type": "TextEntityType",
      "description": "Text that must be formatted as if inside a code HTML tag",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "textEntityTypePre",
      "properties": [],
      "type": "TextEntityType",
      "description": "Text that must be formatted as if inside a pre HTML tag",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "textEntityTypePreCode",
      "properties": [
        {
          "name": "language",
          "type": "string",
          "nilable": false
        }
      ],
      "type": "TextEntityType",
      "description": "Text that must be formatted as if inside pre, and code HTML tags @language Programming language of the code; as defined by the sender",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "textEntityTypeTextUrl",
      "properties": [
        {
          "name": "url",
          "type": "string",
          "nilable": false
        }
      ],
      "type": "TextEntityType",
      "description": "A text description shown instead of a raw URL @url HTTP or tg:// URL to be opened when the link is clicked",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "textEntityTypeMentionName",
      "properties": [
        {
          "name": "user_id",
          "type": "int32",
          "nilable": false
        }
      ],
      "type": "TextEntityType",
      "description": "A text shows instead of a raw mention of the user (e.g., when the user has no username) @user_id Identifier of the mentioned user",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "textEntityTypePhoneNumber",
      "properties": [],
      "type": "TextEntityType",
      "description": "A phone number",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "inputMessageText",
      "properties": [
        {
          "name": "text",
          "type": "formattedText",
          "nilable": false
        },
        {
          "name": "disable_web_page_preview",
          "type": "Bool",
          "description": "True, if rich web page previews for URLs in the message text should be disabled @clear_draft True, if a chat message draft should be deleted",
          "nilable": false
        },
        {
          "name": "clear_draft",
          "type": "Bool",
          "nilable": false
        }
      ],
      "type": "InputMessageContent",
      "description": "A text message @text Formatted text to be sent; 1-GetOption(\"message_text_length_max\") characters. Only Bold, Italic, Code, Pre, PreCode and TextUrl entities are allowed to be specified manually",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "inputMessageAnimation",
      "properties": [
        {
          "name": "animation",
          "type": "InputFile",
          "nilable": false
        },
        {
          "name": "thumbnail",
          "type": "inputThumbnail",
          "nilable": false
        },
        {
          "name": "duration",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "width",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "height",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "caption",
          "type": "formattedText",
          "nilable": false
        }
      ],
      "type": "InputMessageContent",
      "description": "An animation message (GIF-style). @animation Animation file to be sent @thumbnail Animation thumbnail, if available @duration Duration of the animation, in seconds @width Width of the animation; may be replaced by the server @height Height of the animation; may be replaced by the server @caption Animation caption; 0-GetOption(\"message_caption_length_max\") characters",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "inputMessageAudio",
      "properties": [
        {
          "name": "audio",
          "type": "InputFile",
          "nilable": false
        },
        {
          "name": "album_cover_thumbnail",
          "type": "inputThumbnail",
          "nilable": false
        },
        {
          "name": "duration",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "title",
          "type": "string",
          "nilable": false
        },
        {
          "name": "performer",
          "type": "string",
          "description": "Performer of the audio; 0-64 characters, may be replaced by the server @caption Audio caption; 0-GetOption(\"message_caption_length_max\") characters",
          "nilable": false
        },
        {
          "name": "caption",
          "type": "formattedText",
          "nilable": false
        }
      ],
      "type": "InputMessageContent",
      "description": "An audio message @audio Audio file to be sent @album_cover_thumbnail Thumbnail of the cover for the album, if available @duration Duration of the audio, in seconds; may be replaced by the server @title Title of the audio; 0-64 characters; may be replaced by the server",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "inputMessageDocument",
      "properties": [
        {
          "name": "document",
          "type": "InputFile",
          "nilable": false
        },
        {
          "name": "thumbnail",
          "type": "inputThumbnail",
          "nilable": false
        },
        {
          "name": "caption",
          "type": "formattedText",
          "nilable": false
        }
      ],
      "type": "InputMessageContent",
      "description": "A document message (general file) @document Document to be sent @thumbnail Document thumbnail, if available @caption Document caption; 0-GetOption(\"message_caption_length_max\") characters",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "inputMessagePhoto",
      "properties": [
        {
          "name": "photo",
          "type": "InputFile",
          "nilable": false
        },
        {
          "name": "thumbnail",
          "type": "inputThumbnail",
          "nilable": false
        },
        {
          "name": "added_sticker_file_ids",
          "type": "vector<int32>",
          "nilable": false
        },
        {
          "name": "width",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "height",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "caption",
          "type": "formattedText",
          "nilable": false
        },
        {
          "name": "ttl",
          "type": "int32",
          "description": "Photo TTL (Time To Live), in seconds (0-60). A non-zero TTL can be specified only in private chats",
          "nilable": false
        }
      ],
      "type": "InputMessageContent",
      "description": "A photo message @photo Photo to send @thumbnail Photo thumbnail to be sent, this is sent to the other party in secret chats only @added_sticker_file_ids File identifiers of the stickers added to the photo, if applicable @width Photo width @height Photo height @caption Photo caption; 0-GetOption(\"message_caption_length_max\") characters",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "inputMessageSticker",
      "properties": [
        {
          "name": "sticker",
          "type": "InputFile",
          "nilable": false
        },
        {
          "name": "thumbnail",
          "type": "inputThumbnail",
          "nilable": false
        },
        {
          "name": "width",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "height",
          "type": "int32",
          "nilable": false
        }
      ],
      "type": "InputMessageContent",
      "description": "A sticker message @sticker Sticker to be sent @thumbnail Sticker thumbnail, if available @width Sticker width @height Sticker height",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "inputMessageVideo",
      "properties": [
        {
          "name": "video",
          "type": "InputFile",
          "nilable": false
        },
        {
          "name": "thumbnail",
          "type": "inputThumbnail",
          "nilable": false
        },
        {
          "name": "added_sticker_file_ids",
          "type": "vector<int32>",
          "nilable": false
        },
        {
          "name": "duration",
          "type": "int32",
          "description": "Duration of the video, in seconds @width Video width @height Video height @supports_streaming True, if the video should be tried to be streamed",
          "nilable": false
        },
        {
          "name": "width",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "height",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "supports_streaming",
          "type": "Bool",
          "nilable": false
        },
        {
          "name": "caption",
          "type": "formattedText",
          "description": "Video caption; 0-GetOption(\"message_caption_length_max\") characters @ttl Video TTL (Time To Live), in seconds (0-60). A non-zero TTL can be specified only in private chats",
          "nilable": false
        },
        {
          "name": "ttl",
          "type": "int32",
          "nilable": false
        }
      ],
      "type": "InputMessageContent",
      "description": "A video message @video Video to be sent @thumbnail Video thumbnail, if available @added_sticker_file_ids File identifiers of the stickers added to the video, if applicable",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "inputMessageVideoNote",
      "properties": [
        {
          "name": "video_note",
          "type": "InputFile",
          "nilable": false
        },
        {
          "name": "thumbnail",
          "type": "inputThumbnail",
          "nilable": false
        },
        {
          "name": "duration",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "length",
          "type": "int32",
          "nilable": false
        }
      ],
      "type": "InputMessageContent",
      "description": "A video note message @video_note Video note to be sent @thumbnail Video thumbnail, if available @duration Duration of the video, in seconds @length Video width and height; must be positive and not greater than 640",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "inputMessageVoiceNote",
      "properties": [
        {
          "name": "voice_note",
          "type": "InputFile",
          "nilable": false
        },
        {
          "name": "duration",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "waveform",
          "type": "bytes",
          "nilable": false
        },
        {
          "name": "caption",
          "type": "formattedText",
          "nilable": false
        }
      ],
      "type": "InputMessageContent",
      "description": "A voice note message @voice_note Voice note to be sent @duration Duration of the voice note, in seconds @waveform Waveform representation of the voice note, in 5-bit format @caption Voice note caption; 0-GetOption(\"message_caption_length_max\") characters",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "inputMessageLocation",
      "properties": [
        {
          "name": "location",
          "type": "location",
          "nilable": false
        },
        {
          "name": "live_period",
          "type": "int32",
          "nilable": false
        }
      ],
      "type": "InputMessageContent",
      "description": "A message with a location @location Location to be sent @live_period Period for which the location can be updated, in seconds; should bebetween 60 and 86400 for a live location and 0 otherwise",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "inputMessageVenue",
      "properties": [
        {
          "name": "venue",
          "type": "venue",
          "nilable": false
        }
      ],
      "type": "InputMessageContent",
      "description": "A message with information about a venue @venue Venue to send",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "inputMessageContact",
      "properties": [
        {
          "name": "contact",
          "type": "contact",
          "nilable": false
        }
      ],
      "type": "InputMessageContent",
      "description": "A message containing a user contact @contact Contact to send",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "inputMessageGame",
      "properties": [
        {
          "name": "bot_user_id",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "game_short_name",
          "type": "string",
          "nilable": false
        }
      ],
      "type": "InputMessageContent",
      "description": "A message with a game; not supported for channels or secret chats @bot_user_id User identifier of the bot that owns the game @game_short_name Short name of the game",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "inputMessageInvoice",
      "properties": [
        {
          "name": "invoice",
          "type": "invoice",
          "nilable": false
        },
        {
          "name": "title",
          "type": "string",
          "nilable": false
        },
        {
          "name": "description",
          "type": "string",
          "description": "A message with an invoice; can be used only by bots and only in private chats @invoice Invoice @title Product title; 1-32 characters @param_description Product description; 0-255 characters @photo_url Product photo URL; optional @photo_size Product photo size @photo_width Product photo width @photo_height Product photo height",
          "nilable": true
        },
        {
          "name": "photo_url",
          "type": "string",
          "nilable": false
        },
        {
          "name": "photo_size",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "photo_width",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "photo_height",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "payload",
          "type": "bytes",
          "description": "The invoice payload @provider_token Payment provider token @provider_data JSON-encoded data about the invoice, which will be shared with the payment provider @start_parameter Unique invoice bot start_parameter for the generation of this invoice",
          "nilable": false
        },
        {
          "name": "provider_token",
          "type": "string",
          "nilable": false
        },
        {
          "name": "provider_data",
          "type": "string",
          "nilable": false
        },
        {
          "name": "start_parameter",
          "type": "string",
          "nilable": false
        }
      ],
      "type": "InputMessageContent",
      "description": "A message with an invoice; can be used only by bots and only in private chats @invoice Invoice @title Product title; 1-32 characters @param_description Product description; 0-255 characters @photo_url Product photo URL; optional @photo_size Product photo size @photo_width Product photo width @photo_height Product photo height",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "inputMessagePoll",
      "properties": [
        {
          "name": "question",
          "type": "string",
          "nilable": false
        },
        {
          "name": "options",
          "type": "vector<string>",
          "nilable": false
        }
      ],
      "type": "InputMessageContent",
      "description": "A message with a poll. Polls can't be sent to private or secret chats @question Poll question, 1-255 characters @options List of poll answer options, 2-10 strings 1-100 characters each",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "inputMessageForwarded",
      "properties": [
        {
          "name": "from_chat_id",
          "type": "int53",
          "nilable": false
        },
        {
          "name": "message_id",
          "type": "int53",
          "nilable": false
        },
        {
          "name": "in_game_share",
          "type": "Bool",
          "description": "True, if a game message should be shared within a launched game; applies only to game messages",
          "nilable": false
        },
        {
          "name": "send_copy",
          "type": "Bool",
          "description": "True, if content of the message needs to be copied without a link to the original message. Always true if the message is forwarded to a secret chat",
          "nilable": false
        },
        {
          "name": "remove_caption",
          "type": "Bool",
          "description": "True, if media caption of the message copy needs to be removed. Ignored if send_copy is false",
          "nilable": false
        }
      ],
      "type": "InputMessageContent",
      "description": "A forwarded message @from_chat_id Identifier for the chat this forwarded message came from @message_id Identifier of the message to forward",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "searchMessagesFilterEmpty",
      "properties": [],
      "type": "SearchMessagesFilter",
      "description": "Returns all found messages, no filter is applied",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "searchMessagesFilterAnimation",
      "properties": [],
      "type": "SearchMessagesFilter",
      "description": "Returns only animation messages",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "searchMessagesFilterAudio",
      "properties": [],
      "type": "SearchMessagesFilter",
      "description": "Returns only audio messages",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "searchMessagesFilterDocument",
      "properties": [],
      "type": "SearchMessagesFilter",
      "description": "Returns only document messages",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "searchMessagesFilterPhoto",
      "properties": [],
      "type": "SearchMessagesFilter",
      "description": "Returns only photo messages",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "searchMessagesFilterVideo",
      "properties": [],
      "type": "SearchMessagesFilter",
      "description": "Returns only video messages",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "searchMessagesFilterVoiceNote",
      "properties": [],
      "type": "SearchMessagesFilter",
      "description": "Returns only voice note messages",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "searchMessagesFilterPhotoAndVideo",
      "properties": [],
      "type": "SearchMessagesFilter",
      "description": "Returns only photo and video messages",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "searchMessagesFilterUrl",
      "properties": [],
      "type": "SearchMessagesFilter",
      "description": "Returns only messages containing URLs",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "searchMessagesFilterChatPhoto",
      "properties": [],
      "type": "SearchMessagesFilter",
      "description": "Returns only messages containing chat photos",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "searchMessagesFilterCall",
      "properties": [],
      "type": "SearchMessagesFilter",
      "description": "Returns only call messages",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "searchMessagesFilterMissedCall",
      "properties": [],
      "type": "SearchMessagesFilter",
      "description": "Returns only incoming call messages with missed/declined discard reasons",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "searchMessagesFilterVideoNote",
      "properties": [],
      "type": "SearchMessagesFilter",
      "description": "Returns only video note messages",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "searchMessagesFilterVoiceAndVideoNote",
      "properties": [],
      "type": "SearchMessagesFilter",
      "description": "Returns only voice and video note messages",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "searchMessagesFilterMention",
      "properties": [],
      "type": "SearchMessagesFilter",
      "description": "Returns only messages with mentions of the current user, or messages that are replies to their messages",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "searchMessagesFilterUnreadMention",
      "properties": [],
      "type": "SearchMessagesFilter",
      "description": "Returns only messages with unread mentions of the current user, or messages that are replies to their messages. When using this filter the results can't be additionally filtered by a query or by the sending user",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "chatActionTyping",
      "properties": [],
      "type": "ChatAction",
      "description": "The user is typing a message",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "chatActionRecordingVideo",
      "properties": [],
      "type": "ChatAction",
      "description": "The user is recording a video",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "chatActionUploadingVideo",
      "properties": [
        {
          "name": "progress",
          "type": "int32",
          "nilable": false
        }
      ],
      "type": "ChatAction",
      "description": "The user is uploading a video @progress Upload progress, as a percentage",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "chatActionRecordingVoiceNote",
      "properties": [],
      "type": "ChatAction",
      "description": "The user is recording a voice note",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "chatActionUploadingVoiceNote",
      "properties": [
        {
          "name": "progress",
          "type": "int32",
          "nilable": false
        }
      ],
      "type": "ChatAction",
      "description": "The user is uploading a voice note @progress Upload progress, as a percentage",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "chatActionUploadingPhoto",
      "properties": [
        {
          "name": "progress",
          "type": "int32",
          "nilable": false
        }
      ],
      "type": "ChatAction",
      "description": "The user is uploading a photo @progress Upload progress, as a percentage",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "chatActionUploadingDocument",
      "properties": [
        {
          "name": "progress",
          "type": "int32",
          "nilable": false
        }
      ],
      "type": "ChatAction",
      "description": "The user is uploading a document @progress Upload progress, as a percentage",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "chatActionChoosingLocation",
      "properties": [],
      "type": "ChatAction",
      "description": "The user is picking a location or venue to send",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "chatActionChoosingContact",
      "properties": [],
      "type": "ChatAction",
      "description": "The user is picking a contact to send",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "chatActionStartPlayingGame",
      "properties": [],
      "type": "ChatAction",
      "description": "The user has started to play a game",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "chatActionRecordingVideoNote",
      "properties": [],
      "type": "ChatAction",
      "description": "The user is recording a video note",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "chatActionUploadingVideoNote",
      "properties": [
        {
          "name": "progress",
          "type": "int32",
          "nilable": false
        }
      ],
      "type": "ChatAction",
      "description": "The user is uploading a video note @progress Upload progress, as a percentage",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "chatActionCancel",
      "properties": [],
      "type": "ChatAction",
      "description": "The user has cancelled the previous action",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "userStatusEmpty",
      "properties": [],
      "type": "UserStatus",
      "description": "The user status was never changed",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "userStatusOnline",
      "properties": [
        {
          "name": "expires",
          "type": "int32",
          "nilable": false
        }
      ],
      "type": "UserStatus",
      "description": "The user is online @expires Point in time (Unix timestamp) when the user's online status will expire",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "userStatusOffline",
      "properties": [
        {
          "name": "was_online",
          "type": "int32",
          "nilable": false
        }
      ],
      "type": "UserStatus",
      "description": "The user is offline @was_online Point in time (Unix timestamp) when the user was last online",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "userStatusRecently",
      "properties": [],
      "type": "UserStatus",
      "description": "The user was online recently",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "userStatusLastWeek",
      "properties": [],
      "type": "UserStatus",
      "description": "The user is offline, but was online last week",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "userStatusLastMonth",
      "properties": [],
      "type": "UserStatus",
      "description": "The user is offline, but was online last month",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "callDiscardReasonEmpty",
      "properties": [],
      "type": "CallDiscardReason",
      "description": "The call wasn't discarded, or the reason is unknown",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "callDiscardReasonMissed",
      "properties": [],
      "type": "CallDiscardReason",
      "description": "The call was ended before the conversation started. It was cancelled by the caller or missed by the other party",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "callDiscardReasonDeclined",
      "properties": [],
      "type": "CallDiscardReason",
      "description": "The call was ended before the conversation started. It was declined by the other party",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "callDiscardReasonDisconnected",
      "properties": [],
      "type": "CallDiscardReason",
      "description": "The call was ended during the conversation because the users were disconnected",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "callDiscardReasonHungUp",
      "properties": [],
      "type": "CallDiscardReason",
      "description": "The call was ended because one of the parties hung up",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "callStatePending",
      "properties": [
        {
          "name": "is_created",
          "type": "Bool",
          "nilable": false
        },
        {
          "name": "is_received",
          "type": "Bool",
          "nilable": false
        }
      ],
      "type": "CallState",
      "description": "The call is pending, waiting to be accepted by a user @is_created True, if the call has already been created by the server @is_received True, if the call has already been received by the other party",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "callStateExchangingKeys",
      "properties": [],
      "type": "CallState",
      "description": "The call has been answered and encryption keys are being exchanged",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "callStateReady",
      "properties": [
        {
          "name": "protocol",
          "type": "callProtocol",
          "nilable": false
        },
        {
          "name": "connections",
          "type": "vector<callConnection>",
          "nilable": false
        },
        {
          "name": "config",
          "type": "string",
          "nilable": false
        },
        {
          "name": "encryption_key",
          "type": "bytes",
          "nilable": false
        },
        {
          "name": "emojis",
          "type": "vector<string>",
          "nilable": false
        },
        {
          "name": "allow_p2p",
          "type": "Bool",
          "nilable": false
        }
      ],
      "type": "CallState",
      "description": "The call is ready to use @protocol Call protocols supported by the peer @connections Available UDP reflectors @config A JSON-encoded call config @encryption_key Call encryption key @emojis Encryption key emojis fingerprint @allow_p2p True, if peer-to-peer connection is allowed by users privacy settings",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "callStateHangingUp",
      "properties": [],
      "type": "CallState",
      "description": "The call is hanging up after discardCall has been called",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "callStateDiscarded",
      "properties": [
        {
          "name": "reason",
          "type": "CallDiscardReason",
          "nilable": false
        },
        {
          "name": "need_rating",
          "type": "Bool",
          "nilable": false
        },
        {
          "name": "need_debug_information",
          "type": "Bool",
          "nilable": false
        }
      ],
      "type": "CallState",
      "description": "The call has ended successfully @reason The reason, why the call has ended @need_rating True, if the call rating should be sent to the server @need_debug_information True, if the call debug information should be sent to the server",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "callStateError",
      "properties": [
        {
          "name": "error",
          "type": "error",
          "nilable": false
        }
      ],
      "type": "CallState",
      "description": "The call has ended with an error @error Error. An error with the code 4005000 will be returned if an outgoing call is missed because of an expired timeout",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "callProblemEcho",
      "properties": [],
      "type": "CallProblem",
      "description": "The user heard their own voice",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "callProblemNoise",
      "properties": [],
      "type": "CallProblem",
      "description": "The user heard background noise",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "callProblemInterruptions",
      "properties": [],
      "type": "CallProblem",
      "description": "The other side kept disappearing",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "callProblemDistortedSpeech",
      "properties": [],
      "type": "CallProblem",
      "description": "The speech was distorted",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "callProblemSilentLocal",
      "properties": [],
      "type": "CallProblem",
      "description": "The user couldn't hear the other side",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "callProblemSilentRemote",
      "properties": [],
      "type": "CallProblem",
      "description": "The other side couldn't hear the user",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "callProblemDropped",
      "properties": [],
      "type": "CallProblem",
      "description": "The call ended unexpectedly",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "inputInlineQueryResultAnimatedGif",
      "properties": [
        {
          "name": "id",
          "type": "string",
          "nilable": false
        },
        {
          "name": "title",
          "type": "string",
          "nilable": false
        },
        {
          "name": "thumbnail_url",
          "type": "string",
          "nilable": false
        },
        {
          "name": "gif_url",
          "type": "string",
          "description": "The URL of the GIF-file (file size must not exceed 1MB) @gif_duration Duration of the GIF, in seconds @gif_width Width of the GIF @gif_height Height of the GIF",
          "nilable": false
        },
        {
          "name": "gif_duration",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "gif_width",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "gif_height",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "reply_markup",
          "type": "ReplyMarkup",
          "description": "The message reply markup. Must be of type replyMarkupInlineKeyboard or null",
          "nilable": false
        },
        {
          "name": "input_message_content",
          "type": "InputMessageContent",
          "description": "The content of the message to be sent. Must be one of the following types: InputMessageText, InputMessageAnimation, InputMessageLocation, InputMessageVenue or InputMessageContact",
          "nilable": false
        }
      ],
      "type": "InputInlineQueryResult",
      "description": "Represents a link to an animated GIF @id Unique identifier of the query result @title Title of the query result @thumbnail_url URL of the static result thumbnail (JPEG or GIF), if it exists",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "string",
      "properties": [
        {
          "name": "title",
          "type": "string",
          "nilable": false
        },
        {
          "name": "thumbnail_url",
          "type": "string",
          "nilable": false
        },
        {
          "name": "mpeg4_url",
          "type": "string",
          "description": "The URL of the MPEG4-file (file size must not exceed 1MB) @mpeg4_duration Duration of the video, in seconds @mpeg4_width Width of the video @mpeg4_height Height of the video",
          "nilable": false
        },
        {
          "name": "mpeg4_duration",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "mpeg4_width",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "mpeg4_height",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "reply_markup",
          "type": "ReplyMarkup",
          "description": "The message reply markup. Must be of type replyMarkupInlineKeyboard or null",
          "nilable": false
        },
        {
          "name": "input_message_content",
          "type": "InputMessageContent",
          "description": "The content of the message to be sent. Must be one of the following types: InputMessageText, InputMessageAnimation, InputMessageLocation, InputMessageVenue or InputMessageContact",
          "nilable": false
        }
      ],
      "type": "InputInlineQueryResult",
      "description": "Represents a link to an animated (i.e. without sound) H.264/MPEG-4 AVC video @id Unique identifier of the query result @title Title of the result @thumbnail_url URL of the static result thumbnail (JPEG or GIF), if it exists",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "inputInlineQueryResultArticle",
      "properties": [
        {
          "name": "id",
          "type": "string",
          "nilable": false
        },
        {
          "name": "url",
          "type": "string",
          "nilable": false
        },
        {
          "name": "hide_url",
          "type": "Bool",
          "nilable": false
        },
        {
          "name": "title",
          "type": "string",
          "nilable": false
        },
        {
          "name": "description",
          "type": "string",
          "description": "Represents a link to an article or web page @id Unique identifier of the query result @url URL of the result, if it exists @hide_url True, if the URL must be not shown @title Title of the result",
          "nilable": false
        },
        {
          "name": "thumbnail_url",
          "type": "string",
          "nilable": false
        },
        {
          "name": "thumbnail_width",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "thumbnail_height",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "reply_markup",
          "type": "ReplyMarkup",
          "description": "The message reply markup. Must be of type replyMarkupInlineKeyboard or null",
          "nilable": false
        },
        {
          "name": "input_message_content",
          "type": "InputMessageContent",
          "description": "The content of the message to be sent. Must be one of the following types: InputMessageText, InputMessageLocation, InputMessageVenue or InputMessageContact",
          "nilable": false
        }
      ],
      "type": "InputInlineQueryResult",
      "description": "Represents a link to an article or web page @id Unique identifier of the query result @url URL of the result, if it exists @hide_url True, if the URL must be not shown @title Title of the result",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "inputInlineQueryResultAudio",
      "properties": [
        {
          "name": "id",
          "type": "string",
          "nilable": false
        },
        {
          "name": "title",
          "type": "string",
          "nilable": false
        },
        {
          "name": "performer",
          "type": "string",
          "nilable": false
        },
        {
          "name": "audio_url",
          "type": "string",
          "description": "The URL of the audio file @audio_duration Audio file duration, in seconds",
          "nilable": false
        },
        {
          "name": "audio_duration",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "reply_markup",
          "type": "ReplyMarkup",
          "description": "The message reply markup. Must be of type replyMarkupInlineKeyboard or null",
          "nilable": false
        },
        {
          "name": "input_message_content",
          "type": "InputMessageContent",
          "description": "The content of the message to be sent. Must be one of the following types: InputMessageText, InputMessageAudio, InputMessageLocation, InputMessageVenue or InputMessageContact",
          "nilable": false
        }
      ],
      "type": "InputInlineQueryResult",
      "description": "Represents a link to an MP3 audio file @id Unique identifier of the query result @title Title of the audio file @performer Performer of the audio file",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "inputInlineQueryResultContact",
      "properties": [
        {
          "name": "id",
          "type": "string",
          "nilable": false
        },
        {
          "name": "contact",
          "type": "contact",
          "nilable": false
        },
        {
          "name": "thumbnail_url",
          "type": "string",
          "nilable": false
        },
        {
          "name": "thumbnail_width",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "thumbnail_height",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "reply_markup",
          "type": "ReplyMarkup",
          "description": "The message reply markup. Must be of type replyMarkupInlineKeyboard or null",
          "nilable": false
        },
        {
          "name": "input_message_content",
          "type": "InputMessageContent",
          "description": "The content of the message to be sent. Must be one of the following types: InputMessageText, InputMessageLocation, InputMessageVenue or InputMessageContact",
          "nilable": false
        }
      ],
      "type": "InputInlineQueryResult",
      "description": "Represents a user contact @id Unique identifier of the query result @contact User contact @thumbnail_url URL of the result thumbnail, if it exists @thumbnail_width Thumbnail width, if known @thumbnail_height Thumbnail height, if known",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "inputInlineQueryResultDocument",
      "properties": [
        {
          "name": "id",
          "type": "string",
          "nilable": false
        },
        {
          "name": "title",
          "type": "string",
          "nilable": false
        },
        {
          "name": "description",
          "type": "string",
          "description": "Represents a link to a file @id Unique identifier of the query result @title Title of the resulting file @param_description Short description of the result, if known @document_url URL of the file @mime_type MIME type of the file content; only \"application/pdf\" and \"application/zip\" are currently allowed",
          "nilable": false
        },
        {
          "name": "document_url",
          "type": "string",
          "nilable": false
        },
        {
          "name": "mime_type",
          "type": "string",
          "nilable": false
        },
        {
          "name": "thumbnail_url",
          "type": "string",
          "description": "The URL of the file thumbnail, if it exists @thumbnail_width Width of the thumbnail @thumbnail_height Height of the thumbnail",
          "nilable": false
        },
        {
          "name": "thumbnail_width",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "thumbnail_height",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "reply_markup",
          "type": "ReplyMarkup",
          "description": "The message reply markup. Must be of type replyMarkupInlineKeyboard or null",
          "nilable": false
        },
        {
          "name": "input_message_content",
          "type": "InputMessageContent",
          "description": "The content of the message to be sent. Must be one of the following types: InputMessageText, InputMessageDocument, InputMessageLocation, InputMessageVenue or InputMessageContact",
          "nilable": false
        }
      ],
      "type": "InputInlineQueryResult",
      "description": "Represents a link to a file @id Unique identifier of the query result @title Title of the resulting file @param_description Short description of the result, if known @document_url URL of the file @mime_type MIME type of the file content; only \"application/pdf\" and \"application/zip\" are currently allowed",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "inputInlineQueryResultGame",
      "properties": [
        {
          "name": "id",
          "type": "string",
          "nilable": false
        },
        {
          "name": "game_short_name",
          "type": "string",
          "nilable": false
        },
        {
          "name": "reply_markup",
          "type": "ReplyMarkup",
          "nilable": false
        }
      ],
      "type": "InputInlineQueryResult",
      "description": "Represents a game @id Unique identifier of the query result @game_short_name Short name of the game @reply_markup Message reply markup. Must be of type replyMarkupInlineKeyboard or null",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "inputInlineQueryResultLocation",
      "properties": [
        {
          "name": "id",
          "type": "string",
          "nilable": false
        },
        {
          "name": "location",
          "type": "location",
          "nilable": false
        },
        {
          "name": "live_period",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "title",
          "type": "string",
          "nilable": false
        },
        {
          "name": "thumbnail_url",
          "type": "string",
          "nilable": false
        },
        {
          "name": "thumbnail_width",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "thumbnail_height",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "reply_markup",
          "type": "ReplyMarkup",
          "description": "The message reply markup. Must be of type replyMarkupInlineKeyboard or null",
          "nilable": false
        },
        {
          "name": "input_message_content",
          "type": "InputMessageContent",
          "description": "The content of the message to be sent. Must be one of the following types: InputMessageText, InputMessageLocation, InputMessageVenue or InputMessageContact",
          "nilable": false
        }
      ],
      "type": "InputInlineQueryResult",
      "description": "Represents a point on the map @id Unique identifier of the query result @location Location result @live_period Amount of time relative to the message sent time until the location can be updated, in seconds @title Title of the result @thumbnail_url URL of the result thumbnail, if it exists @thumbnail_width Thumbnail width, if known @thumbnail_height Thumbnail height, if known",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "inputInlineQueryResultPhoto",
      "properties": [
        {
          "name": "id",
          "type": "string",
          "nilable": false
        },
        {
          "name": "title",
          "type": "string",
          "nilable": false
        },
        {
          "name": "description",
          "type": "string",
          "description": "Represents link to a JPEG image @id Unique identifier of the query result @title Title of the result, if known @param_description A short description of the result, if known @thumbnail_url URL of the photo thumbnail, if it exists",
          "nilable": false
        },
        {
          "name": "thumbnail_url",
          "type": "string",
          "nilable": false
        },
        {
          "name": "photo_url",
          "type": "string",
          "description": "The URL of the JPEG photo (photo size must not exceed 5MB) @photo_width Width of the photo @photo_height Height of the photo",
          "nilable": false
        },
        {
          "name": "photo_width",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "photo_height",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "reply_markup",
          "type": "ReplyMarkup",
          "description": "The message reply markup. Must be of type replyMarkupInlineKeyboard or null",
          "nilable": false
        },
        {
          "name": "input_message_content",
          "type": "InputMessageContent",
          "description": "The content of the message to be sent. Must be one of the following types: InputMessageText, InputMessagePhoto, InputMessageLocation, InputMessageVenue or InputMessageContact",
          "nilable": false
        }
      ],
      "type": "InputInlineQueryResult",
      "description": "Represents link to a JPEG image @id Unique identifier of the query result @title Title of the result, if known @param_description A short description of the result, if known @thumbnail_url URL of the photo thumbnail, if it exists",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "inputInlineQueryResultSticker",
      "properties": [
        {
          "name": "id",
          "type": "string",
          "nilable": false
        },
        {
          "name": "thumbnail_url",
          "type": "string",
          "nilable": false
        },
        {
          "name": "sticker_url",
          "type": "string",
          "description": "The URL of the WEBP or a TGS sticker (sticker file size must not exceed 5MB) @sticker_width Width of the sticker @sticker_height Height of the sticker",
          "nilable": false
        },
        {
          "name": "sticker_width",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "sticker_height",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "reply_markup",
          "type": "ReplyMarkup",
          "description": "The message reply markup. Must be of type replyMarkupInlineKeyboard or null",
          "nilable": false
        },
        {
          "name": "input_message_content",
          "type": "InputMessageContent",
          "description": "The content of the message to be sent. Must be one of the following types: InputMessageText, inputMessageSticker, InputMessageLocation, InputMessageVenue or InputMessageContact",
          "nilable": false
        }
      ],
      "type": "InputInlineQueryResult",
      "description": "Represents a link to a WEBP or a TGS sticker @id Unique identifier of the query result @thumbnail_url URL of the sticker thumbnail, if it exists",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "inputInlineQueryResultVenue",
      "properties": [
        {
          "name": "id",
          "type": "string",
          "nilable": false
        },
        {
          "name": "venue",
          "type": "venue",
          "nilable": false
        },
        {
          "name": "thumbnail_url",
          "type": "string",
          "nilable": false
        },
        {
          "name": "thumbnail_width",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "thumbnail_height",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "reply_markup",
          "type": "ReplyMarkup",
          "description": "The message reply markup. Must be of type replyMarkupInlineKeyboard or null",
          "nilable": false
        },
        {
          "name": "input_message_content",
          "type": "InputMessageContent",
          "description": "The content of the message to be sent. Must be one of the following types: InputMessageText, InputMessageLocation, InputMessageVenue or InputMessageContact",
          "nilable": false
        }
      ],
      "type": "InputInlineQueryResult",
      "description": "Represents information about a venue @id Unique identifier of the query result @venue Venue result @thumbnail_url URL of the result thumbnail, if it exists @thumbnail_width Thumbnail width, if known @thumbnail_height Thumbnail height, if known",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "inputInlineQueryResultVideo",
      "properties": [
        {
          "name": "id",
          "type": "string",
          "nilable": false
        },
        {
          "name": "title",
          "type": "string",
          "nilable": false
        },
        {
          "name": "description",
          "type": "string",
          "description": "Represents a link to a page containing an embedded video player or a video file @id Unique identifier of the query result @title Title of the result @param_description A short description of the result, if known",
          "nilable": false
        },
        {
          "name": "thumbnail_url",
          "type": "string",
          "description": "The URL of the video thumbnail (JPEG), if it exists @video_url URL of the embedded video player or video file @mime_type MIME type of the content of the video URL, only \"text/html\" or \"video/mp4\" are currently supported",
          "nilable": false
        },
        {
          "name": "video_url",
          "type": "string",
          "nilable": false
        },
        {
          "name": "mime_type",
          "type": "string",
          "nilable": false
        },
        {
          "name": "video_width",
          "type": "int32",
          "description": "Width of the video @video_height Height of the video @video_duration Video duration, in seconds",
          "nilable": false
        },
        {
          "name": "video_height",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "video_duration",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "reply_markup",
          "type": "ReplyMarkup",
          "description": "The message reply markup. Must be of type replyMarkupInlineKeyboard or null",
          "nilable": false
        },
        {
          "name": "input_message_content",
          "type": "InputMessageContent",
          "description": "The content of the message to be sent. Must be one of the following types: InputMessageText, InputMessageVideo, InputMessageLocation, InputMessageVenue or InputMessageContact",
          "nilable": false
        }
      ],
      "type": "InputInlineQueryResult",
      "description": "Represents a link to a page containing an embedded video player or a video file @id Unique identifier of the query result @title Title of the result @param_description A short description of the result, if known",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "inputInlineQueryResultVoiceNote",
      "properties": [
        {
          "name": "id",
          "type": "string",
          "nilable": false
        },
        {
          "name": "title",
          "type": "string",
          "nilable": false
        },
        {
          "name": "voice_note_url",
          "type": "string",
          "description": "The URL of the voice note file @voice_note_duration Duration of the voice note, in seconds",
          "nilable": false
        },
        {
          "name": "voice_note_duration",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "reply_markup",
          "type": "ReplyMarkup",
          "description": "The message reply markup. Must be of type replyMarkupInlineKeyboard or null",
          "nilable": false
        },
        {
          "name": "input_message_content",
          "type": "InputMessageContent",
          "description": "The content of the message to be sent. Must be one of the following types: InputMessageText, InputMessageVoiceNote, InputMessageLocation, InputMessageVenue or InputMessageContact",
          "nilable": false
        }
      ],
      "type": "InputInlineQueryResult",
      "description": "Represents a link to an opus-encoded audio file within an OGG container, single channel audio @id Unique identifier of the query result @title Title of the voice note",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "inlineQueryResultArticle",
      "properties": [
        {
          "name": "id",
          "type": "string",
          "nilable": false
        },
        {
          "name": "url",
          "type": "string",
          "nilable": false
        },
        {
          "name": "hide_url",
          "type": "Bool",
          "nilable": false
        },
        {
          "name": "title",
          "type": "string",
          "nilable": false
        },
        {
          "name": "description",
          "type": "string",
          "description": "Represents a link to an article or web page @id Unique identifier of the query result @url URL of the result, if it exists @hide_url True, if the URL must be not shown @title Title of the result",
          "nilable": false
        },
        {
          "name": "thumbnail",
          "type": "photoSize",
          "nilable": false
        }
      ],
      "type": "InlineQueryResult",
      "description": "Represents a link to an article or web page @id Unique identifier of the query result @url URL of the result, if it exists @hide_url True, if the URL must be not shown @title Title of the result",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "inlineQueryResultContact",
      "properties": [
        {
          "name": "id",
          "type": "string",
          "nilable": false
        },
        {
          "name": "contact",
          "type": "contact",
          "nilable": false
        },
        {
          "name": "thumbnail",
          "type": "photoSize",
          "nilable": false
        }
      ],
      "type": "InlineQueryResult",
      "description": "Represents a user contact @id Unique identifier of the query result @contact A user contact @thumbnail Result thumbnail; may be null",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "inlineQueryResultLocation",
      "properties": [
        {
          "name": "id",
          "type": "string",
          "nilable": false
        },
        {
          "name": "location",
          "type": "location",
          "nilable": false
        },
        {
          "name": "title",
          "type": "string",
          "nilable": false
        },
        {
          "name": "thumbnail",
          "type": "photoSize",
          "nilable": false
        }
      ],
      "type": "InlineQueryResult",
      "description": "Represents a point on the map @id Unique identifier of the query result @location Location result @title Title of the result @thumbnail Result thumbnail; may be null",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "inlineQueryResultVenue",
      "properties": [
        {
          "name": "id",
          "type": "string",
          "nilable": false
        },
        {
          "name": "venue",
          "type": "venue",
          "nilable": false
        },
        {
          "name": "thumbnail",
          "type": "photoSize",
          "nilable": false
        }
      ],
      "type": "InlineQueryResult",
      "description": "Represents information about a venue @id Unique identifier of the query result @venue Venue result @thumbnail Result thumbnail; may be null",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "inlineQueryResultGame",
      "properties": [
        {
          "name": "id",
          "type": "string",
          "nilable": false
        },
        {
          "name": "game",
          "type": "game",
          "nilable": false
        }
      ],
      "type": "InlineQueryResult",
      "description": "Represents information about a game @id Unique identifier of the query result @game Game result",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "inlineQueryResultAnimation",
      "properties": [
        {
          "name": "id",
          "type": "string",
          "nilable": false
        },
        {
          "name": "animation",
          "type": "animation",
          "nilable": false
        },
        {
          "name": "title",
          "type": "string",
          "nilable": false
        }
      ],
      "type": "InlineQueryResult",
      "description": "Represents an animation file @id Unique identifier of the query result @animation Animation file @title Animation title",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "inlineQueryResultAudio",
      "properties": [
        {
          "name": "id",
          "type": "string",
          "nilable": false
        },
        {
          "name": "audio",
          "type": "audio",
          "nilable": false
        }
      ],
      "type": "InlineQueryResult",
      "description": "Represents an audio file @id Unique identifier of the query result @audio Audio file",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "inlineQueryResultDocument",
      "properties": [
        {
          "name": "id",
          "type": "string",
          "nilable": false
        },
        {
          "name": "document",
          "type": "document",
          "nilable": false
        },
        {
          "name": "title",
          "type": "string",
          "nilable": false
        },
        {
          "name": "description",
          "type": "string",
          "description": "Represents a document @id Unique identifier of the query result @document Document @title Document title @param_description Document description",
          "nilable": false
        }
      ],
      "type": "InlineQueryResult",
      "description": "Represents a document @id Unique identifier of the query result @document Document @title Document title @param_description Document description",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "inlineQueryResultPhoto",
      "properties": [
        {
          "name": "id",
          "type": "string",
          "nilable": false
        },
        {
          "name": "photo",
          "type": "photo",
          "nilable": false
        },
        {
          "name": "title",
          "type": "string",
          "nilable": false
        },
        {
          "name": "description",
          "type": "string",
          "description": "Represents a photo @id Unique identifier of the query result @photo Photo @title Title of the result, if known @param_description A short description of the result, if known",
          "nilable": false
        }
      ],
      "type": "InlineQueryResult",
      "description": "Represents a photo @id Unique identifier of the query result @photo Photo @title Title of the result, if known @param_description A short description of the result, if known",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "inlineQueryResultSticker",
      "properties": [
        {
          "name": "id",
          "type": "string",
          "nilable": false
        },
        {
          "name": "sticker",
          "type": "sticker",
          "nilable": false
        }
      ],
      "type": "InlineQueryResult",
      "description": "Represents a sticker @id Unique identifier of the query result @sticker Sticker",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "inlineQueryResultVideo",
      "properties": [
        {
          "name": "id",
          "type": "string",
          "nilable": false
        },
        {
          "name": "video",
          "type": "video",
          "nilable": false
        },
        {
          "name": "title",
          "type": "string",
          "nilable": false
        },
        {
          "name": "description",
          "type": "string",
          "description": "Represents a video @id Unique identifier of the query result @video Video @title Title of the video @param_description Description of the video",
          "nilable": false
        }
      ],
      "type": "InlineQueryResult",
      "description": "Represents a video @id Unique identifier of the query result @video Video @title Title of the video @param_description Description of the video",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "inlineQueryResultVoiceNote",
      "properties": [
        {
          "name": "id",
          "type": "string",
          "nilable": false
        },
        {
          "name": "voice_note",
          "type": "voiceNote",
          "nilable": false
        },
        {
          "name": "title",
          "type": "string",
          "nilable": false
        }
      ],
      "type": "InlineQueryResult",
      "description": "Represents a voice note @id Unique identifier of the query result @voice_note Voice note @title Title of the voice note",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "callbackQueryPayloadData",
      "properties": [
        {
          "name": "data",
          "type": "bytes",
          "nilable": false
        }
      ],
      "type": "CallbackQueryPayload",
      "description": "The payload from a general callback button @data Data that was attached to the callback button",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "callbackQueryPayloadGame",
      "properties": [
        {
          "name": "game_short_name",
          "type": "string",
          "nilable": false
        }
      ],
      "type": "CallbackQueryPayload",
      "description": "The payload from a game callback button @game_short_name A short name of the game that was attached to the callback button",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "chatEventMessageEdited",
      "properties": [
        {
          "name": "old_message",
          "type": "message",
          "nilable": false
        },
        {
          "name": "new_message",
          "type": "message",
          "nilable": false
        }
      ],
      "type": "ChatEventAction",
      "description": "A message was edited @old_message The original message before the edit @new_message The message after it was edited",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "chatEventMessageDeleted",
      "properties": [
        {
          "name": "message",
          "type": "message",
          "nilable": false
        }
      ],
      "type": "ChatEventAction",
      "description": "A message was deleted @message Deleted message",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "chatEventPollStopped",
      "properties": [
        {
          "name": "message",
          "type": "message",
          "nilable": false
        }
      ],
      "type": "ChatEventAction",
      "description": "A poll in a message was stopped @message The message with the poll",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "chatEventMessagePinned",
      "properties": [
        {
          "name": "message",
          "type": "message",
          "nilable": false
        }
      ],
      "type": "ChatEventAction",
      "description": "A message was pinned @message Pinned message",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "chatEventMessageUnpinned",
      "properties": [],
      "type": "ChatEventAction",
      "description": "A message was unpinned",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "chatEventMemberJoined",
      "properties": [],
      "type": "ChatEventAction",
      "description": "A new member joined the chat",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "chatEventMemberLeft",
      "properties": [],
      "type": "ChatEventAction",
      "description": "A member left the chat",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "chatEventMemberInvited",
      "properties": [
        {
          "name": "user_id",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "status",
          "type": "ChatMemberStatus",
          "nilable": false
        }
      ],
      "type": "ChatEventAction",
      "description": "A new chat member was invited @user_id New member user identifier @status New member status",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "chatEventMemberPromoted",
      "properties": [
        {
          "name": "user_id",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "old_status",
          "type": "ChatMemberStatus",
          "nilable": false
        },
        {
          "name": "new_status",
          "type": "ChatMemberStatus",
          "nilable": false
        }
      ],
      "type": "ChatEventAction",
      "description": "A chat member has gained/lost administrator status, or the list of their administrator privileges has changed @user_id Chat member user identifier @old_status Previous status of the chat member @new_status New status of the chat member",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "chatEventMemberRestricted",
      "properties": [
        {
          "name": "user_id",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "old_status",
          "type": "ChatMemberStatus",
          "nilable": false
        },
        {
          "name": "new_status",
          "type": "ChatMemberStatus",
          "nilable": false
        }
      ],
      "type": "ChatEventAction",
      "description": "A chat member was restricted/unrestricted or banned/unbanned, or the list of their restrictions has changed @user_id Chat member user identifier @old_status Previous status of the chat member @new_status New status of the chat member",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "chatEventTitleChanged",
      "properties": [
        {
          "name": "old_title",
          "type": "string",
          "nilable": false
        },
        {
          "name": "new_title",
          "type": "string",
          "nilable": false
        }
      ],
      "type": "ChatEventAction",
      "description": "The chat title was changed @old_title Previous chat title @new_title New chat title",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "chatEventPermissionsChanged",
      "properties": [
        {
          "name": "old_permissions",
          "type": "chatPermissions",
          "nilable": false
        },
        {
          "name": "new_permissions",
          "type": "chatPermissions",
          "nilable": false
        }
      ],
      "type": "ChatEventAction",
      "description": "The chat permissions was changed @old_permissions Previous chat permissions @new_permissions New chat permissions",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "chatEventDescriptionChanged",
      "properties": [
        {
          "name": "old_description",
          "type": "string",
          "nilable": false
        },
        {
          "name": "new_description",
          "type": "string",
          "nilable": false
        }
      ],
      "type": "ChatEventAction",
      "description": "The chat description was changed @old_description Previous chat description @new_description New chat description",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "chatEventUsernameChanged",
      "properties": [
        {
          "name": "old_username",
          "type": "string",
          "nilable": false
        },
        {
          "name": "new_username",
          "type": "string",
          "nilable": false
        }
      ],
      "type": "ChatEventAction",
      "description": "The chat username was changed @old_username Previous chat username @new_username New chat username",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "chatEventPhotoChanged",
      "properties": [
        {
          "name": "old_photo",
          "type": "photo",
          "nilable": false
        },
        {
          "name": "new_photo",
          "type": "photo",
          "nilable": false
        }
      ],
      "type": "ChatEventAction",
      "description": "The chat photo was changed @old_photo Previous chat photo value; may be null @new_photo New chat photo value; may be null",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "chatEventInvitesToggled",
      "properties": [
        {
          "name": "can_invite_users",
          "type": "Bool",
          "nilable": false
        }
      ],
      "type": "ChatEventAction",
      "description": "The can_invite_users permission of a supergroup chat was toggled @can_invite_users New value of can_invite_users permission",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "chatEventSignMessagesToggled",
      "properties": [
        {
          "name": "sign_messages",
          "type": "Bool",
          "nilable": false
        }
      ],
      "type": "ChatEventAction",
      "description": "The sign_messages setting of a channel was toggled @sign_messages New value of sign_messages",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "chatEventStickerSetChanged",
      "properties": [
        {
          "name": "old_sticker_set_id",
          "type": "int64",
          "nilable": false
        },
        {
          "name": "new_sticker_set_id",
          "type": "int64",
          "nilable": false
        }
      ],
      "type": "ChatEventAction",
      "description": "The supergroup sticker set was changed @old_sticker_set_id Previous identifier of the chat sticker set; 0 if none @new_sticker_set_id New identifier of the chat sticker set; 0 if none",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "chatEventIsAllHistoryAvailableToggled",
      "properties": [
        {
          "name": "is_all_history_available",
          "type": "Bool",
          "nilable": false
        }
      ],
      "type": "ChatEventAction",
      "description": "The is_all_history_available setting of a supergroup was toggled @is_all_history_available New value of is_all_history_available",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "languagePackStringValueOrdinary",
      "properties": [
        {
          "name": "value",
          "type": "string",
          "nilable": false
        }
      ],
      "type": "LanguagePackStringValue",
      "description": "An ordinary language pack string @value String value",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "languagePackStringValuePluralized",
      "properties": [
        {
          "name": "zero_value",
          "type": "string",
          "description": "Value for zero objects @one_value Value for one object @two_value Value for two objects",
          "nilable": false
        },
        {
          "name": "one_value",
          "type": "string",
          "nilable": false
        },
        {
          "name": "two_value",
          "type": "string",
          "nilable": false
        },
        {
          "name": "few_value",
          "type": "string",
          "description": "Value for few objects @many_value Value for many objects @other_value Default value",
          "nilable": false
        },
        {
          "name": "many_value",
          "type": "string",
          "nilable": false
        },
        {
          "name": "other_value",
          "type": "string",
          "nilable": false
        }
      ],
      "type": "LanguagePackStringValue",
      "description": "A language pack string which has different forms based on the number of some object it mentions. See https://www.unicode.org/cldr/charts/latest/supplemental/language_plural_rules.html for more info",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "languagePackStringValueDeleted",
      "properties": [],
      "type": "LanguagePackStringValue",
      "description": "A deleted language pack string, the value should be taken from the built-in english language pack",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "deviceTokenFirebaseCloudMessaging",
      "properties": [
        {
          "name": "token",
          "type": "string",
          "nilable": false
        },
        {
          "name": "encrypt",
          "type": "Bool",
          "nilable": false
        }
      ],
      "type": "DeviceToken",
      "description": "A token for Firebase Cloud Messaging @token Device registration token; may be empty to de-register a device @encrypt True, if push notifications should be additionally encrypted",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "deviceTokenApplePush",
      "properties": [
        {
          "name": "device_token",
          "type": "string",
          "nilable": false
        },
        {
          "name": "is_app_sandbox",
          "type": "Bool",
          "nilable": false
        }
      ],
      "type": "DeviceToken",
      "description": "A token for Apple Push Notification service @device_token Device token; may be empty to de-register a device @is_app_sandbox True, if App Sandbox is enabled",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "deviceTokenApplePushVoIP",
      "properties": [
        {
          "name": "device_token",
          "type": "string",
          "nilable": false
        },
        {
          "name": "is_app_sandbox",
          "type": "Bool",
          "nilable": false
        },
        {
          "name": "encrypt",
          "type": "Bool",
          "nilable": false
        }
      ],
      "type": "DeviceToken",
      "description": "A token for Apple Push Notification service VoIP notifications @device_token Device token; may be empty to de-register a device @is_app_sandbox True, if App Sandbox is enabled @encrypt True, if push notifications should be additionally encrypted",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "deviceTokenWindowsPush",
      "properties": [
        {
          "name": "access_token",
          "type": "string",
          "nilable": false
        }
      ],
      "type": "DeviceToken",
      "description": "A token for Windows Push Notification Services @access_token The access token that will be used to send notifications; may be empty to de-register a device",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "deviceTokenMicrosoftPush",
      "properties": [
        {
          "name": "channel_uri",
          "type": "string",
          "nilable": false
        }
      ],
      "type": "DeviceToken",
      "description": "A token for Microsoft Push Notification Service @channel_uri Push notification channel URI; may be empty to de-register a device",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "deviceTokenMicrosoftPushVoIP",
      "properties": [
        {
          "name": "channel_uri",
          "type": "string",
          "nilable": false
        }
      ],
      "type": "DeviceToken",
      "description": "A token for Microsoft Push Notification Service VoIP channel @channel_uri Push notification channel URI; may be empty to de-register a device",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "deviceTokenWebPush",
      "properties": [
        {
          "name": "endpoint",
          "type": "string",
          "nilable": false
        },
        {
          "name": "p256dh_base64url",
          "type": "string",
          "description": "Base64url-encoded P-256 elliptic curve Diffie-Hellman public key @auth_base64url Base64url-encoded authentication secret",
          "nilable": false
        },
        {
          "name": "auth_base64url",
          "type": "string",
          "nilable": false
        }
      ],
      "type": "DeviceToken",
      "description": "A token for web Push API @endpoint Absolute URL exposed by the push service where the application server can send push messages; may be empty to de-register a device",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "deviceTokenSimplePush",
      "properties": [
        {
          "name": "endpoint",
          "type": "string",
          "nilable": false
        }
      ],
      "type": "DeviceToken",
      "description": "A token for Simple Push API for Firefox OS @endpoint Absolute URL exposed by the push service where the application server can send push messages; may be empty to de-register a device",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "deviceTokenUbuntuPush",
      "properties": [
        {
          "name": "token",
          "type": "string",
          "nilable": false
        }
      ],
      "type": "DeviceToken",
      "description": "A token for Ubuntu Push Client service @token Token; may be empty to de-register a device",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "deviceTokenBlackBerryPush",
      "properties": [
        {
          "name": "token",
          "type": "string",
          "nilable": false
        }
      ],
      "type": "DeviceToken",
      "description": "A token for BlackBerry Push Service @token Token; may be empty to de-register a device",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "deviceTokenTizenPush",
      "properties": [
        {
          "name": "reg_id",
          "type": "string",
          "nilable": false
        }
      ],
      "type": "DeviceToken",
      "description": "A token for Tizen Push Service @reg_id Push service registration identifier; may be empty to de-register a device",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "backgroundTypeWallpaper",
      "properties": [
        {
          "name": "is_blurred",
          "type": "Bool",
          "description": "True, if the wallpaper must be downscaled to fit in 450x450 square and then box-blurred with radius 12",
          "nilable": false
        },
        {
          "name": "is_moving",
          "type": "Bool",
          "description": "True, if the background needs to be slightly moved when device is rotated",
          "nilable": false
        }
      ],
      "type": "BackgroundType",
      "description": "A wallpaper in JPEG format",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "backgroundTypePattern",
      "properties": [
        {
          "name": "is_moving",
          "type": "Bool",
          "description": "True, if the background needs to be slightly moved when device is rotated",
          "nilable": false
        },
        {
          "name": "color",
          "type": "int32",
          "description": "Main color of the background in RGB24 format",
          "nilable": false
        },
        {
          "name": "intensity",
          "type": "int32",
          "description": "Intensity of the pattern when it is shown above the main background color, 0-100",
          "nilable": false
        }
      ],
      "type": "BackgroundType",
      "description": "A PNG pattern to be combined with the color chosen by the user",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "backgroundTypeSolid",
      "properties": [
        {
          "name": "color",
          "type": "int32",
          "nilable": false
        }
      ],
      "type": "BackgroundType",
      "description": "A solid background @color A color of the background in RGB24 format",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "inputBackgroundLocal",
      "properties": [
        {
          "name": "background",
          "type": "InputFile",
          "description": "Background file to use. Only inputFileLocal and inputFileGenerated are supported. The file nust be in JPEG format for wallpapers and in PNG format for patterns",
          "nilable": false
        }
      ],
      "type": "InputBackground",
      "description": "A background from a local file",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "inputBackgroundRemote",
      "properties": [
        {
          "name": "background_id",
          "type": "int64",
          "nilable": false
        }
      ],
      "type": "InputBackground",
      "description": "A background from the server @background_id The background identifier",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "checkChatUsernameResultOk",
      "properties": [],
      "type": "CheckChatUsernameResult",
      "description": "The username can be set",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "checkChatUsernameResultUsernameInvalid",
      "properties": [],
      "type": "CheckChatUsernameResult",
      "description": "The username is invalid",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "checkChatUsernameResultUsernameOccupied",
      "properties": [],
      "type": "CheckChatUsernameResult",
      "description": "The username is occupied",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "checkChatUsernameResultPublicChatsTooMuch",
      "properties": [],
      "type": "CheckChatUsernameResult",
      "description": "The user has too much chats with username, one of them should be made private first",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "checkChatUsernameResultPublicGroupsUnavailable",
      "properties": [],
      "type": "CheckChatUsernameResult",
      "description": "The user can't be a member of a public supergroup",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "pushMessageContentHidden",
      "properties": [
        {
          "name": "is_pinned",
          "type": "Bool",
          "nilable": false
        }
      ],
      "type": "PushMessageContent",
      "description": "A general message with hidden content @is_pinned True, if the message is a pinned message with the specified content",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "pushMessageContentAnimation",
      "properties": [
        {
          "name": "animation",
          "type": "animation",
          "nilable": false
        },
        {
          "name": "caption",
          "type": "string",
          "nilable": false
        },
        {
          "name": "is_pinned",
          "type": "Bool",
          "nilable": false
        }
      ],
      "type": "PushMessageContent",
      "description": "An animation message (GIF-style). @animation Message content; may be null @caption Animation caption @is_pinned True, if the message is a pinned message with the specified content",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "pushMessageContentAudio",
      "properties": [
        {
          "name": "audio",
          "type": "audio",
          "nilable": false
        },
        {
          "name": "is_pinned",
          "type": "Bool",
          "nilable": false
        }
      ],
      "type": "PushMessageContent",
      "description": "An audio message @audio Message content; may be null @is_pinned True, if the message is a pinned message with the specified content",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "pushMessageContentContact",
      "properties": [
        {
          "name": "name",
          "type": "string",
          "nilable": false
        },
        {
          "name": "is_pinned",
          "type": "Bool",
          "nilable": false
        }
      ],
      "type": "PushMessageContent",
      "description": "A message with a user contact @name Contact's name @is_pinned True, if the message is a pinned message with the specified content",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "pushMessageContentContactRegistered",
      "properties": [],
      "type": "PushMessageContent",
      "description": "A contact has registered with Telegram",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "pushMessageContentDocument",
      "properties": [
        {
          "name": "document",
          "type": "document",
          "nilable": false
        },
        {
          "name": "is_pinned",
          "type": "Bool",
          "nilable": false
        }
      ],
      "type": "PushMessageContent",
      "description": "A document message (a general file) @document Message content; may be null @is_pinned True, if the message is a pinned message with the specified content",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "pushMessageContentGame",
      "properties": [
        {
          "name": "title",
          "type": "string",
          "nilable": false
        },
        {
          "name": "is_pinned",
          "type": "Bool",
          "nilable": false
        }
      ],
      "type": "PushMessageContent",
      "description": "A message with a game @title Game title, empty for pinned game message @is_pinned True, if the message is a pinned message with the specified content",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "pushMessageContentGameScore",
      "properties": [
        {
          "name": "title",
          "type": "string",
          "nilable": false
        },
        {
          "name": "score",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "is_pinned",
          "type": "Bool",
          "nilable": false
        }
      ],
      "type": "PushMessageContent",
      "description": "A new high score was achieved in a game @title Game title, empty for pinned message @score New score, 0 for pinned message @is_pinned True, if the message is a pinned message with the specified content",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "pushMessageContentInvoice",
      "properties": [
        {
          "name": "price",
          "type": "string",
          "nilable": false
        },
        {
          "name": "is_pinned",
          "type": "Bool",
          "nilable": false
        }
      ],
      "type": "PushMessageContent",
      "description": "A message with an invoice from a bot @price Product price @is_pinned True, if the message is a pinned message with the specified content",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "pushMessageContentLocation",
      "properties": [
        {
          "name": "is_live",
          "type": "Bool",
          "nilable": false
        },
        {
          "name": "is_pinned",
          "type": "Bool",
          "nilable": false
        }
      ],
      "type": "PushMessageContent",
      "description": "A message with a location @is_live True, if the location is live @is_pinned True, if the message is a pinned message with the specified content",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "pushMessageContentPhoto",
      "properties": [
        {
          "name": "photo",
          "type": "photo",
          "nilable": false
        },
        {
          "name": "caption",
          "type": "string",
          "nilable": false
        },
        {
          "name": "is_secret",
          "type": "Bool",
          "nilable": false
        },
        {
          "name": "is_pinned",
          "type": "Bool",
          "nilable": false
        }
      ],
      "type": "PushMessageContent",
      "description": "A photo message @photo Message content; may be null @caption Photo caption @is_secret True, if the photo is secret @is_pinned True, if the message is a pinned message with the specified content",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "pushMessageContentPoll",
      "properties": [
        {
          "name": "question",
          "type": "string",
          "nilable": false
        },
        {
          "name": "is_pinned",
          "type": "Bool",
          "nilable": false
        }
      ],
      "type": "PushMessageContent",
      "description": "A message with a poll @question Poll question @is_pinned True, if the message is a pinned message with the specified content",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "pushMessageContentScreenshotTaken",
      "properties": [],
      "type": "PushMessageContent",
      "description": "A screenshot of a message in the chat has been taken",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "pushMessageContentSticker",
      "properties": [
        {
          "name": "sticker",
          "type": "sticker",
          "nilable": false
        },
        {
          "name": "emoji",
          "type": "string",
          "nilable": false
        },
        {
          "name": "is_pinned",
          "type": "Bool",
          "nilable": false
        }
      ],
      "type": "PushMessageContent",
      "description": "A message with a sticker @sticker Message content; may be null @emoji Emoji corresponding to the sticker; may be empty @is_pinned True, if the message is a pinned message with the specified content",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "pushMessageContentText",
      "properties": [
        {
          "name": "text",
          "type": "string",
          "nilable": false
        },
        {
          "name": "is_pinned",
          "type": "Bool",
          "nilable": false
        }
      ],
      "type": "PushMessageContent",
      "description": "A text message @text Message text @is_pinned True, if the message is a pinned message with the specified content",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "pushMessageContentVideo",
      "properties": [
        {
          "name": "video",
          "type": "video",
          "nilable": false
        },
        {
          "name": "caption",
          "type": "string",
          "nilable": false
        },
        {
          "name": "is_secret",
          "type": "Bool",
          "nilable": false
        },
        {
          "name": "is_pinned",
          "type": "Bool",
          "nilable": false
        }
      ],
      "type": "PushMessageContent",
      "description": "A video message @video Message content; may be null @caption Video caption @is_secret True, if the video is secret @is_pinned True, if the message is a pinned message with the specified content",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "pushMessageContentVideoNote",
      "properties": [
        {
          "name": "video_note",
          "type": "videoNote",
          "nilable": false
        },
        {
          "name": "is_pinned",
          "type": "Bool",
          "nilable": false
        }
      ],
      "type": "PushMessageContent",
      "description": "A video note message @video_note Message content; may be null @is_pinned True, if the message is a pinned message with the specified content",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "pushMessageContentVoiceNote",
      "properties": [
        {
          "name": "voice_note",
          "type": "voiceNote",
          "nilable": false
        },
        {
          "name": "is_pinned",
          "type": "Bool",
          "nilable": false
        }
      ],
      "type": "PushMessageContent",
      "description": "A voice note message @voice_note Message content; may be null @is_pinned True, if the message is a pinned message with the specified content",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "pushMessageContentBasicGroupChatCreate",
      "properties": [],
      "type": "PushMessageContent",
      "description": "A newly created basic group",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "pushMessageContentChatAddMembers",
      "properties": [
        {
          "name": "member_name",
          "type": "string",
          "nilable": false
        },
        {
          "name": "is_current_user",
          "type": "Bool",
          "nilable": false
        },
        {
          "name": "is_returned",
          "type": "Bool",
          "description": "True, if the user has returned to the group himself",
          "nilable": false
        }
      ],
      "type": "PushMessageContent",
      "description": "New chat members were invited to a group @member_name Name of the added member @is_current_user True, if the current user was added to the group",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "pushMessageContentChatChangePhoto",
      "properties": [],
      "type": "PushMessageContent",
      "description": "A chat photo was edited",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "pushMessageContentChatChangeTitle",
      "properties": [
        {
          "name": "title",
          "type": "string",
          "nilable": false
        }
      ],
      "type": "PushMessageContent",
      "description": "A chat title was edited @title New chat title",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "pushMessageContentChatDeleteMember",
      "properties": [
        {
          "name": "member_name",
          "type": "string",
          "nilable": false
        },
        {
          "name": "is_current_user",
          "type": "Bool",
          "nilable": false
        },
        {
          "name": "is_left",
          "type": "Bool",
          "description": "True, if the user has left the group himself",
          "nilable": false
        }
      ],
      "type": "PushMessageContent",
      "description": "A chat member was deleted @member_name Name of the deleted member @is_current_user True, if the current user was deleted from the group",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "pushMessageContentChatJoinByLink",
      "properties": [],
      "type": "PushMessageContent",
      "description": "A new member joined the chat by invite link",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "pushMessageContentMessageForwards",
      "properties": [
        {
          "name": "total_count",
          "type": "int32",
          "nilable": false
        }
      ],
      "type": "PushMessageContent",
      "description": "A forwarded messages @total_count Number of forwarded messages",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "pushMessageContentMediaAlbum",
      "properties": [
        {
          "name": "total_count",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "has_photos",
          "type": "Bool",
          "nilable": false
        },
        {
          "name": "has_videos",
          "type": "Bool",
          "nilable": false
        }
      ],
      "type": "PushMessageContent",
      "description": "A media album @total_count Number of messages in the album @has_photos True, if the album has at least one photo @has_videos True, if the album has at least one video",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "notificationTypeNewMessage",
      "properties": [
        {
          "name": "message",
          "type": "message",
          "nilable": false
        }
      ],
      "type": "NotificationType",
      "description": "New message was received @message The message",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "notificationTypeNewSecretChat",
      "properties": [],
      "type": "NotificationType",
      "description": "New secret chat was created",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "notificationTypeNewCall",
      "properties": [
        {
          "name": "call_id",
          "type": "int32",
          "nilable": false
        }
      ],
      "type": "NotificationType",
      "description": "New call was received @call_id Call identifier",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "notificationTypeNewPushMessage",
      "properties": [
        {
          "name": "message_id",
          "type": "int53",
          "description": "The message identifier. The message will not be available in the chat history, but the ID can be used in viewMessages and as reply_to_message_id",
          "nilable": false
        },
        {
          "name": "sender_user_id",
          "type": "int32",
          "description": "Sender of the message. Corresponding user may be inaccessible @content Push message content",
          "nilable": false
        },
        {
          "name": "content",
          "type": "PushMessageContent",
          "nilable": false
        }
      ],
      "type": "NotificationType",
      "description": "New message was received through a push notification",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "notificationGroupTypeMessages",
      "properties": [],
      "type": "NotificationGroupType",
      "description": "A group containing notifications of type notificationTypeNewMessage and notificationTypeNewPushMessage with ordinary unread messages",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "notificationGroupTypeMentions",
      "properties": [],
      "type": "NotificationGroupType",
      "description": "A group containing notifications of type notificationTypeNewMessage and notificationTypeNewPushMessage with unread mentions of the current user, replies to their messages, or a pinned message",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "notificationGroupTypeSecretChat",
      "properties": [],
      "type": "NotificationGroupType",
      "description": "A group containing a notification of type notificationTypeNewSecretChat",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "notificationGroupTypeCalls",
      "properties": [],
      "type": "NotificationGroupType",
      "description": "A group containing notifications of type notificationTypeNewCall",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "optionValueBoolean",
      "properties": [
        {
          "name": "value",
          "type": "Bool",
          "nilable": false
        }
      ],
      "type": "OptionValue",
      "description": "Represents a boolean option @value The value of the option",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "optionValueEmpty",
      "properties": [],
      "type": "OptionValue",
      "description": "Represents an unknown option or an option which has a default value",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "optionValueInteger",
      "properties": [
        {
          "name": "value",
          "type": "int32",
          "nilable": false
        }
      ],
      "type": "OptionValue",
      "description": "Represents an integer option @value The value of the option",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "optionValueString",
      "properties": [
        {
          "name": "value",
          "type": "string",
          "nilable": false
        }
      ],
      "type": "OptionValue",
      "description": "Represents a string option @value The value of the option",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "jsonValueNull",
      "properties": [],
      "type": "JsonValue",
      "description": "Represents a null JSON value",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "jsonValueBoolean",
      "properties": [
        {
          "name": "value",
          "type": "Bool",
          "nilable": false
        }
      ],
      "type": "JsonValue",
      "description": "Represents a boolean JSON value @value The value",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "jsonValueNumber",
      "properties": [
        {
          "name": "value",
          "type": "double",
          "nilable": false
        }
      ],
      "type": "JsonValue",
      "description": "Represents a numeric JSON value @value The value",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "jsonValueString",
      "properties": [
        {
          "name": "value",
          "type": "string",
          "nilable": false
        }
      ],
      "type": "JsonValue",
      "description": "Represents a string JSON value @value The value",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "jsonValueArray",
      "properties": [
        {
          "name": "values",
          "type": "vector<JsonValue>",
          "nilable": false
        }
      ],
      "type": "JsonValue",
      "description": "Represents a JSON array @values The list of array elements",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "jsonValueObject",
      "properties": [
        {
          "name": "members",
          "type": "vector<jsonObjectMember>",
          "nilable": false
        }
      ],
      "type": "JsonValue",
      "description": "Represents a JSON object @members The list of object members",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "userPrivacySettingRuleAllowAll",
      "properties": [],
      "type": "UserPrivacySettingRule",
      "description": "A rule to allow all users to do something",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "userPrivacySettingRuleAllowContacts",
      "properties": [],
      "type": "UserPrivacySettingRule",
      "description": "A rule to allow all of a user's contacts to do something",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "userPrivacySettingRuleAllowUsers",
      "properties": [
        {
          "name": "user_ids",
          "type": "vector<int32>",
          "nilable": false
        }
      ],
      "type": "UserPrivacySettingRule",
      "description": "A rule to allow certain specified users to do something @user_ids The user identifiers",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "userPrivacySettingRuleRestrictAll",
      "properties": [],
      "type": "UserPrivacySettingRule",
      "description": "A rule to restrict all users from doing something",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "userPrivacySettingRuleRestrictContacts",
      "properties": [],
      "type": "UserPrivacySettingRule",
      "description": "A rule to restrict all contacts of a user from doing something",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "userPrivacySettingRuleRestrictUsers",
      "properties": [
        {
          "name": "user_ids",
          "type": "vector<int32>",
          "nilable": false
        }
      ],
      "type": "UserPrivacySettingRule",
      "description": "A rule to restrict all specified users from doing something @user_ids The user identifiers",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "userPrivacySettingShowStatus",
      "properties": [],
      "type": "UserPrivacySetting",
      "description": "A privacy setting for managing whether the user's online status is visible",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "userPrivacySettingShowProfilePhoto",
      "properties": [],
      "type": "UserPrivacySetting",
      "description": "A privacy setting for managing whether the user's profile photo is visible",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "userPrivacySettingShowLinkInForwardedMessages",
      "properties": [],
      "type": "UserPrivacySetting",
      "description": "A privacy setting for managing whether a link to the user's account is included in forwarded messages",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "userPrivacySettingAllowChatInvites",
      "properties": [],
      "type": "UserPrivacySetting",
      "description": "A privacy setting for managing whether the user can be invited to chats",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "userPrivacySettingAllowCalls",
      "properties": [],
      "type": "UserPrivacySetting",
      "description": "A privacy setting for managing whether the user can be called",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "userPrivacySettingAllowPeerToPeerCalls",
      "properties": [],
      "type": "UserPrivacySetting",
      "description": "A privacy setting for managing whether peer-to-peer connections can be used for calls",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "chatReportReasonSpam",
      "properties": [],
      "type": "ChatReportReason",
      "description": "The chat contains spam messages",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "chatReportReasonViolence",
      "properties": [],
      "type": "ChatReportReason",
      "description": "The chat promotes violence",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "chatReportReasonPornography",
      "properties": [],
      "type": "ChatReportReason",
      "description": "The chat contains pornographic messages",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "chatReportReasonChildAbuse",
      "properties": [],
      "type": "ChatReportReason",
      "description": "The chat has child abuse related content",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "chatReportReasonCopyright",
      "properties": [],
      "type": "ChatReportReason",
      "description": "The chat contains copyrighted content",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "chatReportReasonCustom",
      "properties": [
        {
          "name": "text",
          "type": "string",
          "nilable": false
        }
      ],
      "type": "ChatReportReason",
      "description": "A custom reason provided by the user @text Report text",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "fileTypeNone",
      "properties": [],
      "type": "FileType",
      "description": "The data is not a file",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "fileTypeAnimation",
      "properties": [],
      "type": "FileType",
      "description": "The file is an animation",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "fileTypeAudio",
      "properties": [],
      "type": "FileType",
      "description": "The file is an audio file",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "fileTypeDocument",
      "properties": [],
      "type": "FileType",
      "description": "The file is a document",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "fileTypePhoto",
      "properties": [],
      "type": "FileType",
      "description": "The file is a photo",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "fileTypeProfilePhoto",
      "properties": [],
      "type": "FileType",
      "description": "The file is a profile photo",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "fileTypeSecret",
      "properties": [],
      "type": "FileType",
      "description": "The file was sent to a secret chat (the file type is not known to the server)",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "fileTypeSecretThumbnail",
      "properties": [],
      "type": "FileType",
      "description": "The file is a thumbnail of a file from a secret chat",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "fileTypeSecure",
      "properties": [],
      "type": "FileType",
      "description": "The file is a file from Secure storage used for storing Telegram Passport files",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "fileTypeSticker",
      "properties": [],
      "type": "FileType",
      "description": "The file is a sticker",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "fileTypeThumbnail",
      "properties": [],
      "type": "FileType",
      "description": "The file is a thumbnail of another file",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "fileTypeUnknown",
      "properties": [],
      "type": "FileType",
      "description": "The file type is not yet known",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "fileTypeVideo",
      "properties": [],
      "type": "FileType",
      "description": "The file is a video",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "fileTypeVideoNote",
      "properties": [],
      "type": "FileType",
      "description": "The file is a video note",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "fileTypeVoiceNote",
      "properties": [],
      "type": "FileType",
      "description": "The file is a voice note",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "fileTypeWallpaper",
      "properties": [],
      "type": "FileType",
      "description": "The file is a wallpaper or a background pattern",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "networkTypeNone",
      "properties": [],
      "type": "NetworkType",
      "description": "The network is not available",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "networkTypeMobile",
      "properties": [],
      "type": "NetworkType",
      "description": "A mobile network",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "networkTypeMobileRoaming",
      "properties": [],
      "type": "NetworkType",
      "description": "A mobile roaming network",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "networkTypeWiFi",
      "properties": [],
      "type": "NetworkType",
      "description": "A Wi-Fi network",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "networkTypeOther",
      "properties": [],
      "type": "NetworkType",
      "description": "A different network type (e.g., Ethernet network)",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "networkStatisticsEntryFile",
      "properties": [
        {
          "name": "file_type",
          "type": "FileType",
          "nilable": false
        },
        {
          "name": "network_type",
          "type": "NetworkType",
          "nilable": false
        },
        {
          "name": "sent_bytes",
          "type": "int53",
          "description": "Total number of bytes sent @received_bytes Total number of bytes received",
          "nilable": false
        },
        {
          "name": "received_bytes",
          "type": "int53",
          "nilable": false
        }
      ],
      "type": "NetworkStatisticsEntry",
      "description": "Contains information about the total amount of data that was used to send and receive files @file_type Type of the file the data is part of @network_type Type of the network the data was sent through. Call setNetworkType to maintain the actual network type",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "networkStatisticsEntryCall",
      "properties": [
        {
          "name": "network_type",
          "type": "NetworkType",
          "nilable": false
        },
        {
          "name": "sent_bytes",
          "type": "int53",
          "description": "Total number of bytes sent @received_bytes Total number of bytes received @duration Total call duration, in seconds",
          "nilable": false
        },
        {
          "name": "received_bytes",
          "type": "int53",
          "nilable": false
        },
        {
          "name": "duration",
          "type": "double",
          "nilable": false
        }
      ],
      "type": "NetworkStatisticsEntry",
      "description": "Contains information about the total amount of data that was used for calls @network_type Type of the network the data was sent through. Call setNetworkType to maintain the actual network type",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "connectionStateWaitingForNetwork",
      "properties": [],
      "type": "ConnectionState",
      "description": "Currently waiting for the network to become available. Use setNetworkType to change the available network type",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "connectionStateConnectingToProxy",
      "properties": [],
      "type": "ConnectionState",
      "description": "Currently establishing a connection with a proxy server",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "connectionStateConnecting",
      "properties": [],
      "type": "ConnectionState",
      "description": "Currently establishing a connection to the Telegram servers",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "connectionStateUpdating",
      "properties": [],
      "type": "ConnectionState",
      "description": "Downloading data received while the client was offline",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "connectionStateReady",
      "properties": [],
      "type": "ConnectionState",
      "description": "There is a working connection to the Telegram servers",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "topChatCategoryUsers",
      "properties": [],
      "type": "TopChatCategory",
      "description": "A category containing frequently used private chats with non-bot users",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "topChatCategoryBots",
      "properties": [],
      "type": "TopChatCategory",
      "description": "A category containing frequently used private chats with bot users",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "topChatCategoryGroups",
      "properties": [],
      "type": "TopChatCategory",
      "description": "A category containing frequently used basic groups and supergroups",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "topChatCategoryChannels",
      "properties": [],
      "type": "TopChatCategory",
      "description": "A category containing frequently used channels",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "topChatCategoryInlineBots",
      "properties": [],
      "type": "TopChatCategory",
      "description": "A category containing frequently used chats with inline bots sorted by their usage in inline mode",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "topChatCategoryCalls",
      "properties": [],
      "type": "TopChatCategory",
      "description": "A category containing frequently used chats used for calls",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "tMeUrlTypeUser",
      "properties": [
        {
          "name": "user_id",
          "type": "int32",
          "nilable": false
        }
      ],
      "type": "TMeUrlType",
      "description": "A URL linking to a user @user_id Identifier of the user",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "tMeUrlTypeSupergroup",
      "properties": [
        {
          "name": "supergroup_id",
          "type": "int53",
          "nilable": false
        }
      ],
      "type": "TMeUrlType",
      "description": "A URL linking to a public supergroup or channel @supergroup_id Identifier of the supergroup or channel",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "tMeUrlTypeChatInvite",
      "properties": [
        {
          "name": "info",
          "type": "chatInviteLinkInfo",
          "nilable": false
        }
      ],
      "type": "TMeUrlType",
      "description": "A chat invite link @info Chat invite link info",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "tMeUrlTypeStickerSet",
      "properties": [
        {
          "name": "sticker_set_id",
          "type": "int64",
          "nilable": false
        }
      ],
      "type": "TMeUrlType",
      "description": "A URL linking to a sticker set @sticker_set_id Identifier of the sticker set",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "textParseModeMarkdown",
      "properties": [],
      "type": "TextParseMode",
      "description": "The text should be parsed in markdown-style",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "textParseModeHTML",
      "properties": [],
      "type": "TextParseMode",
      "description": "The text should be parsed in HTML-style",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "string",
      "properties": [
        {
          "name": "password",
          "type": "string",
          "nilable": false
        }
      ],
      "type": "ProxyType",
      "description": "A SOCKS5 proxy server @username Username for logging in; may be empty @password Password for logging in; may be empty",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "proxyTypeHttp",
      "properties": [
        {
          "name": "username",
          "type": "string",
          "nilable": false
        },
        {
          "name": "password",
          "type": "string",
          "nilable": false
        },
        {
          "name": "http_only",
          "type": "Bool",
          "nilable": false
        }
      ],
      "type": "ProxyType",
      "description": "A HTTP transparent proxy server @username Username for logging in; may be empty @password Password for logging in; may be empty @http_only Pass true, if the proxy supports only HTTP requests and doesn't support transparent TCP connections via HTTP CONNECT method",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "proxyTypeMtproto",
      "properties": [
        {
          "name": "secret",
          "type": "string",
          "nilable": false
        }
      ],
      "type": "ProxyType",
      "description": "An MTProto proxy server @secret The proxy's secret in hexadecimal encoding",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "updateAuthorizationState",
      "properties": [
        {
          "name": "authorization_state",
          "type": "AuthorizationState",
          "nilable": false
        }
      ],
      "type": "Update",
      "description": "The user authorization state has changed @authorization_state New authorization state",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "updateNewMessage",
      "properties": [
        {
          "name": "message",
          "type": "message",
          "nilable": false
        }
      ],
      "type": "Update",
      "description": "A new message was received; can also be an outgoing message @message The new message",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "updateMessageSendAcknowledged",
      "properties": [
        {
          "name": "chat_id",
          "type": "int53",
          "description": "The chat identifier of the sent message @message_id A temporary message identifier",
          "nilable": false
        },
        {
          "name": "message_id",
          "type": "int53",
          "nilable": false
        }
      ],
      "type": "Update",
      "description": "A request to send a message has reached the Telegram server. This doesn't mean that the message will be sent successfully or even that the send message request will be processed. This update will be sent only if the option \"use_quick_ack\" is set to true. This update may be sent multiple times for the same message",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "updateMessageSendSucceeded",
      "properties": [
        {
          "name": "message",
          "type": "message",
          "nilable": false
        },
        {
          "name": "old_message_id",
          "type": "int53",
          "nilable": false
        }
      ],
      "type": "Update",
      "description": "A message has been successfully sent @message Information about the sent message. Usually only the message identifier, date, and content are changed, but almost all other fields can also change @old_message_id The previous temporary message identifier",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "updateMessageSendFailed",
      "properties": [
        {
          "name": "message",
          "type": "message",
          "description": "Contains information about the message which failed to send @old_message_id The previous temporary message identifier @error_code An error code @error_message Error message",
          "nilable": false
        },
        {
          "name": "old_message_id",
          "type": "int53",
          "nilable": false
        },
        {
          "name": "error_code",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "error_message",
          "type": "string",
          "nilable": false
        }
      ],
      "type": "Update",
      "description": "A message failed to send. Be aware that some messages being sent can be irrecoverably deleted, in which case updateDeleteMessages will be received instead of this update",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "updateMessageContent",
      "properties": [
        {
          "name": "chat_id",
          "type": "int53",
          "nilable": false
        },
        {
          "name": "message_id",
          "type": "int53",
          "nilable": false
        },
        {
          "name": "new_content",
          "type": "MessageContent",
          "nilable": false
        }
      ],
      "type": "Update",
      "description": "The message content has changed @chat_id Chat identifier @message_id Message identifier @new_content New message content",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "updateMessageEdited",
      "properties": [
        {
          "name": "chat_id",
          "type": "int53",
          "nilable": false
        },
        {
          "name": "message_id",
          "type": "int53",
          "nilable": false
        },
        {
          "name": "edit_date",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "reply_markup",
          "type": "ReplyMarkup",
          "nilable": false
        }
      ],
      "type": "Update",
      "description": "A message was edited. Changes in the message content will come in a separate updateMessageContent @chat_id Chat identifier @message_id Message identifier @edit_date Point in time (Unix timestamp) when the message was edited @reply_markup New message reply markup; may be null",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "updateMessageViews",
      "properties": [
        {
          "name": "chat_id",
          "type": "int53",
          "nilable": false
        },
        {
          "name": "message_id",
          "type": "int53",
          "nilable": false
        },
        {
          "name": "views",
          "type": "int32",
          "nilable": false
        }
      ],
      "type": "Update",
      "description": "The view count of the message has changed @chat_id Chat identifier @message_id Message identifier @views New value of the view count",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "updateMessageContentOpened",
      "properties": [
        {
          "name": "chat_id",
          "type": "int53",
          "nilable": false
        },
        {
          "name": "message_id",
          "type": "int53",
          "nilable": false
        }
      ],
      "type": "Update",
      "description": "The message content was opened. Updates voice note messages to \"listened\", video note messages to \"viewed\" and starts the TTL timer for self-destructing messages @chat_id Chat identifier @message_id Message identifier",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "updateMessageMentionRead",
      "properties": [
        {
          "name": "chat_id",
          "type": "int53",
          "nilable": false
        },
        {
          "name": "message_id",
          "type": "int53",
          "nilable": false
        },
        {
          "name": "unread_mention_count",
          "type": "int32",
          "nilable": false
        }
      ],
      "type": "Update",
      "description": "A message with an unread mention was read @chat_id Chat identifier @message_id Message identifier @unread_mention_count The new number of unread mention messages left in the chat",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "updateNewChat",
      "properties": [
        {
          "name": "chat",
          "type": "chat",
          "nilable": false
        }
      ],
      "type": "Update",
      "description": "A new chat has been loaded/created. This update is guaranteed to come before the chat identifier is returned to the client. The chat field changes will be reported through separate updates @chat The chat",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "updateChatTitle",
      "properties": [
        {
          "name": "chat_id",
          "type": "int53",
          "nilable": false
        },
        {
          "name": "title",
          "type": "string",
          "nilable": false
        }
      ],
      "type": "Update",
      "description": "The title of a chat was changed @chat_id Chat identifier @title The new chat title",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "updateChatPhoto",
      "properties": [
        {
          "name": "chat_id",
          "type": "int53",
          "nilable": false
        },
        {
          "name": "photo",
          "type": "chatPhoto",
          "nilable": false
        }
      ],
      "type": "Update",
      "description": "A chat photo was changed @chat_id Chat identifier @photo The new chat photo; may be null",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "updateChatPermissions",
      "properties": [
        {
          "name": "chat_id",
          "type": "int53",
          "nilable": false
        },
        {
          "name": "permissions",
          "type": "chatPermissions",
          "nilable": false
        }
      ],
      "type": "Update",
      "description": "Chat permissions was changed @chat_id Chat identifier @permissions The new chat permissions",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "updateChatLastMessage",
      "properties": [
        {
          "name": "chat_id",
          "type": "int53",
          "nilable": false
        },
        {
          "name": "last_message",
          "type": "message",
          "nilable": false
        },
        {
          "name": "order",
          "type": "int64",
          "nilable": false
        }
      ],
      "type": "Update",
      "description": "The last message of a chat was changed. If last_message is null, then the last message in the chat became unknown. Some new unknown messages might be added to the chat in this case @chat_id Chat identifier @last_message The new last message in the chat; may be null @order New value of the chat order",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "updateChatOrder",
      "properties": [
        {
          "name": "chat_id",
          "type": "int53",
          "nilable": false
        },
        {
          "name": "order",
          "type": "int64",
          "nilable": false
        }
      ],
      "type": "Update",
      "description": "The order of the chat in the chat list has changed. Instead of this update updateChatLastMessage, updateChatIsPinned or updateChatDraftMessage might be sent @chat_id Chat identifier @order New value of the order",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "updateChatIsPinned",
      "properties": [
        {
          "name": "chat_id",
          "type": "int53",
          "nilable": false
        },
        {
          "name": "is_pinned",
          "type": "Bool",
          "nilable": false
        },
        {
          "name": "order",
          "type": "int64",
          "nilable": false
        }
      ],
      "type": "Update",
      "description": "A chat was pinned or unpinned @chat_id Chat identifier @is_pinned New value of is_pinned @order New value of the chat order",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "updateChatIsMarkedAsUnread",
      "properties": [
        {
          "name": "chat_id",
          "type": "int53",
          "nilable": false
        },
        {
          "name": "is_marked_as_unread",
          "type": "Bool",
          "nilable": false
        }
      ],
      "type": "Update",
      "description": "A chat was marked as unread or was read @chat_id Chat identifier @is_marked_as_unread New value of is_marked_as_unread",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "updateChatIsSponsored",
      "properties": [
        {
          "name": "chat_id",
          "type": "int53",
          "nilable": false
        },
        {
          "name": "is_sponsored",
          "type": "Bool",
          "nilable": false
        },
        {
          "name": "order",
          "type": "int64",
          "nilable": false
        }
      ],
      "type": "Update",
      "description": "A chat's is_sponsored field has changed @chat_id Chat identifier @is_sponsored New value of is_sponsored @order New value of chat order",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "updateChatDefaultDisableNotification",
      "properties": [
        {
          "name": "chat_id",
          "type": "int53",
          "nilable": false
        },
        {
          "name": "default_disable_notification",
          "type": "Bool",
          "nilable": false
        }
      ],
      "type": "Update",
      "description": "The value of the default disable_notification parameter, used when a message is sent to the chat, was changed @chat_id Chat identifier @default_disable_notification The new default_disable_notification value",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "updateChatReadInbox",
      "properties": [
        {
          "name": "chat_id",
          "type": "int53",
          "nilable": false
        },
        {
          "name": "last_read_inbox_message_id",
          "type": "int53",
          "nilable": false
        },
        {
          "name": "unread_count",
          "type": "int32",
          "nilable": false
        }
      ],
      "type": "Update",
      "description": "Incoming messages were read or number of unread messages has been changed @chat_id Chat identifier @last_read_inbox_message_id Identifier of the last read incoming message @unread_count The number of unread messages left in the chat",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "updateChatReadOutbox",
      "properties": [
        {
          "name": "chat_id",
          "type": "int53",
          "nilable": false
        },
        {
          "name": "last_read_outbox_message_id",
          "type": "int53",
          "nilable": false
        }
      ],
      "type": "Update",
      "description": "Outgoing messages were read @chat_id Chat identifier @last_read_outbox_message_id Identifier of last read outgoing message",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "updateChatUnreadMentionCount",
      "properties": [
        {
          "name": "chat_id",
          "type": "int53",
          "nilable": false
        },
        {
          "name": "unread_mention_count",
          "type": "int32",
          "nilable": false
        }
      ],
      "type": "Update",
      "description": "The chat unread_mention_count has changed @chat_id Chat identifier @unread_mention_count The number of unread mention messages left in the chat",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "updateChatNotificationSettings",
      "properties": [
        {
          "name": "chat_id",
          "type": "int53",
          "nilable": false
        },
        {
          "name": "notification_settings",
          "type": "chatNotificationSettings",
          "nilable": false
        }
      ],
      "type": "Update",
      "description": "Notification settings for a chat were changed @chat_id Chat identifier @notification_settings The new notification settings",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "updateScopeNotificationSettings",
      "properties": [
        {
          "name": "scope",
          "type": "NotificationSettingsScope",
          "nilable": false
        },
        {
          "name": "notification_settings",
          "type": "scopeNotificationSettings",
          "nilable": false
        }
      ],
      "type": "Update",
      "description": "Notification settings for some type of chats were updated @scope Types of chats for which notification settings were updated @notification_settings The new notification settings",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "updateChatPinnedMessage",
      "properties": [
        {
          "name": "chat_id",
          "type": "int53",
          "nilable": false
        },
        {
          "name": "pinned_message_id",
          "type": "int53",
          "nilable": false
        }
      ],
      "type": "Update",
      "description": "The chat pinned message was changed @chat_id Chat identifier @pinned_message_id The new identifier of the pinned message; 0 if there is no pinned message in the chat",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "updateChatReplyMarkup",
      "properties": [
        {
          "name": "chat_id",
          "type": "int53",
          "description": "Chat identifier @reply_markup_message_id Identifier of the message from which reply markup needs to be used; 0 if there is no default custom reply markup in the chat",
          "nilable": false
        },
        {
          "name": "reply_markup_message_id",
          "type": "int53",
          "nilable": false
        }
      ],
      "type": "Update",
      "description": "The default chat reply markup was changed. Can occur because new messages with reply markup were received or because an old reply markup was hidden by the user",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "updateChatDraftMessage",
      "properties": [
        {
          "name": "chat_id",
          "type": "int53",
          "nilable": false
        },
        {
          "name": "draft_message",
          "type": "draftMessage",
          "nilable": false
        },
        {
          "name": "order",
          "type": "int64",
          "nilable": false
        }
      ],
      "type": "Update",
      "description": "A chat draft has changed. Be aware that the update may come in the currently opened chat but with old content of the draft. If the user has changed the content of the draft, this update shouldn't be applied @chat_id Chat identifier @draft_message The new draft message; may be null @order New value of the chat order",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "updateChatOnlineMemberCount",
      "properties": [
        {
          "name": "chat_id",
          "type": "int53",
          "nilable": false
        },
        {
          "name": "online_member_count",
          "type": "int32",
          "nilable": false
        }
      ],
      "type": "Update",
      "description": "The number of online group members has changed. This update with non-zero count is sent only for currently opened chats. There is no guarantee that it will be sent just after the count has changed @chat_id Identifier of the chat @online_member_count New number of online members in the chat, or 0 if unknown",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "updateNotification",
      "properties": [
        {
          "name": "notification_group_id",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "notification",
          "type": "notification",
          "nilable": false
        }
      ],
      "type": "Update",
      "description": "A notification was changed @notification_group_id Unique notification group identifier @notification Changed notification",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "updateNotificationGroup",
      "properties": [
        {
          "name": "notification_group_id",
          "type": "int32",
          "description": "Unique notification group identifier",
          "nilable": false
        },
        {
          "name": "type",
          "type": "NotificationGroupType",
          "description": "New type of the notification group",
          "nilable": false
        },
        {
          "name": "chat_id",
          "type": "int53",
          "description": "Identifier of a chat to which all notifications in the group belong",
          "nilable": false
        },
        {
          "name": "notification_settings_chat_id",
          "type": "int53",
          "description": "Chat identifier, which notification settings must be applied to the added notifications",
          "nilable": false
        },
        {
          "name": "is_silent",
          "type": "Bool",
          "description": "True, if the notifications should be shown without sound",
          "nilable": false
        },
        {
          "name": "total_count",
          "type": "int32",
          "description": "Total number of unread notifications in the group, can be bigger than number of active notifications",
          "nilable": false
        },
        {
          "name": "added_notifications",
          "type": "vector<notification>",
          "description": "List of added group notifications, sorted by notification ID @removed_notification_ids Identifiers of removed group notifications, sorted by notification ID",
          "nilable": false
        },
        {
          "name": "removed_notification_ids",
          "type": "vector<int32>",
          "nilable": false
        }
      ],
      "type": "Update",
      "description": "A list of active notifications in a notification group has changed",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "updateActiveNotifications",
      "properties": [
        {
          "name": "groups",
          "type": "vector<notificationGroup>",
          "nilable": false
        }
      ],
      "type": "Update",
      "description": "Contains active notifications that was shown on previous application launches. This update is sent only if a message database is used. In that case it comes once before any updateNotification and updateNotificationGroup update @groups Lists of active notification groups",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "updateHavePendingNotifications",
      "properties": [
        {
          "name": "have_delayed_notifications",
          "type": "Bool",
          "description": "True, if there are some delayed notification updates, which will be sent soon",
          "nilable": false
        },
        {
          "name": "have_unreceived_notifications",
          "type": "Bool",
          "description": "True, if there can be some yet unreceived notifications, which are being fetched from the server",
          "nilable": false
        }
      ],
      "type": "Update",
      "description": "Describes, whether there are some pending notification updates. Can be used to prevent application from killing, while there are some pending notifications",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "updateDeleteMessages",
      "properties": [
        {
          "name": "chat_id",
          "type": "int53",
          "nilable": false
        },
        {
          "name": "message_ids",
          "type": "vector<int53>",
          "nilable": false
        },
        {
          "name": "is_permanent",
          "type": "Bool",
          "description": "True, if the messages are permanently deleted by a user (as opposed to just becoming inaccessible)",
          "nilable": false
        },
        {
          "name": "from_cache",
          "type": "Bool",
          "description": "True, if the messages are deleted only from the cache and can possibly be retrieved again in the future",
          "nilable": false
        }
      ],
      "type": "Update",
      "description": "Some messages were deleted @chat_id Chat identifier @message_ids Identifiers of the deleted messages",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "updateUserChatAction",
      "properties": [
        {
          "name": "chat_id",
          "type": "int53",
          "nilable": false
        },
        {
          "name": "user_id",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "action",
          "type": "ChatAction",
          "nilable": false
        }
      ],
      "type": "Update",
      "description": "User activity in the chat has changed @chat_id Chat identifier @user_id Identifier of a user performing an action @action The action description",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "updateUserStatus",
      "properties": [
        {
          "name": "user_id",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "status",
          "type": "UserStatus",
          "nilable": false
        }
      ],
      "type": "Update",
      "description": "The user went online or offline @user_id User identifier @status New status of the user",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "updateUser",
      "properties": [
        {
          "name": "user",
          "type": "user",
          "nilable": false
        }
      ],
      "type": "Update",
      "description": "Some data of a user has changed. This update is guaranteed to come before the user identifier is returned to the client @user New data about the user",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "updateBasicGroup",
      "properties": [
        {
          "name": "basic_group",
          "type": "basicGroup",
          "nilable": false
        }
      ],
      "type": "Update",
      "description": "Some data of a basic group has changed. This update is guaranteed to come before the basic group identifier is returned to the client @basic_group New data about the group",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "updateSupergroup",
      "properties": [
        {
          "name": "supergroup",
          "type": "supergroup",
          "nilable": false
        }
      ],
      "type": "Update",
      "description": "Some data of a supergroup or a channel has changed. This update is guaranteed to come before the supergroup identifier is returned to the client @supergroup New data about the supergroup",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "updateSecretChat",
      "properties": [
        {
          "name": "secret_chat",
          "type": "secretChat",
          "nilable": false
        }
      ],
      "type": "Update",
      "description": "Some data of a secret chat has changed. This update is guaranteed to come before the secret chat identifier is returned to the client @secret_chat New data about the secret chat",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "updateUserFullInfo",
      "properties": [
        {
          "name": "user_id",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "user_full_info",
          "type": "userFullInfo",
          "nilable": false
        }
      ],
      "type": "Update",
      "description": "Some data from userFullInfo has been changed @user_id User identifier @user_full_info New full information about the user",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "updateBasicGroupFullInfo",
      "properties": [
        {
          "name": "basic_group_id",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "basic_group_full_info",
          "type": "basicGroupFullInfo",
          "nilable": false
        }
      ],
      "type": "Update",
      "description": "Some data from basicGroupFullInfo has been changed @basic_group_id Identifier of a basic group @basic_group_full_info New full information about the group",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "updateSupergroupFullInfo",
      "properties": [
        {
          "name": "supergroup_id",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "supergroup_full_info",
          "type": "supergroupFullInfo",
          "nilable": false
        }
      ],
      "type": "Update",
      "description": "Some data from supergroupFullInfo has been changed @supergroup_id Identifier of the supergroup or channel @supergroup_full_info New full information about the supergroup",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "updateServiceNotification",
      "properties": [
        {
          "name": "type",
          "type": "string",
          "description": "Notification type. If type begins with \"AUTH_KEY_DROP_\", then two buttons \"Cancel\" and \"Log out\" should be shown under notification; if user presses the second, all local data should be destroyed using Destroy method",
          "nilable": false
        },
        {
          "name": "content",
          "type": "MessageContent",
          "description": "Notification content",
          "nilable": false
        }
      ],
      "type": "Update",
      "description": "Service notification from the server. Upon receiving this the client must show a popup with the content of the notification",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "updateFile",
      "properties": [
        {
          "name": "file",
          "type": "file",
          "nilable": false
        }
      ],
      "type": "Update",
      "description": "Information about a file was updated @file New data about the file",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "updateFileGenerationStart",
      "properties": [
        {
          "name": "generation_id",
          "type": "int64",
          "description": "Unique identifier for the generation process",
          "nilable": false
        },
        {
          "name": "original_path",
          "type": "string",
          "description": "The path to a file from which a new file is generated; may be empty",
          "nilable": true
        },
        {
          "name": "destination_path",
          "type": "string",
          "description": "The path to a file that should be created and where the new file should be generated",
          "nilable": false
        },
        {
          "name": "conversion",
          "type": "string",
          "description": "String specifying the conversion applied to the original file. If conversion is \"#url#\" than original_path contains an HTTP/HTTPS URL of a file, which should be downloaded by the client",
          "nilable": false
        }
      ],
      "type": "Update",
      "description": "The file generation process needs to be started by the client",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "updateFileGenerationStop",
      "properties": [
        {
          "name": "generation_id",
          "type": "int64",
          "nilable": false
        }
      ],
      "type": "Update",
      "description": "File generation is no longer needed @generation_id Unique identifier for the generation process",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "updateCall",
      "properties": [
        {
          "name": "call",
          "type": "call",
          "nilable": false
        }
      ],
      "type": "Update",
      "description": "New call was created or information about a call was updated @call New data about a call",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "updateUserPrivacySettingRules",
      "properties": [
        {
          "name": "setting",
          "type": "UserPrivacySetting",
          "nilable": false
        },
        {
          "name": "rules",
          "type": "userPrivacySettingRules",
          "nilable": false
        }
      ],
      "type": "Update",
      "description": "Some privacy setting rules have been changed @setting The privacy setting @rules New privacy rules",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "updateUnreadMessageCount",
      "properties": [
        {
          "name": "unread_count",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "unread_unmuted_count",
          "type": "int32",
          "nilable": false
        }
      ],
      "type": "Update",
      "description": "Number of unread messages has changed. This update is sent only if a message database is used @unread_count Total number of unread messages @unread_unmuted_count Total number of unread messages in unmuted chats",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "updateUnreadChatCount",
      "properties": [
        {
          "name": "unread_count",
          "type": "int32",
          "description": "Total number of unread chats @unread_unmuted_count Total number of unread unmuted chats",
          "nilable": false
        },
        {
          "name": "unread_unmuted_count",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "marked_as_unread_count",
          "type": "int32",
          "description": "Total number of chats marked as unread @marked_as_unread_unmuted_count Total number of unmuted chats marked as unread",
          "nilable": false
        },
        {
          "name": "marked_as_unread_unmuted_count",
          "type": "int32",
          "nilable": false
        }
      ],
      "type": "Update",
      "description": "Number of unread chats, i.e. with unread messages or marked as unread, has changed. This update is sent only if a message database is used",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "updateOption",
      "properties": [
        {
          "name": "name",
          "type": "string",
          "nilable": false
        },
        {
          "name": "value",
          "type": "OptionValue",
          "nilable": false
        }
      ],
      "type": "Update",
      "description": "An option changed its value @name The option name @value The new option value",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "updateInstalledStickerSets",
      "properties": [
        {
          "name": "is_masks",
          "type": "Bool",
          "nilable": false
        },
        {
          "name": "sticker_set_ids",
          "type": "vector<int64>",
          "nilable": false
        }
      ],
      "type": "Update",
      "description": "The list of installed sticker sets was updated @is_masks True, if the list of installed mask sticker sets was updated @sticker_set_ids The new list of installed ordinary sticker sets",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "updateTrendingStickerSets",
      "properties": [
        {
          "name": "sticker_sets",
          "type": "stickerSets",
          "nilable": false
        }
      ],
      "type": "Update",
      "description": "The list of trending sticker sets was updated or some of them were viewed @sticker_sets The new list of trending sticker sets",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "updateRecentStickers",
      "properties": [
        {
          "name": "is_attached",
          "type": "Bool",
          "nilable": false
        },
        {
          "name": "sticker_ids",
          "type": "vector<int32>",
          "nilable": false
        }
      ],
      "type": "Update",
      "description": "The list of recently used stickers was updated @is_attached True, if the list of stickers attached to photo or video files was updated, otherwise the list of sent stickers is updated @sticker_ids The new list of file identifiers of recently used stickers",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "updateFavoriteStickers",
      "properties": [
        {
          "name": "sticker_ids",
          "type": "vector<int32>",
          "nilable": false
        }
      ],
      "type": "Update",
      "description": "The list of favorite stickers was updated @sticker_ids The new list of file identifiers of favorite stickers",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "updateSavedAnimations",
      "properties": [
        {
          "name": "animation_ids",
          "type": "vector<int32>",
          "nilable": false
        }
      ],
      "type": "Update",
      "description": "The list of saved animations was updated @animation_ids The new list of file identifiers of saved animations",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "updateSelectedBackground",
      "properties": [
        {
          "name": "for_dark_theme",
          "type": "Bool",
          "nilable": false
        },
        {
          "name": "background",
          "type": "background",
          "nilable": false
        }
      ],
      "type": "Update",
      "description": "The selected background has changed @for_dark_theme True, if background for dark theme has changed @background The new selected background; may be null",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "updateLanguagePackStrings",
      "properties": [
        {
          "name": "localization_target",
          "type": "string",
          "nilable": false
        },
        {
          "name": "language_pack_id",
          "type": "string",
          "nilable": false
        },
        {
          "name": "strings",
          "type": "vector<languagePackString>",
          "nilable": false
        }
      ],
      "type": "Update",
      "description": "Some language pack strings have been updated @localization_target Localization target to which the language pack belongs @language_pack_id Identifier of the updated language pack @strings List of changed language pack strings",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "updateConnectionState",
      "properties": [
        {
          "name": "state",
          "type": "ConnectionState",
          "nilable": false
        }
      ],
      "type": "Update",
      "description": "The connection state has changed @state The new connection state",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "updateTermsOfService",
      "properties": [
        {
          "name": "terms_of_service_id",
          "type": "string",
          "nilable": false
        },
        {
          "name": "terms_of_service",
          "type": "termsOfService",
          "nilable": false
        }
      ],
      "type": "Update",
      "description": "New terms of service must be accepted by the user. If the terms of service are declined, then the deleteAccount method should be called with the reason \"Decline ToS update\" @terms_of_service_id Identifier of the terms of service @terms_of_service The new terms of service",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "updateNewInlineQuery",
      "properties": [
        {
          "name": "id",
          "type": "int64",
          "nilable": false
        },
        {
          "name": "sender_user_id",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "user_location",
          "type": "location",
          "nilable": false
        },
        {
          "name": "query",
          "type": "string",
          "nilable": false
        },
        {
          "name": "offset",
          "type": "string",
          "nilable": false
        }
      ],
      "type": "Update",
      "description": "A new incoming inline query; for bots only @id Unique query identifier @sender_user_id Identifier of the user who sent the query @user_location User location, provided by the client; may be null @query Text of the query @offset Offset of the first entry to return",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "updateNewChosenInlineResult",
      "properties": [
        {
          "name": "sender_user_id",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "user_location",
          "type": "location",
          "nilable": false
        },
        {
          "name": "query",
          "type": "string",
          "nilable": false
        },
        {
          "name": "result_id",
          "type": "string",
          "nilable": false
        },
        {
          "name": "inline_message_id",
          "type": "string",
          "nilable": false
        }
      ],
      "type": "Update",
      "description": "The user has chosen a result of an inline query; for bots only @sender_user_id Identifier of the user who sent the query @user_location User location, provided by the client; may be null @query Text of the query @result_id Identifier of the chosen result @inline_message_id Identifier of the sent inline message, if known",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "updateNewCallbackQuery",
      "properties": [
        {
          "name": "id",
          "type": "int64",
          "nilable": false
        },
        {
          "name": "sender_user_id",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "chat_id",
          "type": "int53",
          "nilable": false
        },
        {
          "name": "message_id",
          "type": "int53",
          "description": "Identifier of the message, from which the query originated @chat_instance Identifier that uniquely corresponds to the chat to which the message was sent @payload Query payload",
          "nilable": false
        },
        {
          "name": "chat_instance",
          "type": "int64",
          "nilable": false
        },
        {
          "name": "payload",
          "type": "CallbackQueryPayload",
          "nilable": false
        }
      ],
      "type": "Update",
      "description": "A new incoming callback query; for bots only @id Unique query identifier @sender_user_id Identifier of the user who sent the query @chat_id Identifier of the chat, in which the query was sent",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "updateNewInlineCallbackQuery",
      "properties": [
        {
          "name": "id",
          "type": "int64",
          "nilable": false
        },
        {
          "name": "sender_user_id",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "inline_message_id",
          "type": "string",
          "nilable": false
        },
        {
          "name": "chat_instance",
          "type": "int64",
          "description": "An identifier uniquely corresponding to the chat a message was sent to @payload Query payload",
          "nilable": false
        },
        {
          "name": "payload",
          "type": "CallbackQueryPayload",
          "nilable": false
        }
      ],
      "type": "Update",
      "description": "A new incoming callback query from a message sent via a bot; for bots only @id Unique query identifier @sender_user_id Identifier of the user who sent the query @inline_message_id Identifier of the inline message, from which the query originated",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "updateNewShippingQuery",
      "properties": [
        {
          "name": "id",
          "type": "int64",
          "nilable": false
        },
        {
          "name": "sender_user_id",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "invoice_payload",
          "type": "string",
          "nilable": false
        },
        {
          "name": "shipping_address",
          "type": "address",
          "nilable": false
        }
      ],
      "type": "Update",
      "description": "A new incoming shipping query; for bots only. Only for invoices with flexible price @id Unique query identifier @sender_user_id Identifier of the user who sent the query @invoice_payload Invoice payload @shipping_address User shipping address",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "updateNewPreCheckoutQuery",
      "properties": [
        {
          "name": "id",
          "type": "int64",
          "nilable": false
        },
        {
          "name": "sender_user_id",
          "type": "int32",
          "nilable": false
        },
        {
          "name": "currency",
          "type": "string",
          "nilable": false
        },
        {
          "name": "total_amount",
          "type": "int53",
          "nilable": false
        },
        {
          "name": "invoice_payload",
          "type": "bytes",
          "description": "Invoice payload @shipping_option_id Identifier of a shipping option chosen by the user; may be empty if not applicable @order_info Information about the order; may be null",
          "nilable": true
        },
        {
          "name": "shipping_option_id",
          "type": "string",
          "nilable": false
        },
        {
          "name": "order_info",
          "type": "orderInfo",
          "nilable": false
        }
      ],
      "type": "Update",
      "description": "A new incoming pre-checkout query; for bots only. Contains full information about a checkout @id Unique query identifier @sender_user_id Identifier of the user who sent the query @currency Currency for the product price @total_amount Total price for the product, in the minimal quantity of the currency",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "updateNewCustomEvent",
      "properties": [
        {
          "name": "event",
          "type": "string",
          "nilable": false
        }
      ],
      "type": "Update",
      "description": "A new incoming event; for bots only @event A JSON-serialized event",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "updateNewCustomQuery",
      "properties": [
        {
          "name": "id",
          "type": "int64",
          "nilable": false
        },
        {
          "name": "data",
          "type": "string",
          "nilable": false
        },
        {
          "name": "timeout",
          "type": "int32",
          "nilable": false
        }
      ],
      "type": "Update",
      "description": "A new incoming query; for bots only @id The query identifier @data JSON-serialized query data @timeout Query timeout",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "updatePoll",
      "properties": [
        {
          "name": "poll",
          "type": "poll",
          "nilable": false
        }
      ],
      "type": "Update",
      "description": "Information about a poll was updated; for bots only @poll New data about the poll",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "logStreamDefault",
      "properties": [],
      "type": "LogStream",
      "description": "The log is written to stderr or an OS specific log",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "logStreamFile",
      "properties": [
        {
          "name": "path",
          "type": "string",
          "nilable": false
        },
        {
          "name": "max_file_size",
          "type": "int53",
          "nilable": false
        }
      ],
      "type": "LogStream",
      "description": "The log is written to a file @path Path to the file to where the internal TDLib log will be written @max_file_size Maximum size of the file to where the internal TDLib log is written before the file will be auto-rotated",
      "children": []
    },
    {
      "function": false,
      "is_abstract": false,
      "name": "logStreamEmpty",
      "properties": [],
      "type": "LogStream",
      "description": "The log is written nowhere",
      "children": []
    }
  ],
  "functions": {
    "AuthorizationState": [
      {
        "function": true,
        "is_abstract": false,
        "name": "getAuthorizationState",
        "properties": [],
        "type": "AuthorizationState",
        "description": "Returns the current authorization state; this is an offline request. For informational purposes only. Use updateAuthorizationState instead to maintain the current authorization state",
        "children": []
      }
    ],
    "Ok": [
      {
        "function": true,
        "is_abstract": false,
        "name": "setTdlibParameters",
        "properties": [
          {
            "name": "parameters",
            "type": "tdlibParameters",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Sets the parameters for TDLib initialization. Works only when the current authorization state is authorizationStateWaitTdlibParameters @parameters Parameters",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "checkDatabaseEncryptionKey",
        "properties": [
          {
            "name": "encryption_key",
            "type": "bytes",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Checks the database encryption key for correctness. Works only when the current authorization state is authorizationStateWaitEncryptionKey @encryption_key Encryption key to check or set up",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "setAuthenticationPhoneNumber",
        "properties": [
          {
            "name": "phone_number",
            "type": "string",
            "description": "The phone number of the user, in international format @settings Settings for the authentication of the user's phone number",
            "nilable": false
          },
          {
            "name": "settings",
            "type": "phoneNumberAuthenticationSettings",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Sets the phone number of the user and sends an authentication code to the user. Works only when the current authorization state is authorizationStateWaitPhoneNumber,",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "resendAuthenticationCode",
        "properties": [],
        "type": "Ok",
        "description": "Re-sends an authentication code to the user. Works only when the current authorization state is authorizationStateWaitCode and the next_code_type of the result is not null",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "checkAuthenticationCode",
        "properties": [
          {
            "name": "code",
            "type": "string",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Checks the authentication code. Works only when the current authorization state is authorizationStateWaitCode @code The verification code received via SMS, Telegram message, phone call, or flash call",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "registerUser",
        "properties": [
          {
            "name": "first_name",
            "type": "string",
            "description": "The first name of the user; 1-64 characters @last_name The last name of the user; 0-64 characters",
            "nilable": false
          },
          {
            "name": "last_name",
            "type": "string",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Finishes user registration. Works only when the current authorization state is authorizationStateWaitRegistration",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "checkAuthenticationPassword",
        "properties": [
          {
            "name": "password",
            "type": "string",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Checks the authentication password for correctness. Works only when the current authorization state is authorizationStateWaitPassword @password The password to check",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "requestAuthenticationPasswordRecovery",
        "properties": [],
        "type": "Ok",
        "description": "Requests to send a password recovery code to an email address that was previously set up. Works only when the current authorization state is authorizationStateWaitPassword",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "recoverAuthenticationPassword",
        "properties": [
          {
            "name": "recovery_code",
            "type": "string",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Recovers the password with a password recovery code sent to an email address that was previously set up. Works only when the current authorization state is authorizationStateWaitPassword @recovery_code Recovery code to check",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "checkAuthenticationBotToken",
        "properties": [
          {
            "name": "token",
            "type": "string",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Checks the authentication token of a bot; to log in as a bot. Works only when the current authorization state is authorizationStateWaitPhoneNumber. Can be used instead of setAuthenticationPhoneNumber and checkAuthenticationCode to log in @token The bot token",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "logOut",
        "properties": [],
        "type": "Ok",
        "description": "Closes the TDLib instance after a proper logout. Requires an available network connection. All local data will be destroyed. After the logout completes, updateAuthorizationState with authorizationStateClosed will be sent",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "close",
        "properties": [],
        "type": "Ok",
        "description": "Closes the TDLib instance. All databases will be flushed to disk and properly closed. After the close completes, updateAuthorizationState with authorizationStateClosed will be sent",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "destroy",
        "properties": [],
        "type": "Ok",
        "description": "Closes the TDLib instance, destroying all local data without a proper logout. The current user session will remain in the list of all active sessions. All local data will be destroyed. After the destruction completes updateAuthorizationState with authorizationStateClosed will be sent",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "setDatabaseEncryptionKey",
        "properties": [
          {
            "name": "new_encryption_key",
            "type": "bytes",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Changes the database encryption key. Usually the encryption key is never changed and is stored in some OS keychain @new_encryption_key New encryption key",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "removeTopChat",
        "properties": [
          {
            "name": "category",
            "type": "TopChatCategory",
            "nilable": false
          },
          {
            "name": "chat_id",
            "type": "int53",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Removes a chat from the list of frequently used chats. Supported only if the chat info database is enabled @category Category of frequently used chats @chat_id Chat identifier",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "addRecentlyFoundChat",
        "properties": [
          {
            "name": "chat_id",
            "type": "int53",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Adds a chat to the list of recently found chats. The chat is added to the beginning of the list. If the chat is already in the list, it will be removed from the list first @chat_id Identifier of the chat to add",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "removeRecentlyFoundChat",
        "properties": [
          {
            "name": "chat_id",
            "type": "int53",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Removes a chat from the list of recently found chats @chat_id Identifier of the chat to be removed",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "clearRecentlyFoundChats",
        "properties": [],
        "type": "Ok",
        "description": "Clears the list of recently found chats",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "deleteChatHistory",
        "properties": [
          {
            "name": "chat_id",
            "type": "int53",
            "description": "Chat identifier @remove_from_chat_list Pass true if the chat should be removed from the chat list @revoke Pass true to try to delete chat history for all users",
            "nilable": false
          },
          {
            "name": "remove_from_chat_list",
            "type": "Bool",
            "nilable": false
          },
          {
            "name": "revoke",
            "type": "Bool",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Deletes all messages in the chat. Use Chat.can_be_deleted_only_for_self and Chat.can_be_deleted_for_all_users fields to find whether and how the method can be applied to the chat",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "removeNotification",
        "properties": [
          {
            "name": "notification_group_id",
            "type": "int32",
            "nilable": false
          },
          {
            "name": "notification_id",
            "type": "int32",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Removes an active notification from notification list. Needs to be called only if the notification is removed by the current user @notification_group_id Identifier of notification group to which the notification belongs @notification_id Identifier of removed notification",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "removeNotificationGroup",
        "properties": [
          {
            "name": "notification_group_id",
            "type": "int32",
            "nilable": false
          },
          {
            "name": "max_notification_id",
            "type": "int32",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Removes a group of active notifications. Needs to be called only if the notification group is removed by the current user @notification_group_id Notification group identifier @max_notification_id Maximum identifier of removed notifications",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "sendChatScreenshotTakenNotification",
        "properties": [
          {
            "name": "chat_id",
            "type": "int53",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Sends a notification about a screenshot taken in a chat. Supported only in private and secret chats @chat_id Chat identifier",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "deleteMessages",
        "properties": [
          {
            "name": "chat_id",
            "type": "int53",
            "nilable": false
          },
          {
            "name": "message_ids",
            "type": "vector<int53>",
            "nilable": false
          },
          {
            "name": "revoke",
            "type": "Bool",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Deletes messages @chat_id Chat identifier @message_ids Identifiers of the messages to be deleted @revoke Pass true to try to delete messages for all chat members. Always true for supergroups, channels and secret chats",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "deleteChatMessagesFromUser",
        "properties": [
          {
            "name": "chat_id",
            "type": "int53",
            "nilable": false
          },
          {
            "name": "user_id",
            "type": "int32",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Deletes all messages sent by the specified user to a chat. Supported only in supergroups; requires can_delete_messages administrator privileges @chat_id Chat identifier @user_id User identifier",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "editInlineMessageText",
        "properties": [
          {
            "name": "inline_message_id",
            "type": "string",
            "nilable": false
          },
          {
            "name": "reply_markup",
            "type": "ReplyMarkup",
            "nilable": false
          },
          {
            "name": "input_message_content",
            "type": "InputMessageContent",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Edits the text of an inline text or game message sent via a bot; for bots only @inline_message_id Inline message identifier @reply_markup The new message reply markup @input_message_content New text content of the message. Should be of type InputMessageText",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "editInlineMessageLiveLocation",
        "properties": [
          {
            "name": "inline_message_id",
            "type": "string",
            "nilable": false
          },
          {
            "name": "reply_markup",
            "type": "ReplyMarkup",
            "nilable": false
          },
          {
            "name": "location",
            "type": "location",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Edits the content of a live location in an inline message sent via a bot; for bots only @inline_message_id Inline message identifier @reply_markup The new message reply markup @location New location content of the message; may be null. Pass null to stop sharing the live location",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "editInlineMessageMedia",
        "properties": [
          {
            "name": "inline_message_id",
            "type": "string",
            "nilable": false
          },
          {
            "name": "reply_markup",
            "type": "ReplyMarkup",
            "description": "The new message reply markup; for bots only @input_message_content New content of the message. Must be one of the following types: InputMessageAnimation, InputMessageAudio, InputMessageDocument, InputMessagePhoto or InputMessageVideo",
            "nilable": false
          },
          {
            "name": "input_message_content",
            "type": "InputMessageContent",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Edits the content of a message with an animation, an audio, a document, a photo or a video in an inline message sent via a bot; for bots only @inline_message_id Inline message identifier",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "editInlineMessageCaption",
        "properties": [
          {
            "name": "inline_message_id",
            "type": "string",
            "nilable": false
          },
          {
            "name": "reply_markup",
            "type": "ReplyMarkup",
            "nilable": false
          },
          {
            "name": "caption",
            "type": "formattedText",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Edits the caption of an inline message sent via a bot; for bots only @inline_message_id Inline message identifier @reply_markup The new message reply markup @caption New message content caption; 0-GetOption(\"message_caption_length_max\") characters",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "editInlineMessageReplyMarkup",
        "properties": [
          {
            "name": "inline_message_id",
            "type": "string",
            "nilable": false
          },
          {
            "name": "reply_markup",
            "type": "ReplyMarkup",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Edits the reply markup of an inline message sent via a bot; for bots only @inline_message_id Inline message identifier @reply_markup The new message reply markup",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "setPollAnswer",
        "properties": [
          {
            "name": "chat_id",
            "type": "int53",
            "nilable": false
          },
          {
            "name": "message_id",
            "type": "int53",
            "nilable": false
          },
          {
            "name": "option_ids",
            "type": "vector<int32>",
            "description": "0-based identifiers of options, chosen by the user. Currently user can't choose more than 1 option",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Changes user answer to a poll @chat_id Identifier of the chat to which the poll belongs @message_id Identifier of the message containing the poll",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "stopPoll",
        "properties": [
          {
            "name": "chat_id",
            "type": "int53",
            "description": "Identifier of the chat to which the poll belongs @message_id Identifier of the message containing the poll @reply_markup The new message reply markup; for bots only",
            "nilable": false
          },
          {
            "name": "message_id",
            "type": "int53",
            "nilable": false
          },
          {
            "name": "reply_markup",
            "type": "ReplyMarkup",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Stops a poll. A poll in a message can be stopped when the message has can_be_edited flag set",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "answerInlineQuery",
        "properties": [
          {
            "name": "inline_query_id",
            "type": "int64",
            "nilable": false
          },
          {
            "name": "is_personal",
            "type": "Bool",
            "nilable": false
          },
          {
            "name": "results",
            "type": "vector<InputInlineQueryResult>",
            "description": "The results of the query @cache_time Allowed time to cache the results of the query, in seconds @next_offset Offset for the next inline query; pass an empty string if there are no more results",
            "nilable": false
          },
          {
            "name": "cache_time",
            "type": "int32",
            "nilable": false
          },
          {
            "name": "next_offset",
            "type": "string",
            "nilable": false
          },
          {
            "name": "switch_pm_text",
            "type": "string",
            "description": "If non-empty, this text should be shown on the button that opens a private chat with the bot and sends a start message to the bot with the parameter switch_pm_parameter @switch_pm_parameter The parameter for the bot start message",
            "nilable": false
          },
          {
            "name": "switch_pm_parameter",
            "type": "string",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Sets the result of an inline query; for bots only @inline_query_id Identifier of the inline query @is_personal True, if the result of the query can be cached for the specified user",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "answerCallbackQuery",
        "properties": [
          {
            "name": "callback_query_id",
            "type": "int64",
            "nilable": false
          },
          {
            "name": "text",
            "type": "string",
            "nilable": false
          },
          {
            "name": "show_alert",
            "type": "Bool",
            "nilable": false
          },
          {
            "name": "url",
            "type": "string",
            "nilable": false
          },
          {
            "name": "cache_time",
            "type": "int32",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Sets the result of a callback query; for bots only @callback_query_id Identifier of the callback query @text Text of the answer @show_alert If true, an alert should be shown to the user instead of a toast notification @url URL to be opened @cache_time Time during which the result of the query can be cached, in seconds",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "answerShippingQuery",
        "properties": [
          {
            "name": "shipping_query_id",
            "type": "int64",
            "nilable": false
          },
          {
            "name": "shipping_options",
            "type": "vector<shippingOption>",
            "nilable": false
          },
          {
            "name": "error_message",
            "type": "string",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Sets the result of a shipping query; for bots only @shipping_query_id Identifier of the shipping query @shipping_options Available shipping options @error_message An error message, empty on success",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "answerPreCheckoutQuery",
        "properties": [
          {
            "name": "pre_checkout_query_id",
            "type": "int64",
            "nilable": false
          },
          {
            "name": "error_message",
            "type": "string",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Sets the result of a pre-checkout query; for bots only @pre_checkout_query_id Identifier of the pre-checkout query @error_message An error message, empty on success",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "setInlineGameScore",
        "properties": [
          {
            "name": "inline_message_id",
            "type": "string",
            "nilable": false
          },
          {
            "name": "edit_message",
            "type": "Bool",
            "nilable": false
          },
          {
            "name": "user_id",
            "type": "int32",
            "nilable": false
          },
          {
            "name": "score",
            "type": "int32",
            "nilable": false
          },
          {
            "name": "force",
            "type": "Bool",
            "description": "Pass true to update the score even if it decreases. If the score is 0, the user will be deleted from the high score table",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Updates the game score of the specified user in a game; for bots only @inline_message_id Inline message identifier @edit_message True, if the message should be edited @user_id User identifier @score The new score",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "deleteChatReplyMarkup",
        "properties": [
          {
            "name": "chat_id",
            "type": "int53",
            "nilable": false
          },
          {
            "name": "message_id",
            "type": "int53",
            "description": "The message identifier of the used keyboard",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Deletes the default reply markup from a chat. Must be called after a one-time keyboard or a ForceReply reply markup has been used. UpdateChatReplyMarkup will be sent if the reply markup will be changed @chat_id Chat identifier",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "sendChatAction",
        "properties": [
          {
            "name": "chat_id",
            "type": "int53",
            "nilable": false
          },
          {
            "name": "action",
            "type": "ChatAction",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Sends a notification about user activity in a chat @chat_id Chat identifier @action The action description",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "openChat",
        "properties": [
          {
            "name": "chat_id",
            "type": "int53",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Informs TDLib that the chat is opened by the user. Many useful activities depend on the chat being opened or closed (e.g., in supergroups and channels all updates are received only for opened chats) @chat_id Chat identifier",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "closeChat",
        "properties": [
          {
            "name": "chat_id",
            "type": "int53",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Informs TDLib that the chat is closed by the user. Many useful activities depend on the chat being opened or closed @chat_id Chat identifier",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "viewMessages",
        "properties": [
          {
            "name": "chat_id",
            "type": "int53",
            "nilable": false
          },
          {
            "name": "message_ids",
            "type": "vector<int53>",
            "nilable": false
          },
          {
            "name": "force_read",
            "type": "Bool",
            "description": "True, if messages in closed chats should be marked as read",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Informs TDLib that messages are being viewed by the user. Many useful activities depend on whether the messages are currently being viewed or not (e.g., marking messages as read, incrementing a view counter, updating a view counter, removing deleted messages in supergroups and channels) @chat_id Chat identifier @message_ids The identifiers of the messages being viewed",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "openMessageContent",
        "properties": [
          {
            "name": "chat_id",
            "type": "int53",
            "nilable": false
          },
          {
            "name": "message_id",
            "type": "int53",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Informs TDLib that the message content has been opened (e.g., the user has opened a photo, video, document, location or venue, or has listened to an audio file or voice note message). An updateMessageContentOpened update will be generated if something has changed @chat_id Chat identifier of the message @message_id Identifier of the message with the opened content",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "readAllChatMentions",
        "properties": [
          {
            "name": "chat_id",
            "type": "int53",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Marks all mentions in a chat as read @chat_id Chat identifier",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "setChatTitle",
        "properties": [
          {
            "name": "chat_id",
            "type": "int53",
            "description": "Chat identifier @title New title of the chat; 1-128 characters",
            "nilable": false
          },
          {
            "name": "title",
            "type": "string",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Changes the chat title. Supported only for basic groups, supergroups and channels. Requires can_change_info rights. The title will not be changed until the request to the server has been completed",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "setChatPhoto",
        "properties": [
          {
            "name": "chat_id",
            "type": "int53",
            "description": "Chat identifier @photo New chat photo. You can use a zero InputFileId to delete the chat photo. Files that are accessible only by HTTP URL are not acceptable",
            "nilable": false
          },
          {
            "name": "photo",
            "type": "InputFile",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Changes the photo of a chat. Supported only for basic groups, supergroups and channels. Requires can_change_info rights. The photo will not be changed before request to the server has been completed",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "setChatPermissions",
        "properties": [
          {
            "name": "chat_id",
            "type": "int53",
            "description": "Chat identifier @permissions New non-administrator members permissions in the chat",
            "nilable": false
          },
          {
            "name": "permissions",
            "type": "chatPermissions",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Changes the chat members permissions. Supported only for basic groups and supergroups. Requires can_restrict_members administrator right",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "setChatDraftMessage",
        "properties": [
          {
            "name": "chat_id",
            "type": "int53",
            "nilable": false
          },
          {
            "name": "draft_message",
            "type": "draftMessage",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Changes the draft message in a chat @chat_id Chat identifier @draft_message New draft message; may be null",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "setChatNotificationSettings",
        "properties": [
          {
            "name": "chat_id",
            "type": "int53",
            "nilable": false
          },
          {
            "name": "notification_settings",
            "type": "chatNotificationSettings",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Changes the notification settings of a chat @chat_id Chat identifier @notification_settings New notification settings for the chat",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "toggleChatIsPinned",
        "properties": [
          {
            "name": "chat_id",
            "type": "int53",
            "nilable": false
          },
          {
            "name": "is_pinned",
            "type": "Bool",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Changes the pinned state of a chat. You can pin up to GetOption(\"pinned_chat_count_max\") non-secret chats and the same number of secret chats @chat_id Chat identifier @is_pinned New value of is_pinned",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "toggleChatIsMarkedAsUnread",
        "properties": [
          {
            "name": "chat_id",
            "type": "int53",
            "nilable": false
          },
          {
            "name": "is_marked_as_unread",
            "type": "Bool",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Changes the marked as unread state of a chat @chat_id Chat identifier @is_marked_as_unread New value of is_marked_as_unread",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "toggleChatDefaultDisableNotification",
        "properties": [
          {
            "name": "chat_id",
            "type": "int53",
            "nilable": false
          },
          {
            "name": "default_disable_notification",
            "type": "Bool",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Changes the value of the default disable_notification parameter, used when a message is sent to a chat @chat_id Chat identifier @default_disable_notification New value of default_disable_notification",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "setChatClientData",
        "properties": [
          {
            "name": "chat_id",
            "type": "int53",
            "nilable": false
          },
          {
            "name": "client_data",
            "type": "string",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Changes client data associated with a chat @chat_id Chat identifier @client_data New value of client_data",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "setChatDescription",
        "properties": [
          {
            "name": "chat_id",
            "type": "int53",
            "nilable": false
          },
          {
            "name": "description",
            "type": "string",
            "description": "Changes information about a chat. Available for basic groups, supergroups, and channels. Requires can_change_info rights @chat_id Identifier of the chat @param_description New chat description; 0-255 characters",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Changes information about a chat. Available for basic groups, supergroups, and channels. Requires can_change_info rights @chat_id Identifier of the chat @param_description New chat description; 0-255 characters",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "pinChatMessage",
        "properties": [
          {
            "name": "chat_id",
            "type": "int53",
            "nilable": false
          },
          {
            "name": "message_id",
            "type": "int53",
            "nilable": false
          },
          {
            "name": "disable_notification",
            "type": "Bool",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Pins a message in a chat; requires can_pin_messages rights @chat_id Identifier of the chat @message_id Identifier of the new pinned message @disable_notification True, if there should be no notification about the pinned message",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "unpinChatMessage",
        "properties": [
          {
            "name": "chat_id",
            "type": "int53",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Removes the pinned message from a chat; requires can_pin_messages rights in the group or channel @chat_id Identifier of the chat",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "joinChat",
        "properties": [
          {
            "name": "chat_id",
            "type": "int53",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Adds current user as a new member to a chat. Private and secret chats can't be joined using this method @chat_id Chat identifier",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "leaveChat",
        "properties": [
          {
            "name": "chat_id",
            "type": "int53",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Removes current user from chat members. Private and secret chats can't be left using this method @chat_id Chat identifier",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "addChatMember",
        "properties": [
          {
            "name": "chat_id",
            "type": "int53",
            "description": "Chat identifier @user_id Identifier of the user @forward_limit The number of earlier messages from the chat to be forwarded to the new member; up to 100. Ignored for supergroups and channels",
            "nilable": false
          },
          {
            "name": "user_id",
            "type": "int32",
            "nilable": false
          },
          {
            "name": "forward_limit",
            "type": "int32",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Adds a new member to a chat. Members can't be added to private or secret chats. Members will not be added until the chat state has been synchronized with the server",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "addChatMembers",
        "properties": [
          {
            "name": "chat_id",
            "type": "int53",
            "description": "Chat identifier @user_ids Identifiers of the users to be added to the chat",
            "nilable": false
          },
          {
            "name": "user_ids",
            "type": "vector<int32>",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Adds multiple new members to a chat. Currently this option is only available for supergroups and channels. This option can't be used to join a chat. Members can't be added to a channel if it has more than 200 members. Members will not be added until the chat state has been synchronized with the server",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "setChatMemberStatus",
        "properties": [
          {
            "name": "chat_id",
            "type": "int53",
            "description": "Chat identifier @user_id User identifier @status The new status of the member in the chat",
            "nilable": false
          },
          {
            "name": "user_id",
            "type": "int32",
            "nilable": false
          },
          {
            "name": "status",
            "type": "ChatMemberStatus",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Changes the status of a chat member, needs appropriate privileges. This function is currently not suitable for adding new members to the chat; instead, use addChatMember. The chat member status will not be changed until it has been synchronized with the server",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "clearAllDraftMessages",
        "properties": [
          {
            "name": "exclude_secret_chats",
            "type": "Bool",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Clears draft messages in all chats @exclude_secret_chats If true, local draft messages in secret chats will not be cleared",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "setScopeNotificationSettings",
        "properties": [
          {
            "name": "scope",
            "type": "NotificationSettingsScope",
            "nilable": false
          },
          {
            "name": "notification_settings",
            "type": "scopeNotificationSettings",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Changes notification settings for chats of a given type @scope Types of chats for which to change the notification settings @notification_settings The new notification settings for the given scope",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "resetAllNotificationSettings",
        "properties": [],
        "type": "Ok",
        "description": "Resets all notification settings to their default values. By default, all chats are unmuted, the sound is set to \"default\" and message previews are shown",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "setPinnedChats",
        "properties": [
          {
            "name": "chat_ids",
            "type": "vector<int53>",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Changes the order of pinned chats @chat_ids The new list of pinned chats",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "cancelDownloadFile",
        "properties": [
          {
            "name": "file_id",
            "type": "int32",
            "nilable": false
          },
          {
            "name": "only_if_pending",
            "type": "Bool",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Stops the downloading of a file. If a file has already been downloaded, does nothing @file_id Identifier of a file to stop downloading @only_if_pending Pass true to stop downloading only if it hasn't been started, i.e. request hasn't been sent to server",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "cancelUploadFile",
        "properties": [
          {
            "name": "file_id",
            "type": "int32",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Stops the uploading of a file. Supported only for files uploaded by using uploadFile. For other files the behavior is undefined @file_id Identifier of the file to stop uploading",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "writeGeneratedFilePart",
        "properties": [
          {
            "name": "generation_id",
            "type": "int64",
            "description": "The identifier of the generation process @offset The offset from which to write the data to the file @data The data to write",
            "nilable": false
          },
          {
            "name": "offset",
            "type": "int32",
            "nilable": false
          },
          {
            "name": "data",
            "type": "bytes",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Writes a part of a generated file. This method is intended to be used only if the client has no direct access to TDLib's file system, because it is usually slower than a direct write to the destination file",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "setFileGenerationProgress",
        "properties": [
          {
            "name": "generation_id",
            "type": "int64",
            "description": "The identifier of the generation process",
            "nilable": false
          },
          {
            "name": "expected_size",
            "type": "int32",
            "description": "Expected size of the generated file, in bytes; 0 if unknown",
            "nilable": false
          },
          {
            "name": "local_prefix_size",
            "type": "int32",
            "description": "The number of bytes already generated",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Informs TDLib on a file generation prograss",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "finishFileGeneration",
        "properties": [
          {
            "name": "generation_id",
            "type": "int64",
            "description": "The identifier of the generation process",
            "nilable": false
          },
          {
            "name": "error",
            "type": "error",
            "description": "If set, means that file generation has failed and should be terminated",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Finishes the file generation",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "deleteFile",
        "properties": [
          {
            "name": "file_id",
            "type": "int32",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Deletes a file from the TDLib file cache @file_id Identifier of the file to delete",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "acceptCall",
        "properties": [
          {
            "name": "call_id",
            "type": "int32",
            "nilable": false
          },
          {
            "name": "protocol",
            "type": "callProtocol",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Accepts an incoming call @call_id Call identifier @protocol Description of the call protocols supported by the client",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "discardCall",
        "properties": [
          {
            "name": "call_id",
            "type": "int32",
            "nilable": false
          },
          {
            "name": "is_disconnected",
            "type": "Bool",
            "nilable": false
          },
          {
            "name": "duration",
            "type": "int32",
            "nilable": false
          },
          {
            "name": "connection_id",
            "type": "int64",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Discards a call @call_id Call identifier @is_disconnected True, if the user was disconnected @duration The call duration, in seconds @connection_id Identifier of the connection used during the call",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "sendCallRating",
        "properties": [
          {
            "name": "call_id",
            "type": "int32",
            "nilable": false
          },
          {
            "name": "rating",
            "type": "int32",
            "nilable": false
          },
          {
            "name": "comment",
            "type": "string",
            "nilable": false
          },
          {
            "name": "problems",
            "type": "vector<CallProblem>",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Sends a call rating @call_id Call identifier @rating Call rating; 1-5 @comment An optional user comment if the rating is less than 5 @problems List of the exact types of problems with the call, specified by the user",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "sendCallDebugInformation",
        "properties": [
          {
            "name": "call_id",
            "type": "int32",
            "nilable": false
          },
          {
            "name": "debug_information",
            "type": "string",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Sends debug information for a call @call_id Call identifier @debug_information Debug information in application-specific format",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "blockUser",
        "properties": [
          {
            "name": "user_id",
            "type": "int32",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Adds a user to the blacklist @user_id User identifier",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "unblockUser",
        "properties": [
          {
            "name": "user_id",
            "type": "int32",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Removes a user from the blacklist @user_id User identifier",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "removeContacts",
        "properties": [
          {
            "name": "user_ids",
            "type": "vector<int32>",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Removes users from the contact list @user_ids Identifiers of users to be deleted",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "clearImportedContacts",
        "properties": [],
        "type": "Ok",
        "description": "Clears all imported contacts, contact list remains unchanged",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "changeStickerSet",
        "properties": [
          {
            "name": "set_id",
            "type": "int64",
            "nilable": false
          },
          {
            "name": "is_installed",
            "type": "Bool",
            "nilable": false
          },
          {
            "name": "is_archived",
            "type": "Bool",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Installs/uninstalls or activates/archives a sticker set @set_id Identifier of the sticker set @is_installed The new value of is_installed @is_archived The new value of is_archived. A sticker set can't be installed and archived simultaneously",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "viewTrendingStickerSets",
        "properties": [
          {
            "name": "sticker_set_ids",
            "type": "vector<int64>",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Informs the server that some trending sticker sets have been viewed by the user @sticker_set_ids Identifiers of viewed trending sticker sets",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "reorderInstalledStickerSets",
        "properties": [
          {
            "name": "is_masks",
            "type": "Bool",
            "nilable": false
          },
          {
            "name": "sticker_set_ids",
            "type": "vector<int64>",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Changes the order of installed sticker sets @is_masks Pass true to change the order of mask sticker sets; pass false to change the order of ordinary sticker sets @sticker_set_ids Identifiers of installed sticker sets in the new correct order",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "removeRecentSticker",
        "properties": [
          {
            "name": "is_attached",
            "type": "Bool",
            "nilable": false
          },
          {
            "name": "sticker",
            "type": "InputFile",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Removes a sticker from the list of recently used stickers @is_attached Pass true to remove the sticker from the list of stickers recently attached to photo or video files; pass false to remove the sticker from the list of recently sent stickers @sticker Sticker file to delete",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "clearRecentStickers",
        "properties": [
          {
            "name": "is_attached",
            "type": "Bool",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Clears the list of recently used stickers @is_attached Pass true to clear the list of stickers recently attached to photo or video files; pass false to clear the list of recently sent stickers",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "addFavoriteSticker",
        "properties": [
          {
            "name": "sticker",
            "type": "InputFile",
            "description": "Sticker file to add",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Adds a new sticker to the list of favorite stickers. The new sticker is added to the top of the list. If the sticker was already in the list, it is removed from the list first. Only stickers belonging to a sticker set can be added to this list",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "removeFavoriteSticker",
        "properties": [
          {
            "name": "sticker",
            "type": "InputFile",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Removes a sticker from the list of favorite stickers @sticker Sticker file to delete from the list",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "addSavedAnimation",
        "properties": [
          {
            "name": "animation",
            "type": "InputFile",
            "description": "The animation file to be added. Only animations known to the server (i.e. successfully sent via a message) can be added to the list",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Manually adds a new animation to the list of saved animations. The new animation is added to the beginning of the list. If the animation was already in the list, it is removed first. Only non-secret video animations with MIME type \"video/mp4\" can be added to the list",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "removeSavedAnimation",
        "properties": [
          {
            "name": "animation",
            "type": "InputFile",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Removes an animation from the list of saved animations @animation Animation file to be removed",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "removeRecentHashtag",
        "properties": [
          {
            "name": "hashtag",
            "type": "string",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Removes a hashtag from the list of recently used hashtags @hashtag Hashtag to delete",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "setProfilePhoto",
        "properties": [
          {
            "name": "photo",
            "type": "InputFile",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Uploads a new profile photo for the current user. If something changes, updateUser will be sent @photo Profile photo to set. inputFileId and inputFileRemote may still be unsupported",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "deleteProfilePhoto",
        "properties": [
          {
            "name": "profile_photo_id",
            "type": "int64",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Deletes a profile photo. If something changes, updateUser will be sent @profile_photo_id Identifier of the profile photo to delete",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "setName",
        "properties": [
          {
            "name": "first_name",
            "type": "string",
            "nilable": false
          },
          {
            "name": "last_name",
            "type": "string",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Changes the first and last name of the current user. If something changes, updateUser will be sent @first_name The new value of the first name for the user; 1-64 characters @last_name The new value of the optional last name for the user; 0-64 characters",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "setBio",
        "properties": [
          {
            "name": "bio",
            "type": "string",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Changes the bio of the current user @bio The new value of the user bio; 0-70 characters without line feeds",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "setUsername",
        "properties": [
          {
            "name": "username",
            "type": "string",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Changes the username of the current user. If something changes, updateUser will be sent @username The new value of the username. Use an empty string to remove the username",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "checkChangePhoneNumberCode",
        "properties": [
          {
            "name": "code",
            "type": "string",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Checks the authentication code sent to confirm a new phone number of the user @code Verification code received by SMS, phone call or flash call",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "terminateSession",
        "properties": [
          {
            "name": "session_id",
            "type": "int64",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Terminates a session of the current user @session_id Session identifier",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "terminateAllOtherSessions",
        "properties": [],
        "type": "Ok",
        "description": "Terminates all other sessions of the current user",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "disconnectWebsite",
        "properties": [
          {
            "name": "website_id",
            "type": "int64",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Disconnects website from the current user's Telegram account @website_id Website identifier",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "disconnectAllWebsites",
        "properties": [],
        "type": "Ok",
        "description": "Disconnects all websites from the current user's Telegram account",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "setSupergroupUsername",
        "properties": [
          {
            "name": "supergroup_id",
            "type": "int32",
            "nilable": false
          },
          {
            "name": "username",
            "type": "string",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Changes the username of a supergroup or channel, requires creator privileges in the supergroup or channel @supergroup_id Identifier of the supergroup or channel @username New value of the username. Use an empty string to remove the username",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "setSupergroupStickerSet",
        "properties": [
          {
            "name": "supergroup_id",
            "type": "int32",
            "nilable": false
          },
          {
            "name": "sticker_set_id",
            "type": "int64",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Changes the sticker set of a supergroup; requires can_change_info rights @supergroup_id Identifier of the supergroup @sticker_set_id New value of the supergroup sticker set identifier. Use 0 to remove the supergroup sticker set",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "toggleSupergroupSignMessages",
        "properties": [
          {
            "name": "supergroup_id",
            "type": "int32",
            "nilable": false
          },
          {
            "name": "sign_messages",
            "type": "Bool",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Toggles sender signatures messages sent in a channel; requires can_change_info rights @supergroup_id Identifier of the channel @sign_messages New value of sign_messages",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "toggleSupergroupIsAllHistoryAvailable",
        "properties": [
          {
            "name": "supergroup_id",
            "type": "int32",
            "nilable": false
          },
          {
            "name": "is_all_history_available",
            "type": "Bool",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Toggles whether the message history of a supergroup is available to new members; requires can_change_info rights @supergroup_id The identifier of the supergroup @is_all_history_available The new value of is_all_history_available",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "reportSupergroupSpam",
        "properties": [
          {
            "name": "supergroup_id",
            "type": "int32",
            "nilable": false
          },
          {
            "name": "user_id",
            "type": "int32",
            "nilable": false
          },
          {
            "name": "message_ids",
            "type": "vector<int53>",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Reports some messages from a user in a supergroup as spam; requires administrator rights in the supergroup @supergroup_id Supergroup identifier @user_id User identifier @message_ids Identifiers of messages sent in the supergroup by the user. This list must be non-empty",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "deleteSupergroup",
        "properties": [
          {
            "name": "supergroup_id",
            "type": "int32",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Deletes a supergroup or channel along with all messages in the corresponding chat. This will release the supergroup or channel username and remove all members; requires creator privileges in the supergroup or channel. Chats with more than 1000 members can't be deleted using this method @supergroup_id Identifier of the supergroup or channel",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "closeSecretChat",
        "properties": [
          {
            "name": "secret_chat_id",
            "type": "int32",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Closes a secret chat, effectively transfering its state to secretChatStateClosed @secret_chat_id Secret chat identifier",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "deleteSavedOrderInfo",
        "properties": [],
        "type": "Ok",
        "description": "Deletes saved order info",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "deleteSavedCredentials",
        "properties": [],
        "type": "Ok",
        "description": "Deletes saved credentials for all payment provider bots",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "removeBackground",
        "properties": [
          {
            "name": "background_id",
            "type": "int64",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Removes background from the list of installed backgrounds @background_id The background indentifier",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "resetBackgrounds",
        "properties": [],
        "type": "Ok",
        "description": "Resets list of installed backgrounds to its default value",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "synchronizeLanguagePack",
        "properties": [
          {
            "name": "language_pack_id",
            "type": "string",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Fetches the latest versions of all strings from a language pack in the current localization target from the server. This method doesn't need to be called explicitly for the current used/base language packs. Can be called before authorization @language_pack_id Language pack identifier",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "addCustomServerLanguagePack",
        "properties": [
          {
            "name": "language_pack_id",
            "type": "string",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Adds a custom server language pack to the list of installed language packs in current localization target. Can be called before authorization @language_pack_id Identifier of a language pack to be added; may be different from a name that is used in an \"https://t.me/setlanguage/\" link",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "setCustomLanguagePack",
        "properties": [
          {
            "name": "info",
            "type": "languagePackInfo",
            "nilable": false
          },
          {
            "name": "strings",
            "type": "vector<languagePackString>",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Adds or changes a custom local language pack to the current localization target @info Information about the language pack. Language pack ID must start with 'X', consist only of English letters, digits and hyphens, and must not exceed 64 characters. Can be called before authorization @strings Strings of the new language pack",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "editCustomLanguagePackInfo",
        "properties": [
          {
            "name": "info",
            "type": "languagePackInfo",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Edits information about a custom local language pack in the current localization target. Can be called before authorization @info New information about the custom local language pack",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "setCustomLanguagePackString",
        "properties": [
          {
            "name": "language_pack_id",
            "type": "string",
            "nilable": false
          },
          {
            "name": "new_string",
            "type": "languagePackString",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Adds, edits or deletes a string in a custom local language pack. Can be called before authorization @language_pack_id Identifier of a previously added custom local language pack in the current localization target @new_string New language pack string",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "deleteLanguagePack",
        "properties": [
          {
            "name": "language_pack_id",
            "type": "string",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Deletes all information about a language pack in the current localization target. The language pack which is currently in use (including base language pack) or is being synchronized can't be deleted. Can be called before authorization @language_pack_id Identifier of the language pack to delete",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "processPushNotification",
        "properties": [
          {
            "name": "payload",
            "type": "string",
            "description": "JSON-encoded push notification payload with all fields sent by the server, and \"google.sent_time\" and \"google.notification.sound\" fields added",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Handles a push notification. Returns error with code 406 if the push notification is not supported and connection to the server is required to fetch new data. Can be called before authorization",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "setUserPrivacySettingRules",
        "properties": [
          {
            "name": "setting",
            "type": "UserPrivacySetting",
            "nilable": false
          },
          {
            "name": "rules",
            "type": "userPrivacySettingRules",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Changes user privacy settings @setting The privacy setting @rules The new privacy rules",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "setOption",
        "properties": [
          {
            "name": "name",
            "type": "string",
            "description": "The name of the option @value The new value of the option",
            "nilable": false
          },
          {
            "name": "value",
            "type": "OptionValue",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Sets the value of an option. (Check the list of available options on https://core.telegram.org/tdlib/options.) Only writable options can be set. Can be called before authorization",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "setAccountTtl",
        "properties": [
          {
            "name": "ttl",
            "type": "accountTtl",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Changes the period of inactivity after which the account of the current user will automatically be deleted @ttl New account TTL",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "deleteAccount",
        "properties": [
          {
            "name": "reason",
            "type": "string",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Deletes the account of the current user, deleting all information associated with the user from the server. The phone number of the account can be used to create a new account. Can be called before authorization when the current authorization state is authorizationStateWaitPassword @reason The reason why the account was deleted; optional",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "changeChatReportSpamState",
        "properties": [
          {
            "name": "chat_id",
            "type": "int53",
            "nilable": false
          },
          {
            "name": "is_spam_chat",
            "type": "Bool",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Reports to the server whether a chat is a spam chat or not. Can be used only if ChatReportSpamState.can_report_spam is true. After this request, ChatReportSpamState.can_report_spam becomes false forever @chat_id Chat identifier @is_spam_chat If true, the chat will be reported as spam; otherwise it will be marked as not spam",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "reportChat",
        "properties": [
          {
            "name": "chat_id",
            "type": "int53",
            "nilable": false
          },
          {
            "name": "reason",
            "type": "ChatReportReason",
            "nilable": false
          },
          {
            "name": "message_ids",
            "type": "vector<int53>",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Reports a chat to the Telegram moderators. Supported only for supergroups, channels, or private chats with bots, since other chats can't be checked by moderators @chat_id Chat identifier @reason The reason for reporting the chat @message_ids Identifiers of reported messages, if any",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "setNetworkType",
        "properties": [
          {
            "name": "type",
            "type": "NetworkType",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Sets the current network type. Can be called before authorization. Calling this method forces all network connections to reopen, mitigating the delay in switching between different networks, so it should be called whenever the network is changed, even if the network type remains the same.",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "addNetworkStatistics",
        "properties": [
          {
            "name": "entry",
            "type": "NetworkStatisticsEntry",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Adds the specified data to data usage statistics. Can be called before authorization @entry The network statistics entry with the data to be added to statistics",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "resetNetworkStatistics",
        "properties": [],
        "type": "Ok",
        "description": "Resets all network data usage statistics to zero. Can be called before authorization",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "setAutoDownloadSettings",
        "properties": [
          {
            "name": "settings",
            "type": "autoDownloadSettings",
            "nilable": false
          },
          {
            "name": "type",
            "type": "NetworkType",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Sets auto-download settings @settings New user auto-download settings @type Type of the network for which the new settings are applied",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "deletePassportElement",
        "properties": [
          {
            "name": "type",
            "type": "PassportElementType",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Deletes a Telegram Passport element @type Element type",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "setPassportElementErrors",
        "properties": [
          {
            "name": "user_id",
            "type": "int32",
            "nilable": false
          },
          {
            "name": "errors",
            "type": "vector<inputPassportElementError>",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Informs the user that some of the elements in their Telegram Passport contain errors; for bots only. The user will not be able to resend the elements, until the errors are fixed @user_id User identifier @errors The errors",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "checkPhoneNumberVerificationCode",
        "properties": [
          {
            "name": "code",
            "type": "string",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Checks the phone number verification code for Telegram Passport @code Verification code",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "checkEmailAddressVerificationCode",
        "properties": [
          {
            "name": "code",
            "type": "string",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Checks the email address verification code for Telegram Passport @code Verification code",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "sendPassportAuthorizationForm",
        "properties": [
          {
            "name": "autorization_form_id",
            "type": "int32",
            "description": "Authorization form identifier @types Types of Telegram Passport elements chosen by user to complete the authorization form",
            "nilable": false
          },
          {
            "name": "types",
            "type": "vector<PassportElementType>",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Sends a Telegram Passport authorization form, effectively sharing data with the service. This method must be called after getPassportAuthorizationFormAvailableElements if some previously available elements need to be used",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "checkPhoneNumberConfirmationCode",
        "properties": [
          {
            "name": "code",
            "type": "string",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Checks phone number confirmation code @code The phone number confirmation code",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "setBotUpdatesStatus",
        "properties": [
          {
            "name": "pending_update_count",
            "type": "int32",
            "nilable": false
          },
          {
            "name": "error_message",
            "type": "string",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Informs the server about the number of pending bot updates if they haven't been processed for a long time; for bots only @pending_update_count The number of pending updates @error_message The last error message",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "setStickerPositionInSet",
        "properties": [
          {
            "name": "sticker",
            "type": "InputFile",
            "nilable": false
          },
          {
            "name": "position",
            "type": "int32",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Changes the position of a sticker in the set to which it belongs; for bots only. The sticker set must have been created by the bot @sticker Sticker @position New position of the sticker in the set, zero-based",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "removeStickerFromSet",
        "properties": [
          {
            "name": "sticker",
            "type": "InputFile",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Removes a sticker from the set to which it belongs; for bots only. The sticker set must have been created by the bot @sticker Sticker",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "acceptTermsOfService",
        "properties": [
          {
            "name": "terms_of_service_id",
            "type": "string",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Accepts Telegram terms of services @terms_of_service_id Terms of service identifier",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "answerCustomQuery",
        "properties": [
          {
            "name": "custom_query_id",
            "type": "int64",
            "nilable": false
          },
          {
            "name": "data",
            "type": "string",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Answers a custom query; for bots only @custom_query_id Identifier of a custom query @data JSON-serialized answer to the query",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "setAlarm",
        "properties": [
          {
            "name": "seconds",
            "type": "double",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Succeeds after a specified amount of time has passed. Can be called before authorization. Can be called before initialization @seconds Number of seconds before the function returns",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "saveApplicationLogEvent",
        "properties": [
          {
            "name": "type",
            "type": "string",
            "nilable": false
          },
          {
            "name": "chat_id",
            "type": "int53",
            "nilable": false
          },
          {
            "name": "data",
            "type": "JsonValue",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Saves application log event on the server. Can be called before authorization @type Event type @chat_id Optional chat identifier, associated with the event @data The log event data",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "enableProxy",
        "properties": [
          {
            "name": "proxy_id",
            "type": "int32",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Enables a proxy. Only one proxy can be enabled at a time. Can be called before authorization @proxy_id Proxy identifier",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "disableProxy",
        "properties": [],
        "type": "Ok",
        "description": "Disables the currently enabled proxy. Can be called before authorization",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "removeProxy",
        "properties": [
          {
            "name": "proxy_id",
            "type": "int32",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Removes a proxy server. Can be called before authorization @proxy_id Proxy identifier",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "setLogStream",
        "properties": [
          {
            "name": "log_stream",
            "type": "LogStream",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Sets new log stream for internal logging of TDLib. This is an offline method. Can be called before authorization. Can be called synchronously @log_stream New log stream",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "setLogVerbosityLevel",
        "properties": [
          {
            "name": "new_verbosity_level",
            "type": "int32",
            "description": "New value of the verbosity level for logging. Value 0 corresponds to fatal errors, value 1 corresponds to errors, value 2 corresponds to warnings and debug warnings, value 3 corresponds to informational, value 4 corresponds to debug, value 5 corresponds to verbose debug, value greater than 5 and up to 1023 can be used to enable even more logging",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Sets the verbosity level of the internal logging of TDLib. This is an offline method. Can be called before authorization. Can be called synchronously",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "setLogTagVerbosityLevel",
        "properties": [
          {
            "name": "tag",
            "type": "string",
            "description": "Logging tag to change verbosity level @new_verbosity_level New verbosity level; 1-1024",
            "nilable": false
          },
          {
            "name": "new_verbosity_level",
            "type": "int32",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Sets the verbosity level for a specified TDLib internal log tag. This is an offline method. Can be called before authorization. Can be called synchronously",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "addLogMessage",
        "properties": [
          {
            "name": "verbosity_level",
            "type": "int32",
            "description": "Minimum verbosity level needed for the message to be logged, 0-1023 @text Text of a message to log",
            "nilable": false
          },
          {
            "name": "text",
            "type": "string",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Adds a message to TDLib internal log. This is an offline method. Can be called before authorization. Can be called synchronously",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "testCallEmpty",
        "properties": [],
        "type": "Ok",
        "description": "Does nothing; for testing only. This is an offline method. Can be called before authorization",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "testNetwork",
        "properties": [],
        "type": "Ok",
        "description": "Sends a simple network request to the Telegram servers; for testing only. Can be called before authorization",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "testProxy",
        "properties": [
          {
            "name": "server",
            "type": "string",
            "nilable": false
          },
          {
            "name": "port",
            "type": "int32",
            "nilable": false
          },
          {
            "name": "type",
            "type": "ProxyType",
            "nilable": false
          },
          {
            "name": "dc_id",
            "type": "int32",
            "description": "Identifier of a datacenter, with which to test connection @timeout Maximum overall timeout for the request",
            "nilable": false
          },
          {
            "name": "timeout",
            "type": "double",
            "nilable": false
          }
        ],
        "type": "Ok",
        "description": "Sends a simple network request to the Telegram servers via proxy; for testing only. Can be called before authorization @server Proxy server IP address @port Proxy server port @type Proxy type",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "testGetDifference",
        "properties": [],
        "type": "Ok",
        "description": "Forces an updates.getDifference call to the Telegram servers; for testing only",
        "children": []
      }
    ],
    "Updates": [
      {
        "function": true,
        "is_abstract": false,
        "name": "getCurrentState",
        "properties": [],
        "type": "Updates",
        "description": "Returns all updates needed to restore current TDLib state, i.e. all actual UpdateAuthorizationState/UpdateUser/UpdateNewChat and others. This is especially usefull if TDLib is run in a separate process. This is an offline method. Can be called before authorization",
        "children": []
      }
    ],
    "PasswordState": [
      {
        "function": true,
        "is_abstract": false,
        "name": "getPasswordState",
        "properties": [],
        "type": "PasswordState",
        "description": "Returns the current state of 2-step verification",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "setPassword",
        "properties": [
          {
            "name": "old_password",
            "type": "string",
            "description": "Previous password of the user @new_password New password of the user; may be empty to remove the password @new_hint New password hint; may be empty @set_recovery_email_address Pass true if the recovery email address should be changed @new_recovery_email_address New recovery email address; may be empty",
            "nilable": true
          },
          {
            "name": "new_password",
            "type": "string",
            "nilable": false
          },
          {
            "name": "new_hint",
            "type": "string",
            "nilable": false
          },
          {
            "name": "set_recovery_email_address",
            "type": "Bool",
            "nilable": false
          },
          {
            "name": "new_recovery_email_address",
            "type": "string",
            "nilable": false
          }
        ],
        "type": "PasswordState",
        "description": "Changes the password for the user. If a new recovery email address is specified, then the change will not be applied until the new recovery email address is confirmed",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "setRecoveryEmailAddress",
        "properties": [
          {
            "name": "password",
            "type": "string",
            "nilable": false
          },
          {
            "name": "new_recovery_email_address",
            "type": "string",
            "nilable": false
          }
        ],
        "type": "PasswordState",
        "description": "Changes the 2-step verification recovery email address of the user. If a new recovery email address is specified, then the change will not be applied until the new recovery email address is confirmed.",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "checkRecoveryEmailAddressCode",
        "properties": [
          {
            "name": "code",
            "type": "string",
            "nilable": false
          }
        ],
        "type": "PasswordState",
        "description": "Checks the 2-step verification recovery email address verification code @code Verification code",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "resendRecoveryEmailAddressCode",
        "properties": [],
        "type": "PasswordState",
        "description": "Resends the 2-step verification recovery email address verification code",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "recoverPassword",
        "properties": [
          {
            "name": "recovery_code",
            "type": "string",
            "nilable": false
          }
        ],
        "type": "PasswordState",
        "description": "Recovers the password using a recovery code sent to an email address that was previously set up @recovery_code Recovery code to check",
        "children": []
      }
    ],
    "RecoveryEmailAddress": [
      {
        "function": true,
        "is_abstract": false,
        "name": "getRecoveryEmailAddress",
        "properties": [
          {
            "name": "password",
            "type": "string",
            "nilable": false
          }
        ],
        "type": "RecoveryEmailAddress",
        "description": "Returns a 2-step verification recovery email address that was previously set up. This method can be used to verify a password provided by the user @password The password for the current user",
        "children": []
      }
    ],
    "EmailAddressAuthenticationCodeInfo": [
      {
        "function": true,
        "is_abstract": false,
        "name": "requestPasswordRecovery",
        "properties": [],
        "type": "EmailAddressAuthenticationCodeInfo",
        "description": "Requests to send a password recovery code to an email address that was previously set up",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "sendEmailAddressVerificationCode",
        "properties": [
          {
            "name": "email_address",
            "type": "string",
            "nilable": false
          }
        ],
        "type": "EmailAddressAuthenticationCodeInfo",
        "description": "Sends a code to verify an email address to be added to a user's Telegram Passport @email_address Email address",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "resendEmailAddressVerificationCode",
        "properties": [],
        "type": "EmailAddressAuthenticationCodeInfo",
        "description": "Re-sends the code to verify an email address to be added to a user's Telegram Passport",
        "children": []
      }
    ],
    "TemporaryPasswordState": [
      {
        "function": true,
        "is_abstract": false,
        "name": "createTemporaryPassword",
        "properties": [
          {
            "name": "password",
            "type": "string",
            "nilable": false
          },
          {
            "name": "valid_for",
            "type": "int32",
            "nilable": false
          }
        ],
        "type": "TemporaryPasswordState",
        "description": "Creates a new temporary password for processing payments @password Persistent user password @valid_for Time during which the temporary password will be valid, in seconds; should be between 60 and 86400",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "getTemporaryPasswordState",
        "properties": [],
        "type": "TemporaryPasswordState",
        "description": "Returns information about the current temporary password",
        "children": []
      }
    ],
    "User": [
      {
        "function": true,
        "is_abstract": false,
        "name": "getMe",
        "properties": [],
        "type": "User",
        "description": "Returns the current user",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "getUser",
        "properties": [
          {
            "name": "user_id",
            "type": "int32",
            "nilable": false
          }
        ],
        "type": "User",
        "description": "Returns information about a user by their identifier. This is an offline request if the current user is not a bot @user_id User identifier",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "getSupportUser",
        "properties": [],
        "type": "User",
        "description": "Returns a user that can be contacted to get support",
        "children": []
      }
    ],
    "UserFullInfo": [
      {
        "function": true,
        "is_abstract": false,
        "name": "getUserFullInfo",
        "properties": [
          {
            "name": "user_id",
            "type": "int32",
            "nilable": false
          }
        ],
        "type": "UserFullInfo",
        "description": "Returns full information about a user by their identifier @user_id User identifier",
        "children": []
      }
    ],
    "BasicGroup": [
      {
        "function": true,
        "is_abstract": false,
        "name": "getBasicGroup",
        "properties": [
          {
            "name": "basic_group_id",
            "type": "int32",
            "nilable": false
          }
        ],
        "type": "BasicGroup",
        "description": "Returns information about a basic group by its identifier. This is an offline request if the current user is not a bot @basic_group_id Basic group identifier",
        "children": []
      }
    ],
    "BasicGroupFullInfo": [
      {
        "function": true,
        "is_abstract": false,
        "name": "getBasicGroupFullInfo",
        "properties": [
          {
            "name": "basic_group_id",
            "type": "int32",
            "nilable": false
          }
        ],
        "type": "BasicGroupFullInfo",
        "description": "Returns full information about a basic group by its identifier @basic_group_id Basic group identifier",
        "children": []
      }
    ],
    "Supergroup": [
      {
        "function": true,
        "is_abstract": false,
        "name": "getSupergroup",
        "properties": [
          {
            "name": "supergroup_id",
            "type": "int32",
            "nilable": false
          }
        ],
        "type": "Supergroup",
        "description": "Returns information about a supergroup or channel by its identifier. This is an offline request if the current user is not a bot @supergroup_id Supergroup or channel identifier",
        "children": []
      }
    ],
    "SupergroupFullInfo": [
      {
        "function": true,
        "is_abstract": false,
        "name": "getSupergroupFullInfo",
        "properties": [
          {
            "name": "supergroup_id",
            "type": "int32",
            "nilable": false
          }
        ],
        "type": "SupergroupFullInfo",
        "description": "Returns full information about a supergroup or channel by its identifier, cached for up to 1 minute @supergroup_id Supergroup or channel identifier",
        "children": []
      }
    ],
    "SecretChat": [
      {
        "function": true,
        "is_abstract": false,
        "name": "getSecretChat",
        "properties": [
          {
            "name": "secret_chat_id",
            "type": "int32",
            "nilable": false
          }
        ],
        "type": "SecretChat",
        "description": "Returns information about a secret chat by its identifier. This is an offline request @secret_chat_id Secret chat identifier",
        "children": []
      }
    ],
    "Chat": [
      {
        "function": true,
        "is_abstract": false,
        "name": "getChat",
        "properties": [
          {
            "name": "chat_id",
            "type": "int53",
            "nilable": false
          }
        ],
        "type": "Chat",
        "description": "Returns information about a chat by its identifier, this is an offline request if the current user is not a bot @chat_id Chat identifier",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "searchPublicChat",
        "properties": [
          {
            "name": "username",
            "type": "string",
            "nilable": false
          }
        ],
        "type": "Chat",
        "description": "Searches a public chat by its username. Currently only private chats, supergroups and channels can be public. Returns the chat if found; otherwise an error is returned @username Username to be resolved",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "createPrivateChat",
        "properties": [
          {
            "name": "user_id",
            "type": "int32",
            "nilable": false
          },
          {
            "name": "force",
            "type": "Bool",
            "nilable": false
          }
        ],
        "type": "Chat",
        "description": "Returns an existing chat corresponding to a given user @user_id User identifier @force If true, the chat will be created without network request. In this case all information about the chat except its type, title and photo can be incorrect",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "createBasicGroupChat",
        "properties": [
          {
            "name": "basic_group_id",
            "type": "int32",
            "nilable": false
          },
          {
            "name": "force",
            "type": "Bool",
            "nilable": false
          }
        ],
        "type": "Chat",
        "description": "Returns an existing chat corresponding to a known basic group @basic_group_id Basic group identifier @force If true, the chat will be created without network request. In this case all information about the chat except its type, title and photo can be incorrect",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "createSupergroupChat",
        "properties": [
          {
            "name": "supergroup_id",
            "type": "int32",
            "nilable": false
          },
          {
            "name": "force",
            "type": "Bool",
            "nilable": false
          }
        ],
        "type": "Chat",
        "description": "Returns an existing chat corresponding to a known supergroup or channel @supergroup_id Supergroup or channel identifier @force If true, the chat will be created without network request. In this case all information about the chat except its type, title and photo can be incorrect",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "createSecretChat",
        "properties": [
          {
            "name": "secret_chat_id",
            "type": "int32",
            "nilable": false
          }
        ],
        "type": "Chat",
        "description": "Returns an existing chat corresponding to a known secret chat @secret_chat_id Secret chat identifier",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "createNewBasicGroupChat",
        "properties": [
          {
            "name": "user_ids",
            "type": "vector<int32>",
            "nilable": false
          },
          {
            "name": "title",
            "type": "string",
            "nilable": false
          }
        ],
        "type": "Chat",
        "description": "Creates a new basic group and sends a corresponding messageBasicGroupChatCreate. Returns the newly created chat @user_ids Identifiers of users to be added to the basic group @title Title of the new basic group; 1-128 characters",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "createNewSupergroupChat",
        "properties": [
          {
            "name": "title",
            "type": "string",
            "nilable": false
          },
          {
            "name": "is_channel",
            "type": "Bool",
            "nilable": false
          },
          {
            "name": "description",
            "type": "string",
            "description": "Creates a new supergroup or channel and sends a corresponding messageSupergroupChatCreate. Returns the newly created chat @title Title of the new chat; 1-128 characters @is_channel True, if a channel chat should be created @param_description Chat description; 0-255 characters",
            "nilable": false
          }
        ],
        "type": "Chat",
        "description": "Creates a new supergroup or channel and sends a corresponding messageSupergroupChatCreate. Returns the newly created chat @title Title of the new chat; 1-128 characters @is_channel True, if a channel chat should be created @param_description Chat description; 0-255 characters",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "createNewSecretChat",
        "properties": [
          {
            "name": "user_id",
            "type": "int32",
            "nilable": false
          }
        ],
        "type": "Chat",
        "description": "Creates a new secret chat. Returns the newly created chat @user_id Identifier of the target user",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "upgradeBasicGroupChatToSupergroupChat",
        "properties": [
          {
            "name": "chat_id",
            "type": "int53",
            "nilable": false
          }
        ],
        "type": "Chat",
        "description": "Creates a new supergroup from an existing basic group and sends a corresponding messageChatUpgradeTo and messageChatUpgradeFrom; requires creator privileges. Deactivates the original basic group @chat_id Identifier of the chat to upgrade",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "joinChatByInviteLink",
        "properties": [
          {
            "name": "invite_link",
            "type": "string",
            "description": "Invite link to import; should begin with \"https://t.me/joinchat/\", \"https://telegram.me/joinchat/\", or \"https://telegram.dog/joinchat/\"",
            "nilable": false
          }
        ],
        "type": "Chat",
        "description": "Uses an invite link to add the current user to the chat if possible. The new member will not be added until the chat state has been synchronized with the server",
        "children": []
      }
    ],
    "Message": [
      {
        "function": true,
        "is_abstract": false,
        "name": "getMessage",
        "properties": [
          {
            "name": "chat_id",
            "type": "int53",
            "nilable": false
          },
          {
            "name": "message_id",
            "type": "int53",
            "nilable": false
          }
        ],
        "type": "Message",
        "description": "Returns information about a message @chat_id Identifier of the chat the message belongs to @message_id Identifier of the message to get",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "getMessageLocally",
        "properties": [
          {
            "name": "chat_id",
            "type": "int53",
            "nilable": false
          },
          {
            "name": "message_id",
            "type": "int53",
            "nilable": false
          }
        ],
        "type": "Message",
        "description": "Returns information about a message, if it is available locally without sending network request. This is an offline request @chat_id Identifier of the chat the message belongs to @message_id Identifier of the message to get",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "getRepliedMessage",
        "properties": [
          {
            "name": "chat_id",
            "type": "int53",
            "nilable": false
          },
          {
            "name": "message_id",
            "type": "int53",
            "nilable": false
          }
        ],
        "type": "Message",
        "description": "Returns information about a message that is replied by given message @chat_id Identifier of the chat the message belongs to @message_id Identifier of the message reply to which get",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "getChatPinnedMessage",
        "properties": [
          {
            "name": "chat_id",
            "type": "int53",
            "nilable": false
          }
        ],
        "type": "Message",
        "description": "Returns information about a pinned chat message @chat_id Identifier of the chat the message belongs to",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "getChatMessageByDate",
        "properties": [
          {
            "name": "chat_id",
            "type": "int53",
            "nilable": false
          },
          {
            "name": "date",
            "type": "int32",
            "nilable": false
          }
        ],
        "type": "Message",
        "description": "Returns the last message sent in a chat no later than the specified date @chat_id Chat identifier @date Point in time (Unix timestamp) relative to which to search for messages",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "sendMessage",
        "properties": [
          {
            "name": "chat_id",
            "type": "int53",
            "nilable": false
          },
          {
            "name": "reply_to_message_id",
            "type": "int53",
            "nilable": false
          },
          {
            "name": "disable_notification",
            "type": "Bool",
            "description": "Pass true to disable notification for the message. Not supported in secret chats @from_background Pass true if the message is sent from the background",
            "nilable": false
          },
          {
            "name": "from_background",
            "type": "Bool",
            "nilable": false
          },
          {
            "name": "reply_markup",
            "type": "ReplyMarkup",
            "description": "Markup for replying to the message; for bots only @input_message_content The content of the message to be sent",
            "nilable": false
          },
          {
            "name": "input_message_content",
            "type": "InputMessageContent",
            "nilable": false
          }
        ],
        "type": "Message",
        "description": "Sends a message. Returns the sent message @chat_id Target chat @reply_to_message_id Identifier of the message to reply to or 0",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "sendBotStartMessage",
        "properties": [
          {
            "name": "bot_user_id",
            "type": "int32",
            "description": "Identifier of the bot @chat_id Identifier of the target chat @parameter A hidden parameter sent to the bot for deep linking purposes (https://core.telegram.org/bots#deep-linking)",
            "nilable": false
          },
          {
            "name": "chat_id",
            "type": "int53",
            "nilable": false
          },
          {
            "name": "parameter",
            "type": "string",
            "nilable": false
          }
        ],
        "type": "Message",
        "description": "Invites a bot to a chat (if it is not yet a member) and sends it the /start command. Bots can't be invited to a private chat other than the chat with the bot. Bots can't be invited to channels (although they can be added as admins) and secret chats. Returns the sent message",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "sendInlineQueryResultMessage",
        "properties": [
          {
            "name": "chat_id",
            "type": "int53",
            "nilable": false
          },
          {
            "name": "reply_to_message_id",
            "type": "int53",
            "nilable": false
          },
          {
            "name": "disable_notification",
            "type": "Bool",
            "description": "Pass true to disable notification for the message. Not supported in secret chats @from_background Pass true if the message is sent from background",
            "nilable": false
          },
          {
            "name": "from_background",
            "type": "Bool",
            "nilable": false
          },
          {
            "name": "query_id",
            "type": "int64",
            "description": "Identifier of the inline query @result_id Identifier of the inline result",
            "nilable": false
          },
          {
            "name": "result_id",
            "type": "string",
            "nilable": false
          },
          {
            "name": "hide_via_bot",
            "type": "Bool",
            "description": "If true, there will be no mention of a bot, via which the message is sent. Can be used only for bots GetOption(\"animation_search_bot_username\"), GetOption(\"photo_search_bot_username\") and GetOption(\"venue_search_bot_username\")",
            "nilable": false
          }
        ],
        "type": "Message",
        "description": "Sends the result of an inline query as a message. Returns the sent message. Always clears a chat draft message @chat_id Target chat @reply_to_message_id Identifier of a message to reply to or 0",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "sendChatSetTtlMessage",
        "properties": [
          {
            "name": "chat_id",
            "type": "int53",
            "nilable": false
          },
          {
            "name": "ttl",
            "type": "int32",
            "nilable": false
          }
        ],
        "type": "Message",
        "description": "Changes the current TTL setting (sets a new self-destruct timer) in a secret chat and sends the corresponding message @chat_id Chat identifier @ttl New TTL value, in seconds",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "addLocalMessage",
        "properties": [
          {
            "name": "chat_id",
            "type": "int53",
            "nilable": false
          },
          {
            "name": "sender_user_id",
            "type": "int32",
            "nilable": false
          },
          {
            "name": "reply_to_message_id",
            "type": "int53",
            "description": "Identifier of the message to reply to or 0 @disable_notification Pass true to disable notification for the message @input_message_content The content of the message to be added",
            "nilable": false
          },
          {
            "name": "disable_notification",
            "type": "Bool",
            "nilable": false
          },
          {
            "name": "input_message_content",
            "type": "InputMessageContent",
            "nilable": false
          }
        ],
        "type": "Message",
        "description": "Adds a local message to a chat. The message is persistent across application restarts only if the message database is used. Returns the added message @chat_id Target chat @sender_user_id Identifier of the user who will be shown as the sender of the message; may be 0 for channel posts",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "editMessageText",
        "properties": [
          {
            "name": "chat_id",
            "type": "int53",
            "description": "The chat the message belongs to @message_id Identifier of the message @reply_markup The new message reply markup; for bots only @input_message_content New text content of the message. Should be of type InputMessageText",
            "nilable": false
          },
          {
            "name": "message_id",
            "type": "int53",
            "nilable": false
          },
          {
            "name": "reply_markup",
            "type": "ReplyMarkup",
            "nilable": false
          },
          {
            "name": "input_message_content",
            "type": "InputMessageContent",
            "nilable": false
          }
        ],
        "type": "Message",
        "description": "Edits the text of a message (or a text of a game message). Returns the edited message after the edit is completed on the server side",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "editMessageLiveLocation",
        "properties": [
          {
            "name": "chat_id",
            "type": "int53",
            "description": "The chat the message belongs to @message_id Identifier of the message @reply_markup The new message reply markup; for bots only @location New location content of the message; may be null. Pass null to stop sharing the live location",
            "nilable": true
          },
          {
            "name": "message_id",
            "type": "int53",
            "nilable": false
          },
          {
            "name": "reply_markup",
            "type": "ReplyMarkup",
            "nilable": false
          },
          {
            "name": "location",
            "type": "location",
            "nilable": false
          }
        ],
        "type": "Message",
        "description": "Edits the message content of a live location. Messages can be edited for a limited period of time specified in the live location. Returns the edited message after the edit is completed on the server side",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "editMessageMedia",
        "properties": [
          {
            "name": "chat_id",
            "type": "int53",
            "description": "The chat the message belongs to @message_id Identifier of the message @reply_markup The new message reply markup; for bots only @input_message_content New content of the message. Must be one of the following types: InputMessageAnimation, InputMessageAudio, InputMessageDocument, InputMessagePhoto or InputMessageVideo",
            "nilable": false
          },
          {
            "name": "message_id",
            "type": "int53",
            "nilable": false
          },
          {
            "name": "reply_markup",
            "type": "ReplyMarkup",
            "nilable": false
          },
          {
            "name": "input_message_content",
            "type": "InputMessageContent",
            "nilable": false
          }
        ],
        "type": "Message",
        "description": "Edits the content of a message with an animation, an audio, a document, a photo or a video. The media in the message can't be replaced if the message was set to self-destruct. Media can't be replaced by self-destructing media. Media in an album can be edited only to contain a photo or a video. Returns the edited message after the edit is completed on the server side",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "editMessageCaption",
        "properties": [
          {
            "name": "chat_id",
            "type": "int53",
            "description": "The chat the message belongs to @message_id Identifier of the message @reply_markup The new message reply markup; for bots only @caption New message content caption; 0-GetOption(\"message_caption_length_max\") characters",
            "nilable": false
          },
          {
            "name": "message_id",
            "type": "int53",
            "nilable": false
          },
          {
            "name": "reply_markup",
            "type": "ReplyMarkup",
            "nilable": false
          },
          {
            "name": "caption",
            "type": "formattedText",
            "nilable": false
          }
        ],
        "type": "Message",
        "description": "Edits the message content caption. Returns the edited message after the edit is completed on the server side",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "editMessageReplyMarkup",
        "properties": [
          {
            "name": "chat_id",
            "type": "int53",
            "description": "The chat the message belongs to @message_id Identifier of the message @reply_markup The new message reply markup",
            "nilable": false
          },
          {
            "name": "message_id",
            "type": "int53",
            "nilable": false
          },
          {
            "name": "reply_markup",
            "type": "ReplyMarkup",
            "nilable": false
          }
        ],
        "type": "Message",
        "description": "Edits the message reply markup; for bots only. Returns the edited message after the edit is completed on the server side",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "setGameScore",
        "properties": [
          {
            "name": "chat_id",
            "type": "int53",
            "nilable": false
          },
          {
            "name": "message_id",
            "type": "int53",
            "nilable": false
          },
          {
            "name": "edit_message",
            "type": "Bool",
            "nilable": false
          },
          {
            "name": "user_id",
            "type": "int32",
            "nilable": false
          },
          {
            "name": "score",
            "type": "int32",
            "nilable": false
          },
          {
            "name": "force",
            "type": "Bool",
            "description": "Pass true to update the score even if it decreases. If the score is 0, the user will be deleted from the high score table",
            "nilable": false
          }
        ],
        "type": "Message",
        "description": "Updates the game score of the specified user in the game; for bots only @chat_id The chat to which the message with the game belongs @message_id Identifier of the message @edit_message True, if the message should be edited @user_id User identifier @score The new score",
        "children": []
      }
    ],
    "Messages": [
      {
        "function": true,
        "is_abstract": false,
        "name": "getMessages",
        "properties": [
          {
            "name": "chat_id",
            "type": "int53",
            "nilable": false
          },
          {
            "name": "message_ids",
            "type": "vector<int53>",
            "nilable": false
          }
        ],
        "type": "Messages",
        "description": "Returns information about messages. If a message is not found, returns null on the corresponding position of the result @chat_id Identifier of the chat the messages belong to @message_ids Identifiers of the messages to get",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "getChatHistory",
        "properties": [
          {
            "name": "chat_id",
            "type": "int53",
            "description": "Chat identifier",
            "nilable": false
          },
          {
            "name": "from_message_id",
            "type": "int53",
            "description": "Identifier of the message starting from which history must be fetched; use 0 to get results from the last message",
            "nilable": false
          },
          {
            "name": "offset",
            "type": "int32",
            "description": "Specify 0 to get results from exactly the from_message_id or a negative offset up to 99 to get additionally some newer messages",
            "nilable": false
          },
          {
            "name": "limit",
            "type": "int32",
            "description": "The maximum number of messages to be returned; must be positive and can't be greater than 100. If the offset is negative, the limit must be greater or equal to -offset. Fewer messages may be returned than specified by the limit, even if the end of the message history has not been reached",
            "nilable": false
          },
          {
            "name": "only_local",
            "type": "Bool",
            "description": "If true, returns only messages that are available locally without sending network requests",
            "nilable": false
          }
        ],
        "type": "Messages",
        "description": "Returns messages in a chat. The messages are returned in a reverse chronological order (i.e., in order of decreasing message_id).",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "searchChatMessages",
        "properties": [
          {
            "name": "chat_id",
            "type": "int53",
            "description": "Identifier of the chat in which to search messages",
            "nilable": false
          },
          {
            "name": "query",
            "type": "string",
            "description": "Query to search for",
            "nilable": false
          },
          {
            "name": "sender_user_id",
            "type": "int32",
            "description": "If not 0, only messages sent by the specified user will be returned. Not supported in secret chats",
            "nilable": false
          },
          {
            "name": "from_message_id",
            "type": "int53",
            "description": "Identifier of the message starting from which history must be fetched; use 0 to get results from the last message",
            "nilable": false
          },
          {
            "name": "offset",
            "type": "int32",
            "description": "Specify 0 to get results from exactly the from_message_id or a negative offset to get the specified message and some newer messages",
            "nilable": false
          },
          {
            "name": "limit",
            "type": "int32",
            "description": "The maximum number of messages to be returned; must be positive and can't be greater than 100. If the offset is negative, the limit must be greater than -offset. Fewer messages may be returned than specified by the limit, even if the end of the message history has not been reached",
            "nilable": false
          },
          {
            "name": "filter",
            "type": "SearchMessagesFilter",
            "description": "Filter for message content in the search results",
            "nilable": false
          }
        ],
        "type": "Messages",
        "description": "Searches for messages with given words in the chat. Returns the results in reverse chronological order, i.e. in order of decreasing message_id. Cannot be used in secret chats with a non-empty query",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "searchMessages",
        "properties": [
          {
            "name": "query",
            "type": "string",
            "description": "Query to search for",
            "nilable": false
          },
          {
            "name": "offset_date",
            "type": "int32",
            "description": "The date of the message starting from which the results should be fetched. Use 0 or any date in the future to get results from the last message",
            "nilable": false
          },
          {
            "name": "offset_chat_id",
            "type": "int53",
            "description": "The chat identifier of the last found message, or 0 for the first request",
            "nilable": false
          },
          {
            "name": "offset_message_id",
            "type": "int53",
            "description": "The message identifier of the last found message, or 0 for the first request",
            "nilable": false
          },
          {
            "name": "limit",
            "type": "int32",
            "description": "The maximum number of messages to be returned, up to 100. Fewer messages may be returned than specified by the limit, even if the end of the message history has not been reached",
            "nilable": false
          }
        ],
        "type": "Messages",
        "description": "Searches for messages in all chats except secret chats. Returns the results in reverse chronological order (i.e., in order of decreasing (date, chat_id, message_id)).",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "searchCallMessages",
        "properties": [
          {
            "name": "from_message_id",
            "type": "int53",
            "description": "Identifier of the message from which to search; use 0 to get results from the last message",
            "nilable": false
          },
          {
            "name": "limit",
            "type": "int32",
            "description": "The maximum number of messages to be returned; up to 100. Fewer messages may be returned than specified by the limit, even if the end of the message history has not been reached @only_missed If true, returns only messages with missed calls",
            "nilable": false
          },
          {
            "name": "only_missed",
            "type": "Bool",
            "nilable": false
          }
        ],
        "type": "Messages",
        "description": "Searches for call messages. Returns the results in reverse chronological order (i. e., in order of decreasing message_id). For optimal performance the number of returned messages is chosen by the library",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "searchChatRecentLocationMessages",
        "properties": [
          {
            "name": "chat_id",
            "type": "int53",
            "nilable": false
          },
          {
            "name": "limit",
            "type": "int32",
            "nilable": false
          }
        ],
        "type": "Messages",
        "description": "Returns information about the recent locations of chat members that were sent to the chat. Returns up to 1 location message per user @chat_id Chat identifier @limit Maximum number of messages to be returned",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "getActiveLiveLocationMessages",
        "properties": [],
        "type": "Messages",
        "description": "Returns all active live locations that should be updated by the client. The list is persistent across application restarts only if the message database is used",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "sendMessageAlbum",
        "properties": [
          {
            "name": "chat_id",
            "type": "int53",
            "nilable": false
          },
          {
            "name": "reply_to_message_id",
            "type": "int53",
            "nilable": false
          },
          {
            "name": "disable_notification",
            "type": "Bool",
            "description": "Pass true to disable notification for the messages. Not supported in secret chats @from_background Pass true if the messages are sent from the background",
            "nilable": false
          },
          {
            "name": "from_background",
            "type": "Bool",
            "nilable": false
          },
          {
            "name": "input_message_contents",
            "type": "vector<InputMessageContent>",
            "description": "Contents of messages to be sent",
            "nilable": false
          }
        ],
        "type": "Messages",
        "description": "Sends messages grouped together into an album. Currently only photo and video messages can be grouped into an album. Returns sent messages @chat_id Target chat @reply_to_message_id Identifier of a message to reply to or 0",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "forwardMessages",
        "properties": [
          {
            "name": "chat_id",
            "type": "int53",
            "description": "Identifier of the chat to which to forward messages @from_chat_id Identifier of the chat from which to forward messages @message_ids Identifiers of the messages to forward",
            "nilable": false
          },
          {
            "name": "from_chat_id",
            "type": "int53",
            "nilable": false
          },
          {
            "name": "message_ids",
            "type": "vector<int53>",
            "nilable": false
          },
          {
            "name": "disable_notification",
            "type": "Bool",
            "description": "Pass true to disable notification for the message, doesn't work if messages are forwarded to a secret chat @from_background Pass true if the messages are sent from the background",
            "nilable": false
          },
          {
            "name": "from_background",
            "type": "Bool",
            "nilable": false
          },
          {
            "name": "as_album",
            "type": "Bool",
            "description": "True, if the messages should be grouped into an album after forwarding. For this to work, no more than 10 messages may be forwarded, and all of them must be photo or video messages",
            "nilable": false
          },
          {
            "name": "send_copy",
            "type": "Bool",
            "description": "True, if content of the messages needs to be copied without links to the original messages. Always true if the messages are forwarded to a secret chat",
            "nilable": false
          },
          {
            "name": "remove_caption",
            "type": "Bool",
            "description": "True, if media captions of message copies needs to be removed. Ignored if send_copy is false",
            "nilable": false
          }
        ],
        "type": "Messages",
        "description": "Forwards previously sent messages. Returns the forwarded messages in the same order as the message identifiers passed in message_ids. If a message can't be forwarded, null will be returned instead of the message",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "resendMessages",
        "properties": [
          {
            "name": "chat_id",
            "type": "int53",
            "description": "Identifier of the chat to send messages @message_ids Identifiers of the messages to resend. Message identifiers must be in a strictly increasing order",
            "nilable": false
          },
          {
            "name": "message_ids",
            "type": "vector<int53>",
            "nilable": false
          }
        ],
        "type": "Messages",
        "description": "Resends messages which failed to send. Can be called only for messages for which messageSendingStateFailed.can_retry is true and after specified in messageSendingStateFailed.retry_after time passed.",
        "children": []
      }
    ],
    "File": [
      {
        "function": true,
        "is_abstract": false,
        "name": "getFile",
        "properties": [
          {
            "name": "file_id",
            "type": "int32",
            "nilable": false
          }
        ],
        "type": "File",
        "description": "Returns information about a file; this is an offline request @file_id Identifier of the file to get",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "getRemoteFile",
        "properties": [
          {
            "name": "remote_file_id",
            "type": "string",
            "description": "Remote identifier of the file to get @file_type File type, if known",
            "nilable": false
          },
          {
            "name": "file_type",
            "type": "FileType",
            "nilable": false
          }
        ],
        "type": "File",
        "description": "Returns information about a file by its remote ID; this is an offline request. Can be used to register a URL as a file for further uploading, or sending as a message. Even the request succeeds, the file can be used only if it is still accessible to the user.",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "downloadFile",
        "properties": [
          {
            "name": "file_id",
            "type": "int32",
            "description": "Identifier of the file to download //-the download has succeeded, has failed, has been cancelled or a new downloadFile request with different offset/limit parameters was sent",
            "nilable": false
          },
          {
            "name": "priority",
            "type": "int32",
            "description": "Priority of the download (1-32). The higher the priority, the earlier the file will be downloaded. If the priorities of two files are equal, then the last one for which downloadFile was called will be downloaded first //-the download has succeeded, has failed, has been cancelled or a new downloadFile request with different offset/limit parameters was sent",
            "nilable": false
          },
          {
            "name": "offset",
            "type": "int32",
            "description": "The starting position from which the file should be downloaded //-the download has succeeded, has failed, has been cancelled or a new downloadFile request with different offset/limit parameters was sent",
            "nilable": false
          },
          {
            "name": "limit",
            "type": "int32",
            "description": "Number of bytes which should be downloaded starting from the \"offset\" position before the download will be automatically cancelled; use 0 to download without a limit //-the download has succeeded, has failed, has been cancelled or a new downloadFile request with different offset/limit parameters was sent",
            "nilable": false
          },
          {
            "name": "synchronous",
            "type": "Bool",
            "description": "If false, this request returns file state just after the download has been started. If true, this request returns file state only after //-the download has succeeded, has failed, has been cancelled or a new downloadFile request with different offset/limit parameters was sent",
            "nilable": false
          }
        ],
        "type": "File",
        "description": "Downloads a file from the cloud. Download progress and completion of the download will be notified through updateFile updates",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "uploadFile",
        "properties": [
          {
            "name": "file",
            "type": "InputFile",
            "nilable": false
          },
          {
            "name": "file_type",
            "type": "FileType",
            "nilable": false
          },
          {
            "name": "priority",
            "type": "int32",
            "description": "Priority of the upload (1-32). The higher the priority, the earlier the file will be uploaded. If the priorities of two files are equal, then the first one for which uploadFile was called will be uploaded first",
            "nilable": false
          }
        ],
        "type": "File",
        "description": "Asynchronously uploads a file to the cloud without sending it in a message. updateFile will be used to notify about upload progress and successful completion of the upload. The file will not have a persistent remote identifier until it will be sent in a message @file File to upload @file_type File type",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "uploadStickerFile",
        "properties": [
          {
            "name": "user_id",
            "type": "int32",
            "nilable": false
          },
          {
            "name": "png_sticker",
            "type": "InputFile",
            "nilable": false
          }
        ],
        "type": "File",
        "description": "Uploads a PNG image with a sticker; for bots only; returns the uploaded file @user_id Sticker file owner @png_sticker PNG image with the sticker; must be up to 512 kB in size and fit in 512x512 square",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "getMapThumbnailFile",
        "properties": [
          {
            "name": "location",
            "type": "location",
            "nilable": false
          },
          {
            "name": "zoom",
            "type": "int32",
            "nilable": false
          },
          {
            "name": "width",
            "type": "int32",
            "nilable": false
          },
          {
            "name": "height",
            "type": "int32",
            "nilable": false
          },
          {
            "name": "scale",
            "type": "int32",
            "nilable": false
          },
          {
            "name": "chat_id",
            "type": "int53",
            "nilable": false
          }
        ],
        "type": "File",
        "description": "Returns information about a file with a map thumbnail in PNG format. Only map thumbnail files with size less than 1MB can be downloaded @location Location of the map center @zoom Map zoom level; 13-20 @width Map width in pixels before applying scale; 16-1024 @height Map height in pixels before applying scale; 16-1024 @scale Map scale; 1-3 @chat_id Identifier of a chat, in which the thumbnail will be shown. Use 0 if unknown",
        "children": []
      }
    ],
    "Chats": [
      {
        "function": true,
        "is_abstract": false,
        "name": "getChats",
        "properties": [
          {
            "name": "offset_order",
            "type": "int64",
            "nilable": false
          },
          {
            "name": "offset_chat_id",
            "type": "int53",
            "nilable": false
          },
          {
            "name": "limit",
            "type": "int32",
            "description": "The maximum number of chats to be returned. It is possible that fewer chats than the limit are returned even if the end of the list is not reached",
            "nilable": false
          }
        ],
        "type": "Chats",
        "description": "Returns an ordered list of chats. Chats are sorted by the pair (order, chat_id) in decreasing order. (For example, to get a list of chats from the beginning, the offset_order should be equal to a biggest signed 64-bit number 9223372036854775807 == 2^63 - 1).",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "searchPublicChats",
        "properties": [
          {
            "name": "query",
            "type": "string",
            "nilable": false
          }
        ],
        "type": "Chats",
        "description": "Searches public chats by looking for specified query in their username and title. Currently only private chats, supergroups and channels can be public. Returns a meaningful number of results. Returns nothing if the length of the searched username prefix is less than 5. Excludes private chats with contacts and chats from the chat list from the results @query Query to search for",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "searchChats",
        "properties": [
          {
            "name": "query",
            "type": "string",
            "nilable": false
          },
          {
            "name": "limit",
            "type": "int32",
            "nilable": false
          }
        ],
        "type": "Chats",
        "description": "Searches for the specified query in the title and username of already known chats, this is an offline request. Returns chats in the order seen in the chat list @query Query to search for. If the query is empty, returns up to 20 recently found chats @limit Maximum number of chats to be returned",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "searchChatsOnServer",
        "properties": [
          {
            "name": "query",
            "type": "string",
            "nilable": false
          },
          {
            "name": "limit",
            "type": "int32",
            "nilable": false
          }
        ],
        "type": "Chats",
        "description": "Searches for the specified query in the title and username of already known chats via request to the server. Returns chats in the order seen in the chat list @query Query to search for @limit Maximum number of chats to be returned",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "getTopChats",
        "properties": [
          {
            "name": "category",
            "type": "TopChatCategory",
            "nilable": false
          },
          {
            "name": "limit",
            "type": "int32",
            "nilable": false
          }
        ],
        "type": "Chats",
        "description": "Returns a list of frequently used chats. Supported only if the chat info database is enabled @category Category of chats to be returned @limit Maximum number of chats to be returned; up to 30",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "getCreatedPublicChats",
        "properties": [],
        "type": "Chats",
        "description": "Returns a list of public chats with username created by the user",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "getGroupsInCommon",
        "properties": [
          {
            "name": "user_id",
            "type": "int32",
            "nilable": false
          },
          {
            "name": "offset_chat_id",
            "type": "int53",
            "nilable": false
          },
          {
            "name": "limit",
            "type": "int32",
            "nilable": false
          }
        ],
        "type": "Chats",
        "description": "Returns a list of common group chats with a given user. Chats are sorted by their type and creation date @user_id User identifier @offset_chat_id Chat identifier starting from which to return chats; use 0 for the first request @limit Maximum number of chats to be returned; up to 100",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "getChatNotificationSettingsExceptions",
        "properties": [
          {
            "name": "scope",
            "type": "NotificationSettingsScope",
            "nilable": false
          },
          {
            "name": "compare_sound",
            "type": "Bool",
            "nilable": false
          }
        ],
        "type": "Chats",
        "description": "Returns list of chats with non-default notification settings @scope If specified, only chats from the specified scope will be returned @compare_sound If true, also chats with non-default sound will be returned",
        "children": []
      }
    ],
    "CheckChatUsernameResult": [
      {
        "function": true,
        "is_abstract": false,
        "name": "checkChatUsername",
        "properties": [
          {
            "name": "chat_id",
            "type": "int53",
            "nilable": false
          },
          {
            "name": "username",
            "type": "string",
            "nilable": false
          }
        ],
        "type": "CheckChatUsernameResult",
        "description": "Checks whether a username can be set for a chat @chat_id Chat identifier; should be identifier of a supergroup chat, or a channel chat, or a private chat with self, or zero if chat is being created @username Username to be checked",
        "children": []
      }
    ],
    "FoundMessages": [
      {
        "function": true,
        "is_abstract": false,
        "name": "searchSecretMessages",
        "properties": [
          {
            "name": "chat_id",
            "type": "int53",
            "description": "Identifier of the chat in which to search. Specify 0 to search in all secret chats @query Query to search for. If empty, searchChatMessages should be used instead",
            "nilable": false
          },
          {
            "name": "query",
            "type": "string",
            "nilable": false
          },
          {
            "name": "from_search_id",
            "type": "int64",
            "description": "The identifier from the result of a previous request, use 0 to get results from the last message",
            "nilable": false
          },
          {
            "name": "limit",
            "type": "int32",
            "description": "Maximum number of messages to be returned; up to 100. Fewer messages may be returned than specified by the limit, even if the end of the message history has not been reached",
            "nilable": false
          },
          {
            "name": "filter",
            "type": "SearchMessagesFilter",
            "description": "A filter for the content of messages in the search results",
            "nilable": false
          }
        ],
        "type": "FoundMessages",
        "description": "Searches for messages in secret chats. Returns the results in reverse chronological order. For optimal performance the number of returned messages is chosen by the library",
        "children": []
      }
    ],
    "Count": [
      {
        "function": true,
        "is_abstract": false,
        "name": "getChatMessageCount",
        "properties": [
          {
            "name": "chat_id",
            "type": "int53",
            "nilable": false
          },
          {
            "name": "filter",
            "type": "SearchMessagesFilter",
            "nilable": false
          },
          {
            "name": "return_local",
            "type": "Bool",
            "nilable": false
          }
        ],
        "type": "Count",
        "description": "Returns approximate number of messages of the specified type in the chat @chat_id Identifier of the chat in which to count messages @filter Filter for message content; searchMessagesFilterEmpty is unsupported in this function @return_local If true, returns count that is available locally without sending network requests, returning -1 if the number of messages is unknown",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "getFileDownloadedPrefixSize",
        "properties": [
          {
            "name": "file_id",
            "type": "int32",
            "nilable": false
          },
          {
            "name": "offset",
            "type": "int32",
            "nilable": false
          }
        ],
        "type": "Count",
        "description": "Returns file downloaded prefix size from a given offset @file_id Identifier of the file @offset Offset from which downloaded prefix size should be calculated",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "getImportedContactCount",
        "properties": [],
        "type": "Count",
        "description": "Returns the total number of imported contacts",
        "children": []
      }
    ],
    "PublicMessageLink": [
      {
        "function": true,
        "is_abstract": false,
        "name": "getPublicMessageLink",
        "properties": [
          {
            "name": "chat_id",
            "type": "int53",
            "description": "Identifier of the chat to which the message belongs",
            "nilable": false
          },
          {
            "name": "message_id",
            "type": "int53",
            "description": "Identifier of the message",
            "nilable": false
          },
          {
            "name": "for_album",
            "type": "Bool",
            "description": "Pass true if a link for a whole media album should be returned",
            "nilable": false
          }
        ],
        "type": "PublicMessageLink",
        "description": "Returns a public HTTPS link to a message. Available only for messages in supergroups and channels with username",
        "children": []
      }
    ],
    "HttpUrl": [
      {
        "function": true,
        "is_abstract": false,
        "name": "getMessageLink",
        "properties": [
          {
            "name": "chat_id",
            "type": "int53",
            "description": "Identifier of the chat to which the message belongs",
            "nilable": false
          },
          {
            "name": "message_id",
            "type": "int53",
            "description": "Identifier of the message",
            "nilable": false
          }
        ],
        "type": "HttpUrl",
        "description": "Returns a private HTTPS link to a message in a chat. Available only for already sent messages in supergroups and channels. The link will work only for members of the chat",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "getEmojiSuggestionsUrl",
        "properties": [
          {
            "name": "language_code",
            "type": "string",
            "nilable": false
          }
        ],
        "type": "HttpUrl",
        "description": "Returns an HTTP URL which can be used to automatically log in to the translation platform and suggest new emoji replacements. The URL will be valid for 30 seconds after generation @language_code Language code for which the emoji replacements will be suggested",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "getBackgroundUrl",
        "properties": [
          {
            "name": "name",
            "type": "string",
            "nilable": false
          },
          {
            "name": "type",
            "type": "BackgroundType",
            "nilable": false
          }
        ],
        "type": "HttpUrl",
        "description": "Constructs a persistent HTTP URL for a background @name Background name @type Background type",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "getChatStatisticsUrl",
        "properties": [
          {
            "name": "chat_id",
            "type": "int53",
            "nilable": false
          },
          {
            "name": "parameters",
            "type": "string",
            "nilable": false
          },
          {
            "name": "is_dark",
            "type": "Bool",
            "nilable": false
          }
        ],
        "type": "HttpUrl",
        "description": "Returns an HTTP URL with the chat statistics. Currently this method can be used only for channels @chat_id Chat identifier @parameters Parameters from \"tg://statsrefresh?params=******\" link @is_dark Pass true if a URL with the dark theme must be returned",
        "children": []
      }
    ],
    "MessageLinkInfo": [
      {
        "function": true,
        "is_abstract": false,
        "name": "getMessageLinkInfo",
        "properties": [
          {
            "name": "url",
            "type": "string",
            "nilable": false
          }
        ],
        "type": "MessageLinkInfo",
        "description": "Returns information about a public or private message link @url The message link in the format \"https://t.me/c/...\", or \"tg://privatepost?...\", or \"https://t.me/username/...\", or \"tg://resolve?...\"",
        "children": []
      }
    ],
    "TextEntities": [
      {
        "function": true,
        "is_abstract": false,
        "name": "getTextEntities",
        "properties": [
          {
            "name": "text",
            "type": "string",
            "nilable": false
          }
        ],
        "type": "TextEntities",
        "description": "Returns all entities (mentions, hashtags, cashtags, bot commands, URLs, and email addresses) contained in the text. This is an offline method. Can be called before authorization. Can be called synchronously @text The text in which to look for entites",
        "children": []
      }
    ],
    "FormattedText": [
      {
        "function": true,
        "is_abstract": false,
        "name": "parseTextEntities",
        "properties": [
          {
            "name": "text",
            "type": "string",
            "nilable": false
          },
          {
            "name": "parse_mode",
            "type": "TextParseMode",
            "nilable": false
          }
        ],
        "type": "FormattedText",
        "description": "Parses Bold, Italic, Code, Pre, PreCode and TextUrl entities contained in the text. This is an offline method. Can be called before authorization. Can be called synchronously @text The text which should be parsed @parse_mode Text parse mode",
        "children": []
      }
    ],
    "Text": [
      {
        "function": true,
        "is_abstract": false,
        "name": "getFileMimeType",
        "properties": [
          {
            "name": "file_name",
            "type": "string",
            "nilable": false
          }
        ],
        "type": "Text",
        "description": "Returns the MIME type of a file, guessed by its extension. Returns an empty string on failure. This is an offline method. Can be called before authorization. Can be called synchronously @file_name The name of the file or path to the file",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "getFileExtension",
        "properties": [
          {
            "name": "mime_type",
            "type": "string",
            "nilable": false
          }
        ],
        "type": "Text",
        "description": "Returns the extension of a file, guessed by its MIME type. Returns an empty string on failure. This is an offline method. Can be called before authorization. Can be called synchronously @mime_type The MIME type of the file",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "cleanFileName",
        "properties": [
          {
            "name": "file_name",
            "type": "string",
            "nilable": false
          }
        ],
        "type": "Text",
        "description": "Removes potentially dangerous characters from the name of a file. The encoding of the file name is supposed to be UTF-8. Returns an empty string on failure. This is an offline method. Can be called before authorization. Can be called synchronously @file_name File name or path to the file",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "getJsonString",
        "properties": [
          {
            "name": "json_value",
            "type": "JsonValue",
            "nilable": false
          }
        ],
        "type": "Text",
        "description": "Converts a JsonValue object to corresponding JSON-serialized string. This is an offline method. Can be called before authorization. Can be called synchronously @json_value The JsonValue object",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "getPreferredCountryLanguage",
        "properties": [
          {
            "name": "country_code",
            "type": "string",
            "nilable": false
          }
        ],
        "type": "Text",
        "description": "Returns an IETF language tag of the language preferred in the country, which should be used to fill native fields in Telegram Passport personal details. Returns a 404 error if unknown @country_code A two-letter ISO 3166-1 alpha-2 country code",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "getCountryCode",
        "properties": [],
        "type": "Text",
        "description": "Uses current user IP to found their country. Returns two-letter ISO 3166-1 alpha-2 country code. Can be called before authorization",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "getInviteText",
        "properties": [],
        "type": "Text",
        "description": "Returns the default text for invitation messages to be used as a placeholder when the current user invites friends to Telegram",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "getProxyLink",
        "properties": [
          {
            "name": "proxy_id",
            "type": "int32",
            "nilable": false
          }
        ],
        "type": "Text",
        "description": "Returns an HTTPS link, which can be used to add a proxy. Available only for SOCKS5 and MTProto proxies. Can be called before authorization @proxy_id Proxy identifier",
        "children": []
      }
    ],
    "LanguagePackStringValue": [
      {
        "function": true,
        "is_abstract": false,
        "name": "getLanguagePackString",
        "properties": [
          {
            "name": "language_pack_database_path",
            "type": "string",
            "description": "Path to the language pack database in which strings are stored @localization_target Localization target to which the language pack belongs @language_pack_id Language pack identifier @key Language pack key of the string to be returned",
            "nilable": false
          },
          {
            "name": "localization_target",
            "type": "string",
            "nilable": false
          },
          {
            "name": "language_pack_id",
            "type": "string",
            "nilable": false
          },
          {
            "name": "key",
            "type": "string",
            "nilable": false
          }
        ],
        "type": "LanguagePackStringValue",
        "description": "Returns a string stored in the local database from the specified localization target and language pack by its key. Returns a 404 error if the string is not found. This is an offline method. Can be called before authorization. Can be called synchronously",
        "children": []
      }
    ],
    "JsonValue": [
      {
        "function": true,
        "is_abstract": false,
        "name": "getJsonValue",
        "properties": [
          {
            "name": "json",
            "type": "string",
            "nilable": false
          }
        ],
        "type": "JsonValue",
        "description": "Converts a JSON-serialized string to corresponding JsonValue object. This is an offline method. Can be called before authorization. Can be called synchronously @json The JSON-serialized string",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "getApplicationConfig",
        "properties": [],
        "type": "JsonValue",
        "description": "Returns application config, provided by the server. Can be called before authorization",
        "children": []
      }
    ],
    "InlineQueryResults": [
      {
        "function": true,
        "is_abstract": false,
        "name": "getInlineQueryResults",
        "properties": [
          {
            "name": "bot_user_id",
            "type": "int32",
            "nilable": false
          },
          {
            "name": "chat_id",
            "type": "int53",
            "description": "Identifier of the chat, where the query was sent @user_location Location of the user, only if needed @query Text of the query @offset Offset of the first entry to return",
            "nilable": false
          },
          {
            "name": "user_location",
            "type": "location",
            "nilable": false
          },
          {
            "name": "query",
            "type": "string",
            "nilable": false
          },
          {
            "name": "offset",
            "type": "string",
            "nilable": false
          }
        ],
        "type": "InlineQueryResults",
        "description": "Sends an inline query to a bot and returns its results. Returns an error with code 502 if the bot fails to answer the query before the query timeout expires @bot_user_id The identifier of the target bot",
        "children": []
      }
    ],
    "CallbackQueryAnswer": [
      {
        "function": true,
        "is_abstract": false,
        "name": "getCallbackQueryAnswer",
        "properties": [
          {
            "name": "chat_id",
            "type": "int53",
            "nilable": false
          },
          {
            "name": "message_id",
            "type": "int53",
            "nilable": false
          },
          {
            "name": "payload",
            "type": "CallbackQueryPayload",
            "nilable": false
          }
        ],
        "type": "CallbackQueryAnswer",
        "description": "Sends a callback query to a bot and returns an answer. Returns an error with code 502 if the bot fails to answer the query before the query timeout expires @chat_id Identifier of the chat with the message @message_id Identifier of the message from which the query originated @payload Query payload",
        "children": []
      }
    ],
    "GameHighScores": [
      {
        "function": true,
        "is_abstract": false,
        "name": "getGameHighScores",
        "properties": [
          {
            "name": "chat_id",
            "type": "int53",
            "nilable": false
          },
          {
            "name": "message_id",
            "type": "int53",
            "nilable": false
          },
          {
            "name": "user_id",
            "type": "int32",
            "nilable": false
          }
        ],
        "type": "GameHighScores",
        "description": "Returns the high scores for a game and some part of the high score table in the range of the specified user; for bots only @chat_id The chat that contains the message with the game @message_id Identifier of the message @user_id User identifier",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "getInlineGameHighScores",
        "properties": [
          {
            "name": "inline_message_id",
            "type": "string",
            "nilable": false
          },
          {
            "name": "user_id",
            "type": "int32",
            "nilable": false
          }
        ],
        "type": "GameHighScores",
        "description": "Returns game high scores and some part of the high score table in the range of the specified user; for bots only @inline_message_id Inline message identifier @user_id User identifier",
        "children": []
      }
    ],
    "ChatMember": [
      {
        "function": true,
        "is_abstract": false,
        "name": "getChatMember",
        "properties": [
          {
            "name": "chat_id",
            "type": "int53",
            "nilable": false
          },
          {
            "name": "user_id",
            "type": "int32",
            "nilable": false
          }
        ],
        "type": "ChatMember",
        "description": "Returns information about a single member of a chat @chat_id Chat identifier @user_id User identifier",
        "children": []
      }
    ],
    "ChatMembers": [
      {
        "function": true,
        "is_abstract": false,
        "name": "searchChatMembers",
        "properties": [
          {
            "name": "chat_id",
            "type": "int53",
            "nilable": false
          },
          {
            "name": "query",
            "type": "string",
            "nilable": false
          },
          {
            "name": "limit",
            "type": "int32",
            "nilable": false
          },
          {
            "name": "filter",
            "type": "ChatMembersFilter",
            "nilable": false
          }
        ],
        "type": "ChatMembers",
        "description": "Searches for a specified query in the first name, last name and username of the members of a specified chat. Requires administrator rights in channels @chat_id Chat identifier @query Query to search for @limit The maximum number of users to be returned @filter The type of users to return. By default, chatMembersFilterMembers",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "getSupergroupMembers",
        "properties": [
          {
            "name": "supergroup_id",
            "type": "int32",
            "nilable": false
          },
          {
            "name": "filter",
            "type": "SupergroupMembersFilter",
            "description": "The type of users to return. By default, supergroupMembersRecent @offset Number of users to skip @limit The maximum number of users be returned; up to 200",
            "nilable": false
          },
          {
            "name": "offset",
            "type": "int32",
            "nilable": false
          },
          {
            "name": "limit",
            "type": "int32",
            "nilable": false
          }
        ],
        "type": "ChatMembers",
        "description": "Returns information about members or banned users in a supergroup or channel. Can be used only if SupergroupFullInfo.can_get_members == true; additionally, administrator privileges may be required for some filters @supergroup_id Identifier of the supergroup or channel",
        "children": []
      }
    ],
    "Users": [
      {
        "function": true,
        "is_abstract": false,
        "name": "getChatAdministrators",
        "properties": [
          {
            "name": "chat_id",
            "type": "int53",
            "nilable": false
          }
        ],
        "type": "Users",
        "description": "Returns a list of users who are administrators of the chat @chat_id Chat identifier",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "getBlockedUsers",
        "properties": [
          {
            "name": "offset",
            "type": "int32",
            "nilable": false
          },
          {
            "name": "limit",
            "type": "int32",
            "nilable": false
          }
        ],
        "type": "Users",
        "description": "Returns users that were blocked by the current user @offset Number of users to skip in the result; must be non-negative @limit Maximum number of users to return; up to 100",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "getContacts",
        "properties": [],
        "type": "Users",
        "description": "Returns all user contacts",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "searchContacts",
        "properties": [
          {
            "name": "query",
            "type": "string",
            "nilable": false
          },
          {
            "name": "limit",
            "type": "int32",
            "nilable": false
          }
        ],
        "type": "Users",
        "description": "Searches for the specified query in the first names, last names and usernames of the known user contacts @query Query to search for; may be empty to return all contacts @limit Maximum number of users to be returned",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "getRecentInlineBots",
        "properties": [],
        "type": "Users",
        "description": "Returns up to 20 recently used inline bots in the order of their last usage",
        "children": []
      }
    ],
    "ScopeNotificationSettings": [
      {
        "function": true,
        "is_abstract": false,
        "name": "getScopeNotificationSettings",
        "properties": [
          {
            "name": "scope",
            "type": "NotificationSettingsScope",
            "nilable": false
          }
        ],
        "type": "ScopeNotificationSettings",
        "description": "Returns the notification settings for chats of a given type @scope Types of chats for which to return the notification settings information",
        "children": []
      }
    ],
    "FilePart": [
      {
        "function": true,
        "is_abstract": false,
        "name": "readFilePart",
        "properties": [
          {
            "name": "file_id",
            "type": "int32",
            "description": "Identifier of the file. The file must be located in the TDLib file cache",
            "nilable": false
          },
          {
            "name": "offset",
            "type": "int32",
            "description": "The offset from which to read the file",
            "nilable": false
          },
          {
            "name": "count",
            "type": "int32",
            "description": "Number of bytes to read. An error will be returned if there are not enough bytes available in the file from the specified position. Pass 0 to read all available data from the specified position",
            "nilable": false
          }
        ],
        "type": "FilePart",
        "description": "Reads a part of a file from the TDLib file cache and returns read bytes. This method is intended to be used only if the client has no direct access to TDLib's file system, because it is usually slower than a direct read from the file",
        "children": []
      }
    ],
    "ChatInviteLink": [
      {
        "function": true,
        "is_abstract": false,
        "name": "generateChatInviteLink",
        "properties": [
          {
            "name": "chat_id",
            "type": "int53",
            "nilable": false
          }
        ],
        "type": "ChatInviteLink",
        "description": "Generates a new invite link for a chat; the previously generated link is revoked. Available for basic groups, supergroups, and channels. Requires administrator privileges and can_invite_users right @chat_id Chat identifier",
        "children": []
      }
    ],
    "ChatInviteLinkInfo": [
      {
        "function": true,
        "is_abstract": false,
        "name": "checkChatInviteLink",
        "properties": [
          {
            "name": "invite_link",
            "type": "string",
            "nilable": false
          }
        ],
        "type": "ChatInviteLinkInfo",
        "description": "Checks the validity of an invite link for a chat and returns information about the corresponding chat @invite_link Invite link to be checked; should begin with \"https://t.me/joinchat/\", \"https://telegram.me/joinchat/\", or \"https://telegram.dog/joinchat/\"",
        "children": []
      }
    ],
    "CallId": [
      {
        "function": true,
        "is_abstract": false,
        "name": "createCall",
        "properties": [
          {
            "name": "user_id",
            "type": "int32",
            "nilable": false
          },
          {
            "name": "protocol",
            "type": "callProtocol",
            "nilable": false
          }
        ],
        "type": "CallId",
        "description": "Creates a new call @user_id Identifier of the user to be called @protocol Description of the call protocols supported by the client",
        "children": []
      }
    ],
    "ImportedContacts": [
      {
        "function": true,
        "is_abstract": false,
        "name": "importContacts",
        "properties": [
          {
            "name": "contacts",
            "type": "vector<contact>",
            "nilable": false
          }
        ],
        "type": "ImportedContacts",
        "description": "Adds new contacts or edits existing contacts; contacts' user identifiers are ignored @contacts The list of contacts to import or edit, contact's vCard are ignored and are not imported",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "changeImportedContacts",
        "properties": [
          {
            "name": "contacts",
            "type": "vector<contact>",
            "nilable": false
          }
        ],
        "type": "ImportedContacts",
        "description": "Changes imported contacts using the list of current user contacts saved on the device. Imports newly added contacts and, if at least the file database is enabled, deletes recently deleted contacts.",
        "children": []
      }
    ],
    "UserProfilePhotos": [
      {
        "function": true,
        "is_abstract": false,
        "name": "getUserProfilePhotos",
        "properties": [
          {
            "name": "user_id",
            "type": "int32",
            "nilable": false
          },
          {
            "name": "offset",
            "type": "int32",
            "nilable": false
          },
          {
            "name": "limit",
            "type": "int32",
            "nilable": false
          }
        ],
        "type": "UserProfilePhotos",
        "description": "Returns the profile photos of a user. The result of this query may be outdated: some photos might have been deleted already @user_id User identifier @offset The number of photos to skip; must be non-negative @limit Maximum number of photos to be returned; up to 100",
        "children": []
      }
    ],
    "Stickers": [
      {
        "function": true,
        "is_abstract": false,
        "name": "getStickers",
        "properties": [
          {
            "name": "emoji",
            "type": "string",
            "nilable": false
          },
          {
            "name": "limit",
            "type": "int32",
            "nilable": false
          }
        ],
        "type": "Stickers",
        "description": "Returns stickers from the installed sticker sets that correspond to a given emoji. If the emoji is not empty, favorite and recently used stickers may also be returned @emoji String representation of emoji. If empty, returns all known installed stickers @limit Maximum number of stickers to be returned",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "searchStickers",
        "properties": [
          {
            "name": "emoji",
            "type": "string",
            "nilable": false
          },
          {
            "name": "limit",
            "type": "int32",
            "nilable": false
          }
        ],
        "type": "Stickers",
        "description": "Searches for stickers from public sticker sets that correspond to a given emoji @emoji String representation of emoji; must be non-empty @limit Maximum number of stickers to be returned",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "getRecentStickers",
        "properties": [
          {
            "name": "is_attached",
            "type": "Bool",
            "nilable": false
          }
        ],
        "type": "Stickers",
        "description": "Returns a list of recently used stickers @is_attached Pass true to return stickers and masks that were recently attached to photos or video files; pass false to return recently sent stickers",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "addRecentSticker",
        "properties": [
          {
            "name": "is_attached",
            "type": "Bool",
            "description": "Pass true to add the sticker to the list of stickers recently attached to photo or video files; pass false to add the sticker to the list of recently sent stickers @sticker Sticker file to add",
            "nilable": false
          },
          {
            "name": "sticker",
            "type": "InputFile",
            "nilable": false
          }
        ],
        "type": "Stickers",
        "description": "Manually adds a new sticker to the list of recently used stickers. The new sticker is added to the top of the list. If the sticker was already in the list, it is removed from the list first. Only stickers belonging to a sticker set can be added to this list",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "getFavoriteStickers",
        "properties": [],
        "type": "Stickers",
        "description": "Returns favorite stickers",
        "children": []
      }
    ],
    "StickerSets": [
      {
        "function": true,
        "is_abstract": false,
        "name": "getInstalledStickerSets",
        "properties": [
          {
            "name": "is_masks",
            "type": "Bool",
            "nilable": false
          }
        ],
        "type": "StickerSets",
        "description": "Returns a list of installed sticker sets @is_masks Pass true to return mask sticker sets; pass false to return ordinary sticker sets",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "getArchivedStickerSets",
        "properties": [
          {
            "name": "is_masks",
            "type": "Bool",
            "nilable": false
          },
          {
            "name": "offset_sticker_set_id",
            "type": "int64",
            "nilable": false
          },
          {
            "name": "limit",
            "type": "int32",
            "nilable": false
          }
        ],
        "type": "StickerSets",
        "description": "Returns a list of archived sticker sets @is_masks Pass true to return mask stickers sets; pass false to return ordinary sticker sets @offset_sticker_set_id Identifier of the sticker set from which to return the result @limit Maximum number of sticker sets to return",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "getTrendingStickerSets",
        "properties": [],
        "type": "StickerSets",
        "description": "Returns a list of trending sticker sets",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "getAttachedStickerSets",
        "properties": [
          {
            "name": "file_id",
            "type": "int32",
            "nilable": false
          }
        ],
        "type": "StickerSets",
        "description": "Returns a list of sticker sets attached to a file. Currently only photos and videos can have attached sticker sets @file_id File identifier",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "searchInstalledStickerSets",
        "properties": [
          {
            "name": "is_masks",
            "type": "Bool",
            "nilable": false
          },
          {
            "name": "query",
            "type": "string",
            "nilable": false
          },
          {
            "name": "limit",
            "type": "int32",
            "nilable": false
          }
        ],
        "type": "StickerSets",
        "description": "Searches for installed sticker sets by looking for specified query in their title and name @is_masks Pass true to return mask sticker sets; pass false to return ordinary sticker sets @query Query to search for @limit Maximum number of sticker sets to return",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "searchStickerSets",
        "properties": [
          {
            "name": "query",
            "type": "string",
            "nilable": false
          }
        ],
        "type": "StickerSets",
        "description": "Searches for ordinary sticker sets by looking for specified query in their title and name. Excludes installed sticker sets from the results @query Query to search for",
        "children": []
      }
    ],
    "StickerSet": [
      {
        "function": true,
        "is_abstract": false,
        "name": "getStickerSet",
        "properties": [
          {
            "name": "set_id",
            "type": "int64",
            "nilable": false
          }
        ],
        "type": "StickerSet",
        "description": "Returns information about a sticker set by its identifier @set_id Identifier of the sticker set",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "searchStickerSet",
        "properties": [
          {
            "name": "name",
            "type": "string",
            "nilable": false
          }
        ],
        "type": "StickerSet",
        "description": "Searches for a sticker set by its name @name Name of the sticker set",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "createNewStickerSet",
        "properties": [
          {
            "name": "user_id",
            "type": "int32",
            "nilable": false
          },
          {
            "name": "title",
            "type": "string",
            "nilable": false
          },
          {
            "name": "name",
            "type": "string",
            "nilable": false
          },
          {
            "name": "is_masks",
            "type": "Bool",
            "description": "True, if stickers are masks @stickers List of stickers to be added to the set",
            "nilable": false
          },
          {
            "name": "stickers",
            "type": "vector<inputSticker>",
            "nilable": false
          }
        ],
        "type": "StickerSet",
        "description": "Creates a new sticker set; for bots only. Returns the newly created sticker set @user_id Sticker set owner @title Sticker set title; 1-64 characters @name Sticker set name. Can contain only English letters, digits and underscores. Must end with *\"_by_<bot username>\"* (*<bot_username>* is case insensitive); 1-64 characters",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "addStickerToSet",
        "properties": [
          {
            "name": "user_id",
            "type": "int32",
            "nilable": false
          },
          {
            "name": "name",
            "type": "string",
            "nilable": false
          },
          {
            "name": "sticker",
            "type": "inputSticker",
            "nilable": false
          }
        ],
        "type": "StickerSet",
        "description": "Adds a new sticker to a set; for bots only. Returns the sticker set @user_id Sticker set owner @name Sticker set name @sticker Sticker to add to the set",
        "children": []
      }
    ],
    "Emojis": [
      {
        "function": true,
        "is_abstract": false,
        "name": "getStickerEmojis",
        "properties": [
          {
            "name": "sticker",
            "type": "InputFile",
            "nilable": false
          }
        ],
        "type": "Emojis",
        "description": "Returns emoji corresponding to a sticker. The list is only for informational purposes, because a sticker is always sent with a fixed emoji from the corresponding Sticker object @sticker Sticker file identifier",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "searchEmojis",
        "properties": [
          {
            "name": "text",
            "type": "string",
            "nilable": false
          },
          {
            "name": "exact_match",
            "type": "Bool",
            "nilable": false
          }
        ],
        "type": "Emojis",
        "description": "Searches for emojis by keywords. Supported only if the file database is enabled @text Text to search for @exact_match True, if only emojis, which exactly match text needs to be returned",
        "children": []
      }
    ],
    "Animations": [
      {
        "function": true,
        "is_abstract": false,
        "name": "getSavedAnimations",
        "properties": [],
        "type": "Animations",
        "description": "Returns saved animations",
        "children": []
      }
    ],
    "Hashtags": [
      {
        "function": true,
        "is_abstract": false,
        "name": "searchHashtags",
        "properties": [
          {
            "name": "prefix",
            "type": "string",
            "nilable": false
          },
          {
            "name": "limit",
            "type": "int32",
            "nilable": false
          }
        ],
        "type": "Hashtags",
        "description": "Searches for recently used hashtags by their prefix @prefix Hashtag prefix to search for @limit Maximum number of hashtags to be returned",
        "children": []
      }
    ],
    "WebPage": [
      {
        "function": true,
        "is_abstract": false,
        "name": "getWebPagePreview",
        "properties": [
          {
            "name": "text",
            "type": "formattedText",
            "nilable": false
          }
        ],
        "type": "WebPage",
        "description": "Returns a web page preview by the text of the message. Do not call this function too often. Returns a 404 error if the web page has no preview @text Message text with formatting",
        "children": []
      }
    ],
    "WebPageInstantView": [
      {
        "function": true,
        "is_abstract": false,
        "name": "getWebPageInstantView",
        "properties": [
          {
            "name": "url",
            "type": "string",
            "nilable": false
          },
          {
            "name": "force_full",
            "type": "Bool",
            "nilable": false
          }
        ],
        "type": "WebPageInstantView",
        "description": "Returns an instant view version of a web page if available. Returns a 404 error if the web page has no instant view page @url The web page URL @force_full If true, the full instant view for the web page will be returned",
        "children": []
      }
    ],
    "AuthenticationCodeInfo": [
      {
        "function": true,
        "is_abstract": false,
        "name": "changePhoneNumber",
        "properties": [
          {
            "name": "phone_number",
            "type": "string",
            "description": "The new phone number of the user in international format @settings Settings for the authentication of the user's phone number",
            "nilable": false
          },
          {
            "name": "settings",
            "type": "phoneNumberAuthenticationSettings",
            "nilable": false
          }
        ],
        "type": "AuthenticationCodeInfo",
        "description": "Changes the phone number of the user and sends an authentication code to the user's new phone number. On success, returns information about the sent code",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "resendChangePhoneNumberCode",
        "properties": [],
        "type": "AuthenticationCodeInfo",
        "description": "Re-sends the authentication code sent to confirm a new phone number for the user. Works only if the previously received authenticationCodeInfo next_code_type was not null",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "sendPhoneNumberVerificationCode",
        "properties": [
          {
            "name": "phone_number",
            "type": "string",
            "description": "The phone number of the user, in international format @settings Settings for the authentication of the user's phone number",
            "nilable": false
          },
          {
            "name": "settings",
            "type": "phoneNumberAuthenticationSettings",
            "nilable": false
          }
        ],
        "type": "AuthenticationCodeInfo",
        "description": "Sends a code to verify a phone number to be added to a user's Telegram Passport",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "resendPhoneNumberVerificationCode",
        "properties": [],
        "type": "AuthenticationCodeInfo",
        "description": "Re-sends the code to verify a phone number to be added to a user's Telegram Passport",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "sendPhoneNumberConfirmationCode",
        "properties": [
          {
            "name": "hash",
            "type": "string",
            "nilable": false
          },
          {
            "name": "phone_number",
            "type": "string",
            "description": "Value of the \"phone\" parameter from the link @settings Settings for the authentication of the user's phone number",
            "nilable": false
          },
          {
            "name": "settings",
            "type": "phoneNumberAuthenticationSettings",
            "nilable": false
          }
        ],
        "type": "AuthenticationCodeInfo",
        "description": "Sends phone number confirmation code. Should be called when user presses \"https://t.me/confirmphone?phone=*******&hash=**********\" or \"tg://confirmphone?phone=*******&hash=**********\" link @hash Value of the \"hash\" parameter from the link",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "resendPhoneNumberConfirmationCode",
        "properties": [],
        "type": "AuthenticationCodeInfo",
        "description": "Resends phone number confirmation code",
        "children": []
      }
    ],
    "Sessions": [
      {
        "function": true,
        "is_abstract": false,
        "name": "getActiveSessions",
        "properties": [],
        "type": "Sessions",
        "description": "Returns all active sessions of the current user",
        "children": []
      }
    ],
    "ConnectedWebsites": [
      {
        "function": true,
        "is_abstract": false,
        "name": "getConnectedWebsites",
        "properties": [],
        "type": "ConnectedWebsites",
        "description": "Returns all website where the current user used Telegram to log in",
        "children": []
      }
    ],
    "ChatEvents": [
      {
        "function": true,
        "is_abstract": false,
        "name": "getChatEventLog",
        "properties": [
          {
            "name": "chat_id",
            "type": "int53",
            "description": "Chat identifier @query Search query by which to filter events @from_event_id Identifier of an event from which to return results. Use 0 to get results from the latest events @limit Maximum number of events to return; up to 100",
            "nilable": false
          },
          {
            "name": "query",
            "type": "string",
            "nilable": false
          },
          {
            "name": "from_event_id",
            "type": "int64",
            "nilable": false
          },
          {
            "name": "limit",
            "type": "int32",
            "nilable": false
          },
          {
            "name": "filters",
            "type": "chatEventLogFilters",
            "description": "The types of events to return. By default, all types will be returned @user_ids User identifiers by which to filter events. By default, events relating to all users will be returned",
            "nilable": false
          },
          {
            "name": "user_ids",
            "type": "vector<int32>",
            "nilable": false
          }
        ],
        "type": "ChatEvents",
        "description": "Returns a list of service actions taken by chat members and administrators in the last 48 hours. Available only in supergroups and channels. Requires administrator rights. Returns results in reverse chronological order (i. e., in order of decreasing event_id)",
        "children": []
      }
    ],
    "PaymentForm": [
      {
        "function": true,
        "is_abstract": false,
        "name": "getPaymentForm",
        "properties": [
          {
            "name": "chat_id",
            "type": "int53",
            "nilable": false
          },
          {
            "name": "message_id",
            "type": "int53",
            "nilable": false
          }
        ],
        "type": "PaymentForm",
        "description": "Returns an invoice payment form. This method should be called when the user presses inlineKeyboardButtonBuy @chat_id Chat identifier of the Invoice message @message_id Message identifier",
        "children": []
      }
    ],
    "ValidatedOrderInfo": [
      {
        "function": true,
        "is_abstract": false,
        "name": "validateOrderInfo",
        "properties": [
          {
            "name": "chat_id",
            "type": "int53",
            "nilable": false
          },
          {
            "name": "message_id",
            "type": "int53",
            "nilable": false
          },
          {
            "name": "order_info",
            "type": "orderInfo",
            "nilable": false
          },
          {
            "name": "allow_save",
            "type": "Bool",
            "nilable": false
          }
        ],
        "type": "ValidatedOrderInfo",
        "description": "Validates the order information provided by a user and returns the available shipping options for a flexible invoice @chat_id Chat identifier of the Invoice message @message_id Message identifier @order_info The order information, provided by the user @allow_save True, if the order information can be saved",
        "children": []
      }
    ],
    "PaymentResult": [
      {
        "function": true,
        "is_abstract": false,
        "name": "sendPaymentForm",
        "properties": [
          {
            "name": "chat_id",
            "type": "int53",
            "nilable": false
          },
          {
            "name": "message_id",
            "type": "int53",
            "nilable": false
          },
          {
            "name": "order_info_id",
            "type": "string",
            "nilable": false
          },
          {
            "name": "shipping_option_id",
            "type": "string",
            "nilable": false
          },
          {
            "name": "credentials",
            "type": "InputCredentials",
            "description": "The credentials chosen by user for payment",
            "nilable": false
          }
        ],
        "type": "PaymentResult",
        "description": "Sends a filled-out payment form to the bot for final verification @chat_id Chat identifier of the Invoice message @message_id Message identifier @order_info_id Identifier returned by ValidateOrderInfo, or an empty string @shipping_option_id Identifier of a chosen shipping option, if applicable",
        "children": []
      }
    ],
    "PaymentReceipt": [
      {
        "function": true,
        "is_abstract": false,
        "name": "getPaymentReceipt",
        "properties": [
          {
            "name": "chat_id",
            "type": "int53",
            "nilable": false
          },
          {
            "name": "message_id",
            "type": "int53",
            "nilable": false
          }
        ],
        "type": "PaymentReceipt",
        "description": "Returns information about a successful payment @chat_id Chat identifier of the PaymentSuccessful message @message_id Message identifier",
        "children": []
      }
    ],
    "OrderInfo": [
      {
        "function": true,
        "is_abstract": false,
        "name": "getSavedOrderInfo",
        "properties": [],
        "type": "OrderInfo",
        "description": "Returns saved order info, if any",
        "children": []
      }
    ],
    "Backgrounds": [
      {
        "function": true,
        "is_abstract": false,
        "name": "getBackgrounds",
        "properties": [
          {
            "name": "for_dark_theme",
            "type": "Bool",
            "nilable": false
          }
        ],
        "type": "Backgrounds",
        "description": "Returns backgrounds installed by the user @for_dark_theme True, if the backgrounds needs to be ordered for dark theme",
        "children": []
      }
    ],
    "Background": [
      {
        "function": true,
        "is_abstract": false,
        "name": "searchBackground",
        "properties": [
          {
            "name": "name",
            "type": "string",
            "nilable": false
          }
        ],
        "type": "Background",
        "description": "Searches for a background by its name @name The name of the background",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "setBackground",
        "properties": [
          {
            "name": "background",
            "type": "InputBackground",
            "description": "The input background to use, null for solid backgrounds",
            "nilable": false
          },
          {
            "name": "type",
            "type": "BackgroundType",
            "description": "Background type; null for default background. The method will return error 404 if type is null",
            "nilable": false
          },
          {
            "name": "for_dark_theme",
            "type": "Bool",
            "description": "True, if the background is chosen for dark theme",
            "nilable": false
          }
        ],
        "type": "Background",
        "description": "Changes the background selected by the user; adds background to the list of installed backgrounds",
        "children": []
      }
    ],
    "LocalizationTargetInfo": [
      {
        "function": true,
        "is_abstract": false,
        "name": "getLocalizationTargetInfo",
        "properties": [
          {
            "name": "only_local",
            "type": "Bool",
            "nilable": false
          }
        ],
        "type": "LocalizationTargetInfo",
        "description": "Returns information about the current localization target. This is an offline request if only_local is true. Can be called before authorization @only_local If true, returns only locally available information without sending network requests",
        "children": []
      }
    ],
    "LanguagePackInfo": [
      {
        "function": true,
        "is_abstract": false,
        "name": "getLanguagePackInfo",
        "properties": [
          {
            "name": "language_pack_id",
            "type": "string",
            "nilable": false
          }
        ],
        "type": "LanguagePackInfo",
        "description": "Returns information about a language pack. Returned language pack identifier may be different from a provided one. Can be called before authorization @language_pack_id Language pack identifier",
        "children": []
      }
    ],
    "LanguagePackStrings": [
      {
        "function": true,
        "is_abstract": false,
        "name": "getLanguagePackStrings",
        "properties": [
          {
            "name": "language_pack_id",
            "type": "string",
            "nilable": false
          },
          {
            "name": "keys",
            "type": "vector<string>",
            "nilable": false
          }
        ],
        "type": "LanguagePackStrings",
        "description": "Returns strings from a language pack in the current localization target by their keys. Can be called before authorization @language_pack_id Language pack identifier of the strings to be returned @keys Language pack keys of the strings to be returned; leave empty to request all available strings",
        "children": []
      }
    ],
    "PushReceiverId": [
      {
        "function": true,
        "is_abstract": false,
        "name": "registerDevice",
        "properties": [
          {
            "name": "device_token",
            "type": "DeviceToken",
            "nilable": false
          },
          {
            "name": "other_user_ids",
            "type": "vector<int32>",
            "nilable": false
          }
        ],
        "type": "PushReceiverId",
        "description": "Registers the currently used device for receiving push notifications. Returns a globally unique identifier of the push notification subscription @device_token Device token @other_user_ids List of user identifiers of other users currently using the client",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "getPushReceiverId",
        "properties": [
          {
            "name": "payload",
            "type": "string",
            "nilable": false
          }
        ],
        "type": "PushReceiverId",
        "description": "Returns a globally unique push notification subscription identifier for identification of an account, which has received a push notification. This is an offline method. Can be called before authorization. Can be called synchronously @payload JSON-encoded push notification payload",
        "children": []
      }
    ],
    "TMeUrls": [
      {
        "function": true,
        "is_abstract": false,
        "name": "getRecentlyVisitedTMeUrls",
        "properties": [
          {
            "name": "referrer",
            "type": "string",
            "nilable": false
          }
        ],
        "type": "TMeUrls",
        "description": "Returns t.me URLs recently visited by a newly registered user @referrer Google Play referrer to identify the user",
        "children": []
      }
    ],
    "UserPrivacySettingRules": [
      {
        "function": true,
        "is_abstract": false,
        "name": "getUserPrivacySettingRules",
        "properties": [
          {
            "name": "setting",
            "type": "UserPrivacySetting",
            "nilable": false
          }
        ],
        "type": "UserPrivacySettingRules",
        "description": "Returns the current privacy settings @setting The privacy setting",
        "children": []
      }
    ],
    "OptionValue": [
      {
        "function": true,
        "is_abstract": false,
        "name": "getOption",
        "properties": [
          {
            "name": "name",
            "type": "string",
            "description": "The name of the option",
            "nilable": false
          }
        ],
        "type": "OptionValue",
        "description": "Returns the value of an option by its name. (Check the list of available options on https://core.telegram.org/tdlib/options.) Can be called before authorization",
        "children": []
      }
    ],
    "AccountTtl": [
      {
        "function": true,
        "is_abstract": false,
        "name": "getAccountTtl",
        "properties": [],
        "type": "AccountTtl",
        "description": "Returns the period of inactivity after which the account of the current user will automatically be deleted",
        "children": []
      }
    ],
    "ChatReportSpamState": [
      {
        "function": true,
        "is_abstract": false,
        "name": "getChatReportSpamState",
        "properties": [
          {
            "name": "chat_id",
            "type": "int53",
            "nilable": false
          }
        ],
        "type": "ChatReportSpamState",
        "description": "Returns information on whether the current chat can be reported as spam @chat_id Chat identifier",
        "children": []
      }
    ],
    "StorageStatistics": [
      {
        "function": true,
        "is_abstract": false,
        "name": "getStorageStatistics",
        "properties": [
          {
            "name": "chat_limit",
            "type": "int32",
            "nilable": false
          }
        ],
        "type": "StorageStatistics",
        "description": "Returns storage usage statistics. Can be called before authorization @chat_limit Maximum number of chats with the largest storage usage for which separate statistics should be returned. All other chats will be grouped in entries with chat_id == 0. If the chat info database is not used, the chat_limit is ignored and is always set to 0",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "optimizeStorage",
        "properties": [
          {
            "name": "size",
            "type": "int53",
            "description": "Limit on the total size of files after deletion. Pass -1 to use the default limit",
            "nilable": false
          },
          {
            "name": "ttl",
            "type": "int32",
            "description": "Limit on the time that has passed since the last time a file was accessed (or creation time for some filesystems). Pass -1 to use the default limit",
            "nilable": false
          },
          {
            "name": "count",
            "type": "int32",
            "description": "Limit on the total count of files after deletion. Pass -1 to use the default limit",
            "nilable": false
          },
          {
            "name": "immunity_delay",
            "type": "int32",
            "description": "The amount of time after the creation of a file during which it can't be deleted, in seconds. Pass -1 to use the default value",
            "nilable": false
          },
          {
            "name": "file_types",
            "type": "vector<FileType>",
            "description": "If not empty, only files with the given type(s) are considered. By default, all types except thumbnails, profile photos, stickers and wallpapers are deleted",
            "nilable": false
          },
          {
            "name": "chat_ids",
            "type": "vector<int53>",
            "description": "If not empty, only files from the given chats are considered. Use 0 as chat identifier to delete files not belonging to any chat (e.g., profile photos)",
            "nilable": false
          },
          {
            "name": "exclude_chat_ids",
            "type": "vector<int53>",
            "description": "If not empty, files from the given chats are excluded. Use 0 as chat identifier to exclude all files not belonging to any chat (e.g., profile photos)",
            "nilable": false
          },
          {
            "name": "chat_limit",
            "type": "int32",
            "description": "Same as in getStorageStatistics. Affects only returned statistics",
            "nilable": false
          }
        ],
        "type": "StorageStatistics",
        "description": "Optimizes storage usage, i.e. deletes some files and returns new storage usage statistics. Secret thumbnails can't be deleted",
        "children": []
      }
    ],
    "StorageStatisticsFast": [
      {
        "function": true,
        "is_abstract": false,
        "name": "getStorageStatisticsFast",
        "properties": [],
        "type": "StorageStatisticsFast",
        "description": "Quickly returns approximate storage usage statistics. Can be called before authorization",
        "children": []
      }
    ],
    "DatabaseStatistics": [
      {
        "function": true,
        "is_abstract": false,
        "name": "getDatabaseStatistics",
        "properties": [],
        "type": "DatabaseStatistics",
        "description": "Returns database statistics",
        "children": []
      }
    ],
    "NetworkStatistics": [
      {
        "function": true,
        "is_abstract": false,
        "name": "getNetworkStatistics",
        "properties": [
          {
            "name": "only_current",
            "type": "Bool",
            "nilable": false
          }
        ],
        "type": "NetworkStatistics",
        "description": "Returns network data usage statistics. Can be called before authorization @only_current If true, returns only data for the current library launch",
        "children": []
      }
    ],
    "AutoDownloadSettingsPresets": [
      {
        "function": true,
        "is_abstract": false,
        "name": "getAutoDownloadSettingsPresets",
        "properties": [],
        "type": "AutoDownloadSettingsPresets",
        "description": "Returns auto-download settings presets for the currently logged in user",
        "children": []
      }
    ],
    "PassportElement": [
      {
        "function": true,
        "is_abstract": false,
        "name": "getPassportElement",
        "properties": [
          {
            "name": "type",
            "type": "PassportElementType",
            "nilable": false
          },
          {
            "name": "password",
            "type": "string",
            "nilable": false
          }
        ],
        "type": "PassportElement",
        "description": "Returns one of the available Telegram Passport elements @type Telegram Passport element type @password Password of the current user",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "setPassportElement",
        "properties": [
          {
            "name": "element",
            "type": "InputPassportElement",
            "nilable": false
          },
          {
            "name": "password",
            "type": "string",
            "nilable": false
          }
        ],
        "type": "PassportElement",
        "description": "Adds an element to the user's Telegram Passport. May return an error with a message \"PHONE_VERIFICATION_NEEDED\" or \"EMAIL_VERIFICATION_NEEDED\" if the chosen phone number or the chosen email address must be verified first @element Input Telegram Passport element @password Password of the current user",
        "children": []
      }
    ],
    "PassportElements": [
      {
        "function": true,
        "is_abstract": false,
        "name": "getAllPassportElements",
        "properties": [
          {
            "name": "password",
            "type": "string",
            "nilable": false
          }
        ],
        "type": "PassportElements",
        "description": "Returns all available Telegram Passport elements @password Password of the current user",
        "children": []
      }
    ],
    "PassportAuthorizationForm": [
      {
        "function": true,
        "is_abstract": false,
        "name": "getPassportAuthorizationForm",
        "properties": [
          {
            "name": "bot_user_id",
            "type": "int32",
            "nilable": false
          },
          {
            "name": "scope",
            "type": "string",
            "nilable": false
          },
          {
            "name": "public_key",
            "type": "string",
            "nilable": false
          },
          {
            "name": "nonce",
            "type": "string",
            "nilable": false
          }
        ],
        "type": "PassportAuthorizationForm",
        "description": "Returns a Telegram Passport authorization form for sharing data with a service @bot_user_id User identifier of the service's bot @scope Telegram Passport element types requested by the service @public_key Service's public_key @nonce Authorization form nonce provided by the service",
        "children": []
      }
    ],
    "PassportElementsWithErrors": [
      {
        "function": true,
        "is_abstract": false,
        "name": "getPassportAuthorizationFormAvailableElements",
        "properties": [
          {
            "name": "autorization_form_id",
            "type": "int32",
            "nilable": false
          },
          {
            "name": "password",
            "type": "string",
            "nilable": false
          }
        ],
        "type": "PassportElementsWithErrors",
        "description": "Returns already available Telegram Passport elements suitable for completing a Telegram Passport authorization form. Result can be received only once for each authorization form @autorization_form_id Authorization form identifier @password Password of the current user",
        "children": []
      }
    ],
    "CustomRequestResult": [
      {
        "function": true,
        "is_abstract": false,
        "name": "sendCustomRequest",
        "properties": [
          {
            "name": "method",
            "type": "string",
            "nilable": false
          },
          {
            "name": "parameters",
            "type": "string",
            "nilable": false
          }
        ],
        "type": "CustomRequestResult",
        "description": "Sends a custom request; for bots only @method The method name @parameters JSON-serialized method parameters",
        "children": []
      }
    ],
    "TonLiteServerResponse": [
      {
        "function": true,
        "is_abstract": false,
        "name": "sendTonLiteServerRequest",
        "properties": [
          {
            "name": "request",
            "type": "bytes",
            "nilable": false
          }
        ],
        "type": "TonLiteServerResponse",
        "description": "Sends a request to TON lite server through Telegram servers @request The request",
        "children": []
      }
    ],
    "TonWalletPasswordSalt": [
      {
        "function": true,
        "is_abstract": false,
        "name": "getTonWalletPasswordSalt",
        "properties": [],
        "type": "TonWalletPasswordSalt",
        "description": "Returns a salt to be used with locally stored password to access a local TON-based wallet",
        "children": []
      }
    ],
    "DeepLinkInfo": [
      {
        "function": true,
        "is_abstract": false,
        "name": "getDeepLinkInfo",
        "properties": [
          {
            "name": "link",
            "type": "string",
            "nilable": false
          }
        ],
        "type": "DeepLinkInfo",
        "description": "Returns information about a tg:// deep link. Use \"tg://need_update_for_some_feature\" or \"tg:some_unsupported_feature\" for testing. Returns a 404 error for unknown links. Can be called before authorization @link The link",
        "children": []
      }
    ],
    "Proxy": [
      {
        "function": true,
        "is_abstract": false,
        "name": "addProxy",
        "properties": [
          {
            "name": "server",
            "type": "string",
            "nilable": false
          },
          {
            "name": "port",
            "type": "int32",
            "nilable": false
          },
          {
            "name": "enable",
            "type": "Bool",
            "nilable": false
          },
          {
            "name": "type",
            "type": "ProxyType",
            "nilable": false
          }
        ],
        "type": "Proxy",
        "description": "Adds a proxy server for network requests. Can be called before authorization @server Proxy server IP address @port Proxy server port @enable True, if the proxy should be enabled @type Proxy type",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "editProxy",
        "properties": [
          {
            "name": "proxy_id",
            "type": "int32",
            "nilable": false
          },
          {
            "name": "server",
            "type": "string",
            "nilable": false
          },
          {
            "name": "port",
            "type": "int32",
            "nilable": false
          },
          {
            "name": "enable",
            "type": "Bool",
            "nilable": false
          },
          {
            "name": "type",
            "type": "ProxyType",
            "nilable": false
          }
        ],
        "type": "Proxy",
        "description": "Edits an existing proxy server for network requests. Can be called before authorization @proxy_id Proxy identifier @server Proxy server IP address @port Proxy server port @enable True, if the proxy should be enabled @type Proxy type",
        "children": []
      }
    ],
    "Proxies": [
      {
        "function": true,
        "is_abstract": false,
        "name": "getProxies",
        "properties": [],
        "type": "Proxies",
        "description": "Returns list of proxies that are currently set up. Can be called before authorization",
        "children": []
      }
    ],
    "Seconds": [
      {
        "function": true,
        "is_abstract": false,
        "name": "pingProxy",
        "properties": [
          {
            "name": "proxy_id",
            "type": "int32",
            "nilable": false
          }
        ],
        "type": "Seconds",
        "description": "Computes time needed to receive a response from a Telegram server through a proxy. Can be called before authorization @proxy_id Proxy identifier. Use 0 to ping a Telegram server without a proxy",
        "children": []
      }
    ],
    "LogStream": [
      {
        "function": true,
        "is_abstract": false,
        "name": "getLogStream",
        "properties": [],
        "type": "LogStream",
        "description": "Returns information about currently used log stream for internal logging of TDLib. This is an offline method. Can be called before authorization. Can be called synchronously",
        "children": []
      }
    ],
    "LogVerbosityLevel": [
      {
        "function": true,
        "is_abstract": false,
        "name": "getLogVerbosityLevel",
        "properties": [],
        "type": "LogVerbosityLevel",
        "description": "Returns current verbosity level of the internal logging of TDLib. This is an offline method. Can be called before authorization. Can be called synchronously",
        "children": []
      },
      {
        "function": true,
        "is_abstract": false,
        "name": "getLogTagVerbosityLevel",
        "properties": [
          {
            "name": "tag",
            "type": "string",
            "nilable": false
          }
        ],
        "type": "LogVerbosityLevel",
        "description": "Returns current verbosity level for a specified TDLib internal log tag. This is an offline method. Can be called before authorization. Can be called synchronously @tag Logging tag to change verbosity level",
        "children": []
      }
    ],
    "LogTags": [
      {
        "function": true,
        "is_abstract": false,
        "name": "getLogTags",
        "properties": [],
        "type": "LogTags",
        "description": "Returns list of available TDLib internal log tags, for example, [\"actor\", \"binlog\", \"connections\", \"notifications\", \"proxy\"]. This is an offline method. Can be called before authorization. Can be called synchronously",
        "children": []
      }
    ],
    "TestString": [
      {
        "function": true,
        "is_abstract": false,
        "name": "testCallString",
        "properties": [
          {
            "name": "x",
            "type": "string",
            "nilable": false
          }
        ],
        "type": "TestString",
        "description": "Returns the received string; for testing only. This is an offline method. Can be called before authorization @x String to return",
        "children": []
      }
    ],
    "TestBytes": [
      {
        "function": true,
        "is_abstract": false,
        "name": "testCallBytes",
        "properties": [
          {
            "name": "x",
            "type": "bytes",
            "nilable": false
          }
        ],
        "type": "TestBytes",
        "description": "Returns the received bytes; for testing only. This is an offline method. Can be called before authorization @x Bytes to return",
        "children": []
      }
    ],
    "TestVectorInt": [
      {
        "function": true,
        "is_abstract": false,
        "name": "testCallVectorInt",
        "properties": [
          {
            "name": "x",
            "type": "vector<int32>",
            "nilable": false
          }
        ],
        "type": "TestVectorInt",
        "description": "Returns the received vector of numbers; for testing only. This is an offline method. Can be called before authorization @x Vector of numbers to return",
        "children": []
      }
    ],
    "TestVectorIntObject": [
      {
        "function": true,
        "is_abstract": false,
        "name": "testCallVectorIntObject",
        "properties": [
          {
            "name": "x",
            "type": "vector<testInt>",
            "nilable": false
          }
        ],
        "type": "TestVectorIntObject",
        "description": "Returns the received vector of objects containing a number; for testing only. This is an offline method. Can be called before authorization @x Vector of objects to return",
        "children": []
      }
    ],
    "TestVectorString": [
      {
        "function": true,
        "is_abstract": false,
        "name": "testCallVectorString",
        "properties": [
          {
            "name": "x",
            "type": "vector<string>",
            "nilable": false
          }
        ],
        "type": "TestVectorString",
        "description": "Returns the received vector of strings; for testing only. This is an offline method. Can be called before authorization @x Vector of strings to return",
        "children": []
      }
    ],
    "TestVectorStringObject": [
      {
        "function": true,
        "is_abstract": false,
        "name": "testCallVectorStringObject",
        "properties": [
          {
            "name": "x",
            "type": "vector<testString>",
            "nilable": false
          }
        ],
        "type": "TestVectorStringObject",
        "description": "Returns the received vector of objects containing a string; for testing only. This is an offline method. Can be called before authorization @x Vector of objects to return",
        "children": []
      }
    ],
    "TestInt": [
      {
        "function": true,
        "is_abstract": false,
        "name": "testSquareInt",
        "properties": [
          {
            "name": "x",
            "type": "int32",
            "nilable": false
          }
        ],
        "type": "TestInt",
        "description": "Returns the squared received number; for testing only. This is an offline method. Can be called before authorization @x Number to square",
        "children": []
      }
    ],
    "Update": [
      {
        "function": true,
        "is_abstract": false,
        "name": "testUseUpdate",
        "properties": [],
        "type": "Update",
        "description": "Does nothing and ensures that the Update object is used; for testing only. This is an offline method. Can be called before authorization",
        "children": []
      }
    ],
    "Error": [
      {
        "function": true,
        "is_abstract": false,
        "name": "testReturnError",
        "properties": [
          {
            "name": "error",
            "type": "error",
            "nilable": false
          }
        ],
        "type": "Error",
        "description": "Returns the specified error and ensures that the Error object is used; for testing only. This is an offline method. Can be called before authorization. Can be called synchronously @error The error to be returned",
        "children": []
      }
    ]
  }
}